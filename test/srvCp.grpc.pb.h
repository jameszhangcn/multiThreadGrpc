// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvCp.proto
#ifndef GRPC_srvCp_2eproto__INCLUDED
#define GRPC_srvCp_2eproto__INCLUDED

#include "srvCp.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srvCp {

class Cp final {
 public:
  static constexpr char const* service_full_name() {
    return "srvCp.Cp";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncSecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncSecurityConfigureCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncSecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncSecurityConfigureCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncCreateTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncCreateTunnelCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncModifyTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncModifyTunnelCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncDeleteTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncDeleteTunnelCfmRaw(context, request, cq));
    }
    virtual ::grpc::Status AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::srvCp::CfmReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> AsyncAddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(AsyncAddRbConfigureCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>> PrepareAsyncAddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>>(PrepareAsyncAddRbConfigureCfmRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncSecurityConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncSecurityConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* AsyncAddRbConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvCp::CfmReply>* PrepareAsyncAddRbConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncSecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncSecurityConfigureCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncSecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncSecurityConfigureCfmRaw(context, request, cq));
    }
    ::grpc::Status CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncCreateTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncCreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncCreateTunnelCfmRaw(context, request, cq));
    }
    ::grpc::Status ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncModifyTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncModifyTunnelCfmRaw(context, request, cq));
    }
    ::grpc::Status DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncDeleteTunnelCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncDeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncDeleteTunnelCfmRaw(context, request, cq));
    }
    ::grpc::Status AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::srvCp::CfmReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> AsyncAddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(AsyncAddRbConfigureCfmRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>> PrepareAsyncAddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>>(PrepareAsyncAddRbConfigureCfmRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncSecurityConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncSecurityConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* AsyncAddRbConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* PrepareAsyncAddRbConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SecurityConfigureCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTunnelCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyTunnelCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTunnelCfm_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRbConfigureCfm_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response);
    virtual ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SecurityConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SecurityConfigureCfm() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SecurityConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSecurityConfigureCfm(::grpc::ServerContext* context, ::srvCp::SecurityConfigureRsp* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTunnelCfm() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTunnelCfm(::grpc::ServerContext* context, ::srvCp::CreateTunnelRsp* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModifyTunnelCfm() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyTunnelCfm(::grpc::ServerContext* context, ::srvCp::ModifyTunnelRsp* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTunnelCfm() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTunnelCfm(::grpc::ServerContext* context, ::srvCp::DeleteTunnelRsp* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRbConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRbConfigureCfm() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddRbConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRbConfigureCfm(::grpc::ServerContext* context, ::srvCp::AddRbConfigureRsp* request, ::grpc::ServerAsyncResponseWriter< ::srvCp::CfmReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SecurityConfigureCfm<WithAsyncMethod_CreateTunnelCfm<WithAsyncMethod_ModifyTunnelCfm<WithAsyncMethod_DeleteTunnelCfm<WithAsyncMethod_AddRbConfigureCfm<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SecurityConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SecurityConfigureCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response) { return this->SecurityConfigureCfm(context, request, response); }));}
    void SetMessageAllocatorFor_SecurityConfigureCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SecurityConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SecurityConfigureCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SecurityConfigureCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response) { return this->CreateTunnelCfm(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTunnelCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ModifyTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response) { return this->ModifyTunnelCfm(context, request, response); }));}
    void SetMessageAllocatorFor_ModifyTunnelCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ModifyTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ModifyTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response) { return this->DeleteTunnelCfm(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTunnelCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddRbConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddRbConfigureCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response) { return this->AddRbConfigureCfm(context, request, response); }));}
    void SetMessageAllocatorFor_AddRbConfigureCfm(
        ::grpc::experimental::MessageAllocator< ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddRbConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRbConfigureCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRbConfigureCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SecurityConfigureCfm<ExperimentalWithCallbackMethod_CreateTunnelCfm<ExperimentalWithCallbackMethod_ModifyTunnelCfm<ExperimentalWithCallbackMethod_DeleteTunnelCfm<ExperimentalWithCallbackMethod_AddRbConfigureCfm<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SecurityConfigureCfm<ExperimentalWithCallbackMethod_CreateTunnelCfm<ExperimentalWithCallbackMethod_ModifyTunnelCfm<ExperimentalWithCallbackMethod_DeleteTunnelCfm<ExperimentalWithCallbackMethod_AddRbConfigureCfm<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SecurityConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SecurityConfigureCfm() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SecurityConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTunnelCfm() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModifyTunnelCfm() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTunnelCfm() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRbConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRbConfigureCfm() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddRbConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SecurityConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SecurityConfigureCfm() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SecurityConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSecurityConfigureCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTunnelCfm() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTunnelCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModifyTunnelCfm() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyTunnelCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTunnelCfm() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTunnelCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRbConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRbConfigureCfm() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddRbConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRbConfigureCfm(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SecurityConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SecurityConfigureCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SecurityConfigureCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SecurityConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SecurityConfigureCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SecurityConfigureCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTunnelCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ModifyTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModifyTunnelCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ModifyTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ModifyTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteTunnelCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTunnelCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTunnelCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTunnelCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddRbConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddRbConfigureCfm() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRbConfigureCfm(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddRbConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRbConfigureCfm(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRbConfigureCfm(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SecurityConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SecurityConfigureCfm() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedSecurityConfigureCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SecurityConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SecurityConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::SecurityConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSecurityConfigureCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::SecurityConfigureRsp,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTunnelCfm() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedCreateTunnelCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::CreateTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTunnelCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::CreateTunnelRsp,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModifyTunnelCfm() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedModifyTunnelCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModifyTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::ModifyTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyTunnelCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::ModifyTunnelRsp,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTunnelCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTunnelCfm() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedDeleteTunnelCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTunnelCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTunnelCfm(::grpc::ServerContext* /*context*/, const ::srvCp::DeleteTunnelRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTunnelCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::DeleteTunnelRsp,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRbConfigureCfm : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRbConfigureCfm() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply>* streamer) {
                       return this->StreamedAddRbConfigureCfm(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRbConfigureCfm() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRbConfigureCfm(::grpc::ServerContext* /*context*/, const ::srvCp::AddRbConfigureRsp* /*request*/, ::srvCp::CfmReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRbConfigureCfm(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvCp::AddRbConfigureRsp,::srvCp::CfmReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SecurityConfigureCfm<WithStreamedUnaryMethod_CreateTunnelCfm<WithStreamedUnaryMethod_ModifyTunnelCfm<WithStreamedUnaryMethod_DeleteTunnelCfm<WithStreamedUnaryMethod_AddRbConfigureCfm<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SecurityConfigureCfm<WithStreamedUnaryMethod_CreateTunnelCfm<WithStreamedUnaryMethod_ModifyTunnelCfm<WithStreamedUnaryMethod_DeleteTunnelCfm<WithStreamedUnaryMethod_AddRbConfigureCfm<Service > > > > > StreamedService;
};

}  // namespace srvCp


#endif  // GRPC_srvCp_2eproto__INCLUDED
