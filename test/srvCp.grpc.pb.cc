// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvCp.proto

#include "srvCp.pb.h"
#include "srvCp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srvCp {

static const char* Cp_method_names[] = {
  "/srvCp.Cp/SecurityConfigureCfm",
  "/srvCp.Cp/CreateTunnelCfm",
  "/srvCp.Cp/ModifyTunnelCfm",
  "/srvCp.Cp/DeleteTunnelCfm",
  "/srvCp.Cp/AddRbConfigureCfm",
};

std::unique_ptr< Cp::Stub> Cp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Cp::Stub> stub(new Cp::Stub(channel));
  return stub;
}

Cp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SecurityConfigureCfm_(Cp_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTunnelCfm_(Cp_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyTunnelCfm_(Cp_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTunnelCfm_(Cp_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRbConfigureCfm_(Cp_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Cp::Stub::SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SecurityConfigureCfm_, context, request, response);
}

void Cp::Stub::experimental_async::SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SecurityConfigureCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::SecurityConfigureCfm(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SecurityConfigureCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncSecurityConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_SecurityConfigureCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncSecurityConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::SecurityConfigureRsp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSecurityConfigureCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTunnelCfm_, context, request, response);
}

void Cp::Stub::experimental_async::CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTunnelCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::CreateTunnelCfm(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTunnelCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_CreateTunnelCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncCreateTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::CreateTunnelRsp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTunnelCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyTunnelCfm_, context, request, response);
}

void Cp::Stub::experimental_async::ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyTunnelCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::ModifyTunnelCfm(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyTunnelCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_ModifyTunnelCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncModifyTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::ModifyTunnelRsp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyTunnelCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTunnelCfm_, context, request, response);
}

void Cp::Stub::experimental_async::DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTunnelCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::DeleteTunnelCfm(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTunnelCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_DeleteTunnelCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncDeleteTunnelCfmRaw(::grpc::ClientContext* context, const ::srvCp::DeleteTunnelRsp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTunnelCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Cp::Stub::AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::srvCp::CfmReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRbConfigureCfm_, context, request, response);
}

void Cp::Stub::experimental_async::AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRbConfigureCfm_, context, request, response, std::move(f));
}

void Cp::Stub::experimental_async::AddRbConfigureCfm(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRbConfigureCfm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::PrepareAsyncAddRbConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvCp::CfmReply>::Create(channel_.get(), cq, rpcmethod_AddRbConfigureCfm_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvCp::CfmReply>* Cp::Stub::AsyncAddRbConfigureCfmRaw(::grpc::ClientContext* context, const ::srvCp::AddRbConfigureRsp& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRbConfigureCfmRaw(context, request, cq);
  result->StartCall();
  return result;
}

Cp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::SecurityConfigureRsp, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::SecurityConfigureRsp* req,
             ::srvCp::CfmReply* resp) {
               return service->SecurityConfigureCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::CreateTunnelRsp, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::CreateTunnelRsp* req,
             ::srvCp::CfmReply* resp) {
               return service->CreateTunnelCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::ModifyTunnelRsp, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::ModifyTunnelRsp* req,
             ::srvCp::CfmReply* resp) {
               return service->ModifyTunnelCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::DeleteTunnelRsp, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::DeleteTunnelRsp* req,
             ::srvCp::CfmReply* resp) {
               return service->DeleteTunnelCfm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Cp_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Cp::Service, ::srvCp::AddRbConfigureRsp, ::srvCp::CfmReply>(
          [](Cp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvCp::AddRbConfigureRsp* req,
             ::srvCp::CfmReply* resp) {
               return service->AddRbConfigureCfm(ctx, req, resp);
             }, this)));
}

Cp::Service::~Service() {
}

::grpc::Status Cp::Service::SecurityConfigureCfm(::grpc::ServerContext* context, const ::srvCp::SecurityConfigureRsp* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::CreateTunnelCfm(::grpc::ServerContext* context, const ::srvCp::CreateTunnelRsp* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::ModifyTunnelCfm(::grpc::ServerContext* context, const ::srvCp::ModifyTunnelRsp* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::DeleteTunnelCfm(::grpc::ServerContext* context, const ::srvCp::DeleteTunnelRsp* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Cp::Service::AddRbConfigureCfm(::grpc::ServerContext* context, const ::srvCp::AddRbConfigureRsp* request, ::srvCp::CfmReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srvCp

