// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mhdr.proto

#include "mhdr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RID_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteInfo_mhdr_2eproto;
namespace mhdr {
class RIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RID> _instance;
} _RID_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class RouteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteInfo> _instance;
} _RouteInfo_default_instance_;
class MsgHdrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MsgHdr> _instance;
} _MsgHdr_default_instance_;
}  // namespace mhdr
static void InitDefaultsscc_info_Location_mhdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mhdr::_Location_default_instance_;
    new (ptr) ::mhdr::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mhdr::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_mhdr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Location_mhdr_2eproto}, {}};

static void InitDefaultsscc_info_MsgHdr_mhdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mhdr::_MsgHdr_default_instance_;
    new (ptr) ::mhdr::MsgHdr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mhdr::MsgHdr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgHdr_mhdr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MsgHdr_mhdr_2eproto}, {
      &scc_info_RID_mhdr_2eproto.base,
      &scc_info_Location_mhdr_2eproto.base,
      &scc_info_RouteInfo_mhdr_2eproto.base,}};

static void InitDefaultsscc_info_RID_mhdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mhdr::_RID_default_instance_;
    new (ptr) ::mhdr::RID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mhdr::RID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RID_mhdr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RID_mhdr_2eproto}, {}};

static void InitDefaultsscc_info_RouteInfo_mhdr_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mhdr::_RouteInfo_default_instance_;
    new (ptr) ::mhdr::RouteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mhdr::RouteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteInfo_mhdr_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteInfo_mhdr_2eproto}, {
      &scc_info_RID_mhdr_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mhdr_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mhdr_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mhdr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mhdr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mhdr::RID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mhdr::RID, sn_),
  PROTOBUF_FIELD_OFFSET(::mhdr::RID, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mhdr::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mhdr::Location, trport_),
  PROTOBUF_FIELD_OFFSET(::mhdr::Location, address_),
  PROTOBUF_FIELD_OFFSET(::mhdr::Location, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mhdr::RouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mhdr::RouteInfo, rid_),
  PROTOBUF_FIELD_OFFSET(::mhdr::RouteInfo, loc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, version_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, isreq_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, rspcode_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, method_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, methodname_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, torid_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, fromrid_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, toloc_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, alttolocs_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, fromloc_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, transid_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, sid_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, traceid_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, routes_),
  PROTOBUF_FIELD_OFFSET(::mhdr::MsgHdr, vias_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mhdr::RID)},
  { 7, -1, sizeof(::mhdr::Location)},
  { 15, -1, sizeof(::mhdr::RouteInfo)},
  { 22, -1, sizeof(::mhdr::MsgHdr)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mhdr::_RID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mhdr::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mhdr::_RouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mhdr::_MsgHdr_default_instance_),
};

const char descriptor_table_protodef_mhdr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmhdr.proto\022\004mhdr\"\036\n\003RID\022\n\n\002sn\030\n \001(\t\022\013\n"
  "\003cid\030\024 \001(\t\"J\n\010Location\022\037\n\006trport\030\n \001(\0162\017"
  ".mhdr.Transport\022\017\n\007address\030\024 \001(\t\022\014\n\004port"
  "\030\036 \001(\007\"0\n\tRouteInfo\022\026\n\003rid\030\n \001(\0132\t.mhdr."
  "RID\022\013\n\003loc\030\024 \001(\t\"\350\002\n\006MsgHdr\022\017\n\007version\030\n"
  " \001(\r\022\r\n\005isReq\030\024 \001(\010\022\017\n\007rspCode\030\036 \001(\r\022\016\n\006"
  "method\030( \001(\005\022\022\n\nmethodName\0302 \001(\t\022\030\n\005toRI"
  "D\030< \001(\0132\t.mhdr.RID\022\032\n\007fromRID\030F \001(\0132\t.mh"
  "dr.RID\022\035\n\005toLoc\030P \001(\0132\016.mhdr.Location\022!\n"
  "\taltToLocs\030Z \003(\0132\016.mhdr.Location\022\037\n\007from"
  "Loc\030d \001(\0132\016.mhdr.Location\022\017\n\007transID\030n \001"
  "(\r\022\013\n\003sid\030x \001(\t\022\020\n\007traceID\030\202\001 \001(\t\022 \n\006rou"
  "tes\030\214\001 \003(\0132\017.mhdr.RouteInfo\022\036\n\004vias\030\226\001 \003"
  "(\0132\017.mhdr.RouteInfo*\035\n\tTransport\022\007\n\003TCP\020"
  "\000\022\007\n\003TLS\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mhdr_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mhdr_2eproto_sccs[4] = {
  &scc_info_Location_mhdr_2eproto.base,
  &scc_info_MsgHdr_mhdr_2eproto.base,
  &scc_info_RID_mhdr_2eproto.base,
  &scc_info_RouteInfo_mhdr_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mhdr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mhdr_2eproto = {
  false, false, descriptor_table_protodef_mhdr_2eproto, "mhdr.proto", 578,
  &descriptor_table_mhdr_2eproto_once, descriptor_table_mhdr_2eproto_sccs, descriptor_table_mhdr_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_mhdr_2eproto::offsets,
  file_level_metadata_mhdr_2eproto, 4, file_level_enum_descriptors_mhdr_2eproto, file_level_service_descriptors_mhdr_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mhdr_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mhdr_2eproto)), true);
namespace mhdr {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transport_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mhdr_2eproto);
  return file_level_enum_descriptors_mhdr_2eproto[0];
}
bool Transport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RID::InitAsDefaultInstance() {
}
class RID::_Internal {
 public:
};

RID::RID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mhdr.RID)
}
RID::RID(const RID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sn().empty()) {
    sn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sn(),
      GetArena());
  }
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cid().empty()) {
    cid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mhdr.RID)
}

void RID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RID_mhdr_2eproto.base);
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RID::~RID() {
  // @@protoc_insertion_point(destructor:mhdr.RID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RID::ArenaDtor(void* object) {
  RID* _this = reinterpret_cast< RID* >(object);
  (void)_this;
}
void RID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RID& RID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RID_mhdr_2eproto.base);
  return *internal_default_instance();
}


void RID::Clear() {
// @@protoc_insertion_point(message_clear_start:mhdr.RID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sn = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_sn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.RID.sn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_cid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.RID.cid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mhdr.RID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sn = 10;
  if (this->sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.RID.sn");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_sn(), target);
  }

  // string cid = 20;
  if (this->cid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.RID.cid");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mhdr.RID)
  return target;
}

size_t RID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mhdr.RID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sn = 10;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sn());
  }

  // string cid = 20;
  if (this->cid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mhdr.RID)
  GOOGLE_DCHECK_NE(&from, this);
  const RID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mhdr.RID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mhdr.RID)
    MergeFrom(*source);
  }
}

void RID::MergeFrom(const RID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mhdr.RID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sn().size() > 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.cid().size() > 0) {
    _internal_set_cid(from._internal_cid());
  }
}

void RID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mhdr.RID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RID::CopyFrom(const RID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mhdr.RID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RID::IsInitialized() const {
  return true;
}

void RID::InternalSwap(RID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sn_.Swap(&other->sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cid_.Swap(&other->cid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata RID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Location::InitAsDefaultInstance() {
}
class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mhdr.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&trport_, &from.trport_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&trport_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:mhdr.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_mhdr_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&trport_)) + sizeof(port_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:mhdr.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_mhdr_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:mhdr.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&trport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&trport_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.Transport trport = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trport(static_cast<::mhdr::Transport>(val));
        } else goto handle_unusual;
        continue;
      // string address = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.Location.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 port = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mhdr.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.Transport trport = 10;
  if (this->trport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_trport(), target);
  }

  // string address = 20;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.Location.address");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_address(), target);
  }

  // fixed32 port = 30;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(30, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mhdr.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mhdr.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 20;
  if (this->address().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .mhdr.Transport trport = 10;
  if (this->trport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trport());
  }

  // fixed32 port = 30;
  if (this->port() != 0) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mhdr.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mhdr.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mhdr.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mhdr.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.trport() != 0) {
    _internal_set_trport(from._internal_trport());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mhdr.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mhdr.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, port_)
      + sizeof(Location::port_)
      - PROTOBUF_FIELD_OFFSET(Location, trport_)>(
          reinterpret_cast<char*>(&trport_),
          reinterpret_cast<char*>(&other->trport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteInfo::InitAsDefaultInstance() {
  ::mhdr::_RouteInfo_default_instance_._instance.get_mutable()->rid_ = const_cast< ::mhdr::RID*>(
      ::mhdr::RID::internal_default_instance());
}
class RouteInfo::_Internal {
 public:
  static const ::mhdr::RID& rid(const RouteInfo* msg);
};

const ::mhdr::RID&
RouteInfo::_Internal::rid(const RouteInfo* msg) {
  return *msg->rid_;
}
RouteInfo::RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mhdr.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loc().empty()) {
    loc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_loc(),
      GetArena());
  }
  if (from._internal_has_rid()) {
    rid_ = new ::mhdr::RID(*from.rid_);
  } else {
    rid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mhdr.RouteInfo)
}

void RouteInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteInfo_mhdr_2eproto.base);
  loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rid_ = nullptr;
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:mhdr.RouteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rid_;
}

void RouteInfo::ArenaDtor(void* object) {
  RouteInfo* _this = reinterpret_cast< RouteInfo* >(object);
  (void)_this;
}
void RouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInfo& RouteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteInfo_mhdr_2eproto.base);
  return *internal_default_instance();
}


void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mhdr.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && rid_ != nullptr) {
    delete rid_;
  }
  rid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.RID rid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string loc = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.RouteInfo.loc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mhdr.RouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.RID rid = 10;
  if (this->has_rid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rid(this), target, stream);
  }

  // string loc = 20;
  if (this->loc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loc().data(), static_cast<int>(this->_internal_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.RouteInfo.loc");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_loc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mhdr.RouteInfo)
  return target;
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mhdr.RouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loc = 20;
  if (this->loc().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loc());
  }

  // .mhdr.RID rid = 10;
  if (this->has_rid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mhdr.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mhdr.RouteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mhdr.RouteInfo)
    MergeFrom(*source);
  }
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mhdr.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loc().size() > 0) {
    _internal_set_loc(from._internal_loc());
  }
  if (from.has_rid()) {
    _internal_mutable_rid()->::mhdr::RID::MergeFrom(from._internal_rid());
  }
}

void RouteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mhdr.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mhdr.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loc_.Swap(&other->loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(rid_, other->rid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MsgHdr::InitAsDefaultInstance() {
  ::mhdr::_MsgHdr_default_instance_._instance.get_mutable()->torid_ = const_cast< ::mhdr::RID*>(
      ::mhdr::RID::internal_default_instance());
  ::mhdr::_MsgHdr_default_instance_._instance.get_mutable()->fromrid_ = const_cast< ::mhdr::RID*>(
      ::mhdr::RID::internal_default_instance());
  ::mhdr::_MsgHdr_default_instance_._instance.get_mutable()->toloc_ = const_cast< ::mhdr::Location*>(
      ::mhdr::Location::internal_default_instance());
  ::mhdr::_MsgHdr_default_instance_._instance.get_mutable()->fromloc_ = const_cast< ::mhdr::Location*>(
      ::mhdr::Location::internal_default_instance());
}
class MsgHdr::_Internal {
 public:
  static const ::mhdr::RID& torid(const MsgHdr* msg);
  static const ::mhdr::RID& fromrid(const MsgHdr* msg);
  static const ::mhdr::Location& toloc(const MsgHdr* msg);
  static const ::mhdr::Location& fromloc(const MsgHdr* msg);
};

const ::mhdr::RID&
MsgHdr::_Internal::torid(const MsgHdr* msg) {
  return *msg->torid_;
}
const ::mhdr::RID&
MsgHdr::_Internal::fromrid(const MsgHdr* msg) {
  return *msg->fromrid_;
}
const ::mhdr::Location&
MsgHdr::_Internal::toloc(const MsgHdr* msg) {
  return *msg->toloc_;
}
const ::mhdr::Location&
MsgHdr::_Internal::fromloc(const MsgHdr* msg) {
  return *msg->fromloc_;
}
MsgHdr::MsgHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alttolocs_(arena),
  routes_(arena),
  vias_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mhdr.MsgHdr)
}
MsgHdr::MsgHdr(const MsgHdr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alttolocs_(from.alttolocs_),
      routes_(from.routes_),
      vias_(from.vias_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  methodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_methodname().empty()) {
    methodname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_methodname(),
      GetArena());
  }
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sid().empty()) {
    sid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sid(),
      GetArena());
  }
  traceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_traceid().empty()) {
    traceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_traceid(),
      GetArena());
  }
  if (from._internal_has_torid()) {
    torid_ = new ::mhdr::RID(*from.torid_);
  } else {
    torid_ = nullptr;
  }
  if (from._internal_has_fromrid()) {
    fromrid_ = new ::mhdr::RID(*from.fromrid_);
  } else {
    fromrid_ = nullptr;
  }
  if (from._internal_has_toloc()) {
    toloc_ = new ::mhdr::Location(*from.toloc_);
  } else {
    toloc_ = nullptr;
  }
  if (from._internal_has_fromloc()) {
    fromloc_ = new ::mhdr::Location(*from.fromloc_);
  } else {
    fromloc_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&version_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:mhdr.MsgHdr)
}

void MsgHdr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MsgHdr_mhdr_2eproto.base);
  methodname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  traceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&torid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&torid_)) + sizeof(method_));
}

MsgHdr::~MsgHdr() {
  // @@protoc_insertion_point(destructor:mhdr.MsgHdr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgHdr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  methodname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  traceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete torid_;
  if (this != internal_default_instance()) delete fromrid_;
  if (this != internal_default_instance()) delete toloc_;
  if (this != internal_default_instance()) delete fromloc_;
}

void MsgHdr::ArenaDtor(void* object) {
  MsgHdr* _this = reinterpret_cast< MsgHdr* >(object);
  (void)_this;
}
void MsgHdr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgHdr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MsgHdr& MsgHdr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MsgHdr_mhdr_2eproto.base);
  return *internal_default_instance();
}


void MsgHdr::Clear() {
// @@protoc_insertion_point(message_clear_start:mhdr.MsgHdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alttolocs_.Clear();
  routes_.Clear();
  vias_.Clear();
  methodname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  traceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && torid_ != nullptr) {
    delete torid_;
  }
  torid_ = nullptr;
  if (GetArena() == nullptr && fromrid_ != nullptr) {
    delete fromrid_;
  }
  fromrid_ = nullptr;
  if (GetArena() == nullptr && toloc_ != nullptr) {
    delete toloc_;
  }
  toloc_ = nullptr;
  if (GetArena() == nullptr && fromloc_ != nullptr) {
    delete fromloc_;
  }
  fromloc_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&version_)) + sizeof(method_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgHdr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isReq = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          isreq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rspCode = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          rspcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 method = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string methodName = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_methodname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.MsgHdr.methodName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mhdr.RID toRID = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_torid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mhdr.RID fromRID = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromrid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mhdr.Location toLoc = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_toloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mhdr.Location altToLocs = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_alttolocs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<722>(ptr));
        } else goto handle_unusual;
        continue;
      // .mhdr.Location fromLoc = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fromloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 transID = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          transid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sid = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_sid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.MsgHdr.sid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string traceID = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_traceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mhdr.MsgHdr.traceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mhdr.RouteInfo routes = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mhdr.RouteInfo vias = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_vias(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1202>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgHdr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mhdr.MsgHdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 10;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_version(), target);
  }

  // bool isReq = 20;
  if (this->isreq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_isreq(), target);
  }

  // uint32 rspCode = 30;
  if (this->rspcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_rspcode(), target);
  }

  // int32 method = 40;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_method(), target);
  }

  // string methodName = 50;
  if (this->methodname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_methodname().data(), static_cast<int>(this->_internal_methodname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.MsgHdr.methodName");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_methodname(), target);
  }

  // .mhdr.RID toRID = 60;
  if (this->has_torid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        60, _Internal::torid(this), target, stream);
  }

  // .mhdr.RID fromRID = 70;
  if (this->has_fromrid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::fromrid(this), target, stream);
  }

  // .mhdr.Location toLoc = 80;
  if (this->has_toloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        80, _Internal::toloc(this), target, stream);
  }

  // repeated .mhdr.Location altToLocs = 90;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alttolocs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, this->_internal_alttolocs(i), target, stream);
  }

  // .mhdr.Location fromLoc = 100;
  if (this->has_fromloc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::fromloc(this), target, stream);
  }

  // uint32 transID = 110;
  if (this->transid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(110, this->_internal_transid(), target);
  }

  // string sid = 120;
  if (this->sid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sid().data(), static_cast<int>(this->_internal_sid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.MsgHdr.sid");
    target = stream->WriteStringMaybeAliased(
        120, this->_internal_sid(), target);
  }

  // string traceID = 130;
  if (this->traceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_traceid().data(), static_cast<int>(this->_internal_traceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mhdr.MsgHdr.traceID");
    target = stream->WriteStringMaybeAliased(
        130, this->_internal_traceid(), target);
  }

  // repeated .mhdr.RouteInfo routes = 140;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(140, this->_internal_routes(i), target, stream);
  }

  // repeated .mhdr.RouteInfo vias = 150;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vias_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(150, this->_internal_vias(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mhdr.MsgHdr)
  return target;
}

size_t MsgHdr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mhdr.MsgHdr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mhdr.Location altToLocs = 90;
  total_size += 2UL * this->_internal_alttolocs_size();
  for (const auto& msg : this->alttolocs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mhdr.RouteInfo routes = 140;
  total_size += 2UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mhdr.RouteInfo vias = 150;
  total_size += 2UL * this->_internal_vias_size();
  for (const auto& msg : this->vias_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string methodName = 50;
  if (this->methodname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_methodname());
  }

  // string sid = 120;
  if (this->sid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sid());
  }

  // string traceID = 130;
  if (this->traceid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_traceid());
  }

  // .mhdr.RID toRID = 60;
  if (this->has_torid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torid_);
  }

  // .mhdr.RID fromRID = 70;
  if (this->has_fromrid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fromrid_);
  }

  // .mhdr.Location toLoc = 80;
  if (this->has_toloc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *toloc_);
  }

  // .mhdr.Location fromLoc = 100;
  if (this->has_fromloc()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fromloc_);
  }

  // uint32 version = 10;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // bool isReq = 20;
  if (this->isreq() != 0) {
    total_size += 2 + 1;
  }

  // uint32 transID = 110;
  if (this->transid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_transid());
  }

  // uint32 rspCode = 30;
  if (this->rspcode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rspcode());
  }

  // int32 method = 40;
  if (this->method() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgHdr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mhdr.MsgHdr)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgHdr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgHdr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mhdr.MsgHdr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mhdr.MsgHdr)
    MergeFrom(*source);
  }
}

void MsgHdr::MergeFrom(const MsgHdr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mhdr.MsgHdr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alttolocs_.MergeFrom(from.alttolocs_);
  routes_.MergeFrom(from.routes_);
  vias_.MergeFrom(from.vias_);
  if (from.methodname().size() > 0) {
    _internal_set_methodname(from._internal_methodname());
  }
  if (from.sid().size() > 0) {
    _internal_set_sid(from._internal_sid());
  }
  if (from.traceid().size() > 0) {
    _internal_set_traceid(from._internal_traceid());
  }
  if (from.has_torid()) {
    _internal_mutable_torid()->::mhdr::RID::MergeFrom(from._internal_torid());
  }
  if (from.has_fromrid()) {
    _internal_mutable_fromrid()->::mhdr::RID::MergeFrom(from._internal_fromrid());
  }
  if (from.has_toloc()) {
    _internal_mutable_toloc()->::mhdr::Location::MergeFrom(from._internal_toloc());
  }
  if (from.has_fromloc()) {
    _internal_mutable_fromloc()->::mhdr::Location::MergeFrom(from._internal_fromloc());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.isreq() != 0) {
    _internal_set_isreq(from._internal_isreq());
  }
  if (from.transid() != 0) {
    _internal_set_transid(from._internal_transid());
  }
  if (from.rspcode() != 0) {
    _internal_set_rspcode(from._internal_rspcode());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
}

void MsgHdr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mhdr.MsgHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHdr::CopyFrom(const MsgHdr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mhdr.MsgHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHdr::IsInitialized() const {
  return true;
}

void MsgHdr::InternalSwap(MsgHdr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alttolocs_.InternalSwap(&other->alttolocs_);
  routes_.InternalSwap(&other->routes_);
  vias_.InternalSwap(&other->vias_);
  methodname_.Swap(&other->methodname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sid_.Swap(&other->sid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  traceid_.Swap(&other->traceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgHdr, method_)
      + sizeof(MsgHdr::method_)
      - PROTOBUF_FIELD_OFFSET(MsgHdr, torid_)>(
          reinterpret_cast<char*>(&torid_),
          reinterpret_cast<char*>(&other->torid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgHdr::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mhdr
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mhdr::RID* Arena::CreateMaybeMessage< ::mhdr::RID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mhdr::RID >(arena);
}
template<> PROTOBUF_NOINLINE ::mhdr::Location* Arena::CreateMaybeMessage< ::mhdr::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mhdr::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::mhdr::RouteInfo* Arena::CreateMaybeMessage< ::mhdr::RouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mhdr::RouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mhdr::MsgHdr* Arena::CreateMaybeMessage< ::mhdr::MsgHdr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mhdr::MsgHdr >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
