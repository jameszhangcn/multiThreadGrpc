// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_structure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_structure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_structure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_structure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structure_2eproto;
namespace structure {
class CpUpHdr;
class CpUpHdrDefaultTypeInternal;
extern CpUpHdrDefaultTypeInternal _CpUpHdr_default_instance_;
class CuCpID;
class CuCpIDDefaultTypeInternal;
extern CuCpIDDefaultTypeInternal _CuCpID_default_instance_;
class CuUpID;
class CuUpIDDefaultTypeInternal;
extern CuUpIDDefaultTypeInternal _CuUpID_default_instance_;
class GtpTunInfo;
class GtpTunInfoDefaultTypeInternal;
extern GtpTunInfoDefaultTypeInternal _GtpTunInfo_default_instance_;
class GtpTunnelId;
class GtpTunnelIdDefaultTypeInternal;
extern GtpTunnelIdDefaultTypeInternal _GtpTunnelId_default_instance_;
class HeaderCompressConfigure;
class HeaderCompressConfigureDefaultTypeInternal;
extern HeaderCompressConfigureDefaultTypeInternal _HeaderCompressConfigure_default_instance_;
class PDCPConfigure;
class PDCPConfigureDefaultTypeInternal;
extern PDCPConfigureDefaultTypeInternal _PDCPConfigure_default_instance_;
class Pst;
class PstDefaultTypeInternal;
extern PstDefaultTypeInternal _Pst_default_instance_;
class RlcInfo;
class RlcInfoDefaultTypeInternal;
extern RlcInfoDefaultTypeInternal _RlcInfo_default_instance_;
class SecurityConfigure;
class SecurityConfigureDefaultTypeInternal;
extern SecurityConfigureDefaultTypeInternal _SecurityConfigure_default_instance_;
class SuSpID;
class SuSpIDDefaultTypeInternal;
extern SuSpIDDefaultTypeInternal _SuSpID_default_instance_;
}  // namespace structure
PROTOBUF_NAMESPACE_OPEN
template<> ::structure::CpUpHdr* Arena::CreateMaybeMessage<::structure::CpUpHdr>(Arena*);
template<> ::structure::CuCpID* Arena::CreateMaybeMessage<::structure::CuCpID>(Arena*);
template<> ::structure::CuUpID* Arena::CreateMaybeMessage<::structure::CuUpID>(Arena*);
template<> ::structure::GtpTunInfo* Arena::CreateMaybeMessage<::structure::GtpTunInfo>(Arena*);
template<> ::structure::GtpTunnelId* Arena::CreateMaybeMessage<::structure::GtpTunnelId>(Arena*);
template<> ::structure::HeaderCompressConfigure* Arena::CreateMaybeMessage<::structure::HeaderCompressConfigure>(Arena*);
template<> ::structure::PDCPConfigure* Arena::CreateMaybeMessage<::structure::PDCPConfigure>(Arena*);
template<> ::structure::Pst* Arena::CreateMaybeMessage<::structure::Pst>(Arena*);
template<> ::structure::RlcInfo* Arena::CreateMaybeMessage<::structure::RlcInfo>(Arena*);
template<> ::structure::SecurityConfigure* Arena::CreateMaybeMessage<::structure::SecurityConfigure>(Arena*);
template<> ::structure::SuSpID* Arena::CreateMaybeMessage<::structure::SuSpID>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace structure {

enum TunnelType : int {
  DL = 0,
  UL = 1,
  Dl_DATA_FWD = 2,
  UL_DATA_FWD = 3,
  LIPA = 4,
  TunnelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TunnelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TunnelType_IsValid(int value);
constexpr TunnelType TunnelType_MIN = DL;
constexpr TunnelType TunnelType_MAX = LIPA;
constexpr int TunnelType_ARRAYSIZE = TunnelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelType_descriptor();
template<typename T>
inline const std::string& TunnelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TunnelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TunnelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TunnelType_descriptor(), enum_t_value);
}
inline bool TunnelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TunnelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TunnelType>(
    TunnelType_descriptor(), name, value);
}
enum InterfaceType : int {
  S1 = 0,
  V1 = 1,
  X2 = 2,
  InterfaceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InterfaceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InterfaceType_IsValid(int value);
constexpr InterfaceType InterfaceType_MIN = S1;
constexpr InterfaceType InterfaceType_MAX = X2;
constexpr int InterfaceType_ARRAYSIZE = InterfaceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor();
template<typename T>
inline const std::string& InterfaceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InterfaceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InterfaceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InterfaceType_descriptor(), enum_t_value);
}
inline bool InterfaceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InterfaceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InterfaceType>(
    InterfaceType_descriptor(), name, value);
}
enum HandoverType : int {
  NONE = 0,
  S1_BASED = 1,
  X2_BASED = 2,
  INTRA_BBU = 3,
  INTRA_DU_BBU = 4,
  INTER_DU_BBU = 5,
  HandoverType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HandoverType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HandoverType_IsValid(int value);
constexpr HandoverType HandoverType_MIN = NONE;
constexpr HandoverType HandoverType_MAX = INTER_DU_BBU;
constexpr int HandoverType_ARRAYSIZE = HandoverType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverType_descriptor();
template<typename T>
inline const std::string& HandoverType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HandoverType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HandoverType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HandoverType_descriptor(), enum_t_value);
}
inline bool HandoverType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HandoverType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HandoverType>(
    HandoverType_descriptor(), name, value);
}
// ===================================================================

class Pst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.Pst) */ {
 public:
  inline Pst() : Pst(nullptr) {}
  virtual ~Pst();

  Pst(const Pst& from);
  Pst(Pst&& from) noexcept
    : Pst() {
    *this = ::std::move(from);
  }

  inline Pst& operator=(const Pst& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pst& operator=(Pst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pst* internal_default_instance() {
    return reinterpret_cast<const Pst*>(
               &_Pst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pst& a, Pst& b) {
    a.Swap(&b);
  }
  inline void Swap(Pst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pst* New() const final {
    return CreateMaybeMessage<Pst>(nullptr);
  }

  Pst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pst& from);
  void MergeFrom(const Pst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.Pst";
  }
  protected:
  explicit Pst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDstProcIdFieldNumber = 10,
    kSrcProcIdFieldNumber = 11,
    kDstEntFieldNumber = 20,
    kDstInstFieldNumber = 21,
    kSrcEntFieldNumber = 30,
    kSrcInstFieldNumber = 31,
    kPriorFieldNumber = 40,
    kRouteFieldNumber = 45,
    kEventFieldNumber = 50,
    kRegionFieldNumber = 55,
    kPoolFieldNumber = 60,
    kSelectorFieldNumber = 65,
    kInterfaceVersionFieldNumber = 70,
    kCellIdFieldNumber = 75,
  };
  // uint32 dst_proc_id = 10;
  void clear_dst_proc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_proc_id() const;
  void set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_proc_id() const;
  void _internal_set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_proc_id = 11;
  void clear_src_proc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_proc_id() const;
  void set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_proc_id() const;
  void _internal_set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dst_ent = 20;
  void clear_dst_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_ent() const;
  void set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_ent() const;
  void _internal_set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 dst_inst = 21;
  void clear_dst_inst();
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_inst() const;
  void set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dst_inst() const;
  void _internal_set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_ent = 30;
  void clear_src_ent();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ent() const;
  void set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_ent() const;
  void _internal_set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 src_inst = 31;
  void clear_src_inst();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_inst() const;
  void set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_inst() const;
  void _internal_set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 prior = 40;
  void clear_prior();
  ::PROTOBUF_NAMESPACE_ID::uint32 prior() const;
  void set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prior() const;
  void _internal_set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 route = 45;
  void clear_route();
  ::PROTOBUF_NAMESPACE_ID::uint32 route() const;
  void set_route(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_route() const;
  void _internal_set_route(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 event = 50;
  void clear_event();
  ::PROTOBUF_NAMESPACE_ID::uint32 event() const;
  void set_event(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event() const;
  void _internal_set_event(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 region = 55;
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pool = 60;
  void clear_pool();
  ::PROTOBUF_NAMESPACE_ID::uint32 pool() const;
  void set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pool() const;
  void _internal_set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 selector = 65;
  void clear_selector();
  ::PROTOBUF_NAMESPACE_ID::uint32 selector() const;
  void set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selector() const;
  void _internal_set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 interface_version = 70;
  void clear_interface_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_version() const;
  void set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interface_version() const;
  void _internal_set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cell_id = 75;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.Pst)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_proc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_proc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dst_inst_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_ent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_inst_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prior_;
  ::PROTOBUF_NAMESPACE_ID::uint32 route_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pool_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interface_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CuCpID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CuCpID) */ {
 public:
  inline CuCpID() : CuCpID(nullptr) {}
  virtual ~CuCpID();

  CuCpID(const CuCpID& from);
  CuCpID(CuCpID&& from) noexcept
    : CuCpID() {
    *this = ::std::move(from);
  }

  inline CuCpID& operator=(const CuCpID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CuCpID& operator=(CuCpID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CuCpID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CuCpID* internal_default_instance() {
    return reinterpret_cast<const CuCpID*>(
               &_CuCpID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CuCpID& a, CuCpID& b) {
    a.Swap(&b);
  }
  inline void Swap(CuCpID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CuCpID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CuCpID* New() const final {
    return CreateMaybeMessage<CuCpID>(nullptr);
  }

  CuCpID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CuCpID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CuCpID& from);
  void MergeFrom(const CuCpID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CuCpID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CuCpID";
  }
  protected:
  explicit CuCpID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpIdFieldNumber = 10,
    kCellIdFieldNumber = 20,
    kUeIdFieldNumber = 30,
    kRbIdFieldNumber = 40,
  };
  // uint32 cp_id = 10;
  void clear_cp_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cp_id() const;
  void set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cp_id() const;
  void _internal_set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cell_id = 20;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ue_id = 30;
  void clear_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_id() const;
  void set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_id() const;
  void _internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rb_id = 40;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.CuCpID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cp_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CuUpID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CuUpID) */ {
 public:
  inline CuUpID() : CuUpID(nullptr) {}
  virtual ~CuUpID();

  CuUpID(const CuUpID& from);
  CuUpID(CuUpID&& from) noexcept
    : CuUpID() {
    *this = ::std::move(from);
  }

  inline CuUpID& operator=(const CuUpID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CuUpID& operator=(CuUpID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CuUpID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CuUpID* internal_default_instance() {
    return reinterpret_cast<const CuUpID*>(
               &_CuUpID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CuUpID& a, CuUpID& b) {
    a.Swap(&b);
  }
  inline void Swap(CuUpID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CuUpID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CuUpID* New() const final {
    return CreateMaybeMessage<CuUpID>(nullptr);
  }

  CuUpID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CuUpID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CuUpID& from);
  void MergeFrom(const CuUpID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CuUpID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CuUpID";
  }
  protected:
  explicit CuUpID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRbIdFieldNumber = 40,
    kUpIdFieldNumber = 10,
    kCellIdFieldNumber = 20,
    kUeIdFieldNumber = 30,
  };
  // uint32 rb_id = 40;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 up_id = 10;
  void clear_up_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 up_id() const;
  void set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_up_id() const;
  void _internal_set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cell_id = 20;
  void clear_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id() const;
  void set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_id() const;
  void _internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 ue_id = 30;
  void clear_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_id() const;
  void set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ue_id() const;
  void _internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.CuUpID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 up_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class SuSpID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.SuSpID) */ {
 public:
  inline SuSpID() : SuSpID(nullptr) {}
  virtual ~SuSpID();

  SuSpID(const SuSpID& from);
  SuSpID(SuSpID&& from) noexcept
    : SuSpID() {
    *this = ::std::move(from);
  }

  inline SuSpID& operator=(const SuSpID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuSpID& operator=(SuSpID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuSpID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuSpID* internal_default_instance() {
    return reinterpret_cast<const SuSpID*>(
               &_SuSpID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SuSpID& a, SuSpID& b) {
    a.Swap(&b);
  }
  inline void Swap(SuSpID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuSpID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuSpID* New() const final {
    return CreateMaybeMessage<SuSpID>(nullptr);
  }

  SuSpID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuSpID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuSpID& from);
  void MergeFrom(const SuSpID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuSpID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.SuSpID";
  }
  protected:
  explicit SuSpID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuIdFieldNumber = 10,
    kSpIdFieldNumber = 20,
  };
  // uint32 su_id = 10;
  void clear_su_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 su_id() const;
  void set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_su_id() const;
  void _internal_set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sp_id = 20;
  void clear_sp_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 sp_id() const;
  void set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sp_id() const;
  void _internal_set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.SuSpID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 su_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class CpUpHdr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.CpUpHdr) */ {
 public:
  inline CpUpHdr() : CpUpHdr(nullptr) {}
  virtual ~CpUpHdr();

  CpUpHdr(const CpUpHdr& from);
  CpUpHdr(CpUpHdr&& from) noexcept
    : CpUpHdr() {
    *this = ::std::move(from);
  }

  inline CpUpHdr& operator=(const CpUpHdr& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpUpHdr& operator=(CpUpHdr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CpUpHdr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CpUpHdr* internal_default_instance() {
    return reinterpret_cast<const CpUpHdr*>(
               &_CpUpHdr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CpUpHdr& a, CpUpHdr& b) {
    a.Swap(&b);
  }
  inline void Swap(CpUpHdr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpUpHdr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CpUpHdr* New() const final {
    return CreateMaybeMessage<CpUpHdr>(nullptr);
  }

  CpUpHdr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CpUpHdr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CpUpHdr& from);
  void MergeFrom(const CpUpHdr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CpUpHdr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.CpUpHdr";
  }
  protected:
  explicit CpUpHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPstFieldNumber = 10,
    kCuCpIdFieldNumber = 20,
    kCuUpIdFieldNumber = 30,
    kSuSpIdFieldNumber = 40,
  };
  // .structure.Pst pst = 10;
  bool has_pst() const;
  private:
  bool _internal_has_pst() const;
  public:
  void clear_pst();
  const ::structure::Pst& pst() const;
  ::structure::Pst* release_pst();
  ::structure::Pst* mutable_pst();
  void set_allocated_pst(::structure::Pst* pst);
  private:
  const ::structure::Pst& _internal_pst() const;
  ::structure::Pst* _internal_mutable_pst();
  public:
  void unsafe_arena_set_allocated_pst(
      ::structure::Pst* pst);
  ::structure::Pst* unsafe_arena_release_pst();

  // .structure.CuCpID cu_cp_id = 20;
  bool has_cu_cp_id() const;
  private:
  bool _internal_has_cu_cp_id() const;
  public:
  void clear_cu_cp_id();
  const ::structure::CuCpID& cu_cp_id() const;
  ::structure::CuCpID* release_cu_cp_id();
  ::structure::CuCpID* mutable_cu_cp_id();
  void set_allocated_cu_cp_id(::structure::CuCpID* cu_cp_id);
  private:
  const ::structure::CuCpID& _internal_cu_cp_id() const;
  ::structure::CuCpID* _internal_mutable_cu_cp_id();
  public:
  void unsafe_arena_set_allocated_cu_cp_id(
      ::structure::CuCpID* cu_cp_id);
  ::structure::CuCpID* unsafe_arena_release_cu_cp_id();

  // .structure.CuUpID cu_up_id = 30;
  bool has_cu_up_id() const;
  private:
  bool _internal_has_cu_up_id() const;
  public:
  void clear_cu_up_id();
  const ::structure::CuUpID& cu_up_id() const;
  ::structure::CuUpID* release_cu_up_id();
  ::structure::CuUpID* mutable_cu_up_id();
  void set_allocated_cu_up_id(::structure::CuUpID* cu_up_id);
  private:
  const ::structure::CuUpID& _internal_cu_up_id() const;
  ::structure::CuUpID* _internal_mutable_cu_up_id();
  public:
  void unsafe_arena_set_allocated_cu_up_id(
      ::structure::CuUpID* cu_up_id);
  ::structure::CuUpID* unsafe_arena_release_cu_up_id();

  // .structure.SuSpID su_sp_id = 40;
  bool has_su_sp_id() const;
  private:
  bool _internal_has_su_sp_id() const;
  public:
  void clear_su_sp_id();
  const ::structure::SuSpID& su_sp_id() const;
  ::structure::SuSpID* release_su_sp_id();
  ::structure::SuSpID* mutable_su_sp_id();
  void set_allocated_su_sp_id(::structure::SuSpID* su_sp_id);
  private:
  const ::structure::SuSpID& _internal_su_sp_id() const;
  ::structure::SuSpID* _internal_mutable_su_sp_id();
  public:
  void unsafe_arena_set_allocated_su_sp_id(
      ::structure::SuSpID* su_sp_id);
  ::structure::SuSpID* unsafe_arena_release_su_sp_id();

  // @@protoc_insertion_point(class_scope:structure.CpUpHdr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::Pst* pst_;
  ::structure::CuCpID* cu_cp_id_;
  ::structure::CuUpID* cu_up_id_;
  ::structure::SuSpID* su_sp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class SecurityConfigure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.SecurityConfigure) */ {
 public:
  inline SecurityConfigure() : SecurityConfigure(nullptr) {}
  virtual ~SecurityConfigure();

  SecurityConfigure(const SecurityConfigure& from);
  SecurityConfigure(SecurityConfigure&& from) noexcept
    : SecurityConfigure() {
    *this = ::std::move(from);
  }

  inline SecurityConfigure& operator=(const SecurityConfigure& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityConfigure& operator=(SecurityConfigure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityConfigure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityConfigure* internal_default_instance() {
    return reinterpret_cast<const SecurityConfigure*>(
               &_SecurityConfigure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SecurityConfigure& a, SecurityConfigure& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityConfigure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityConfigure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityConfigure* New() const final {
    return CreateMaybeMessage<SecurityConfigure>(nullptr);
  }

  SecurityConfigure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityConfigure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityConfigure& from);
  void MergeFrom(const SecurityConfigure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityConfigure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.SecurityConfigure";
  }
  protected:
  explicit SecurityConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 20,
    kAlgorithmTypeFieldNumber = 10,
  };
  // repeated uint32 encryption_key = 20;
  int encryption_key_size() const;
  private:
  int _internal_encryption_key_size() const;
  public:
  void clear_encryption_key();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_encryption_key(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_encryption_key() const;
  void _internal_add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_encryption_key();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 encryption_key(int index) const;
  void set_encryption_key(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      encryption_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_encryption_key();

  // uint32 algorithm_type = 10;
  void clear_algorithm_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 algorithm_type() const;
  void set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_algorithm_type() const;
  void _internal_set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.SecurityConfigure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > encryption_key_;
  mutable std::atomic<int> _encryption_key_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 algorithm_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class GtpTunnelId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.GtpTunnelId) */ {
 public:
  inline GtpTunnelId() : GtpTunnelId(nullptr) {}
  virtual ~GtpTunnelId();

  GtpTunnelId(const GtpTunnelId& from);
  GtpTunnelId(GtpTunnelId&& from) noexcept
    : GtpTunnelId() {
    *this = ::std::move(from);
  }

  inline GtpTunnelId& operator=(const GtpTunnelId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtpTunnelId& operator=(GtpTunnelId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtpTunnelId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtpTunnelId* internal_default_instance() {
    return reinterpret_cast<const GtpTunnelId*>(
               &_GtpTunnelId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GtpTunnelId& a, GtpTunnelId& b) {
    a.Swap(&b);
  }
  inline void Swap(GtpTunnelId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GtpTunnelId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtpTunnelId* New() const final {
    return CreateMaybeMessage<GtpTunnelId>(nullptr);
  }

  GtpTunnelId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtpTunnelId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtpTunnelId& from);
  void MergeFrom(const GtpTunnelId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtpTunnelId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.GtpTunnelId";
  }
  protected:
  explicit GtpTunnelId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeIdFieldNumber = 10,
    kRbIdFieldNumber = 20,
    kTnlTypeFieldNumber = 30,
    kTnlPriorityFieldNumber = 40,
  };
  // uint32 ue_id = 10;
  void clear_ue_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_id() const;
  void set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_id() const;
  void _internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rb_id = 20;
  void clear_rb_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id() const;
  void set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_id() const;
  void _internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.TunnelType tnl_type = 30;
  void clear_tnl_type();
  ::structure::TunnelType tnl_type() const;
  void set_tnl_type(::structure::TunnelType value);
  private:
  ::structure::TunnelType _internal_tnl_type() const;
  void _internal_set_tnl_type(::structure::TunnelType value);
  public:

  // uint32 tnl_priority = 40;
  void clear_tnl_priority();
  ::PROTOBUF_NAMESPACE_ID::uint32 tnl_priority() const;
  void set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tnl_priority() const;
  void _internal_set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.GtpTunnelId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_id_;
  int tnl_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tnl_priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class GtpTunInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.GtpTunInfo) */ {
 public:
  inline GtpTunInfo() : GtpTunInfo(nullptr) {}
  virtual ~GtpTunInfo();

  GtpTunInfo(const GtpTunInfo& from);
  GtpTunInfo(GtpTunInfo&& from) noexcept
    : GtpTunInfo() {
    *this = ::std::move(from);
  }

  inline GtpTunInfo& operator=(const GtpTunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtpTunInfo& operator=(GtpTunInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtpTunInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtpTunInfo* internal_default_instance() {
    return reinterpret_cast<const GtpTunInfo*>(
               &_GtpTunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GtpTunInfo& a, GtpTunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GtpTunInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GtpTunInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtpTunInfo* New() const final {
    return CreateMaybeMessage<GtpTunInfo>(nullptr);
  }

  GtpTunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtpTunInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtpTunInfo& from);
  void MergeFrom(const GtpTunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtpTunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.GtpTunInfo";
  }
  protected:
  explicit GtpTunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTnlIdFieldNumber = 10,
    kDstAddrFieldNumber = 30,
    kSrcAddrFieldNumber = 31,
    kRlcModeFieldNumber = 61,
    kInterfaceTypeFieldNumber = 20,
    kRemTeidFieldNumber = 40,
    kHoTypeFieldNumber = 51,
    kHoSrcEnodebFieldNumber = 50,
    kIdFullCfgFieldNumber = 60,
  };
  // .structure.GtpTunnelId tnl_id = 10;
  bool has_tnl_id() const;
  private:
  bool _internal_has_tnl_id() const;
  public:
  void clear_tnl_id();
  const ::structure::GtpTunnelId& tnl_id() const;
  ::structure::GtpTunnelId* release_tnl_id();
  ::structure::GtpTunnelId* mutable_tnl_id();
  void set_allocated_tnl_id(::structure::GtpTunnelId* tnl_id);
  private:
  const ::structure::GtpTunnelId& _internal_tnl_id() const;
  ::structure::GtpTunnelId* _internal_mutable_tnl_id();
  public:
  void unsafe_arena_set_allocated_tnl_id(
      ::structure::GtpTunnelId* tnl_id);
  ::structure::GtpTunnelId* unsafe_arena_release_tnl_id();

  // .common.IpAddress dst_addr = 30;
  bool has_dst_addr() const;
  private:
  bool _internal_has_dst_addr() const;
  public:
  void clear_dst_addr();
  const ::common::IpAddress& dst_addr() const;
  ::common::IpAddress* release_dst_addr();
  ::common::IpAddress* mutable_dst_addr();
  void set_allocated_dst_addr(::common::IpAddress* dst_addr);
  private:
  const ::common::IpAddress& _internal_dst_addr() const;
  ::common::IpAddress* _internal_mutable_dst_addr();
  public:
  void unsafe_arena_set_allocated_dst_addr(
      ::common::IpAddress* dst_addr);
  ::common::IpAddress* unsafe_arena_release_dst_addr();

  // .common.IpAddress src_addr = 31;
  bool has_src_addr() const;
  private:
  bool _internal_has_src_addr() const;
  public:
  void clear_src_addr();
  const ::common::IpAddress& src_addr() const;
  ::common::IpAddress* release_src_addr();
  ::common::IpAddress* mutable_src_addr();
  void set_allocated_src_addr(::common::IpAddress* src_addr);
  private:
  const ::common::IpAddress& _internal_src_addr() const;
  ::common::IpAddress* _internal_mutable_src_addr();
  public:
  void unsafe_arena_set_allocated_src_addr(
      ::common::IpAddress* src_addr);
  ::common::IpAddress* unsafe_arena_release_src_addr();

  // uint32 rlc_mode = 61;
  void clear_rlc_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_mode() const;
  void set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rlc_mode() const;
  void _internal_set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.InterfaceType interface_type = 20;
  void clear_interface_type();
  ::structure::InterfaceType interface_type() const;
  void set_interface_type(::structure::InterfaceType value);
  private:
  ::structure::InterfaceType _internal_interface_type() const;
  void _internal_set_interface_type(::structure::InterfaceType value);
  public:

  // uint32 rem_teid = 40;
  void clear_rem_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 rem_teid() const;
  void set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rem_teid() const;
  void _internal_set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .structure.HandoverType ho_type = 51;
  void clear_ho_type();
  ::structure::HandoverType ho_type() const;
  void set_ho_type(::structure::HandoverType value);
  private:
  ::structure::HandoverType _internal_ho_type() const;
  void _internal_set_ho_type(::structure::HandoverType value);
  public:

  // bool ho_src_enodeb = 50;
  void clear_ho_src_enodeb();
  bool ho_src_enodeb() const;
  void set_ho_src_enodeb(bool value);
  private:
  bool _internal_ho_src_enodeb() const;
  void _internal_set_ho_src_enodeb(bool value);
  public:

  // bool id_fullCfg = 60;
  void clear_id_fullcfg();
  bool id_fullcfg() const;
  void set_id_fullcfg(bool value);
  private:
  bool _internal_id_fullcfg() const;
  void _internal_set_id_fullcfg(bool value);
  public:

  // @@protoc_insertion_point(class_scope:structure.GtpTunInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::GtpTunnelId* tnl_id_;
  ::common::IpAddress* dst_addr_;
  ::common::IpAddress* src_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rlc_mode_;
  int interface_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rem_teid_;
  int ho_type_;
  bool ho_src_enodeb_;
  bool id_fullcfg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class RlcInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.RlcInfo) */ {
 public:
  inline RlcInfo() : RlcInfo(nullptr) {}
  virtual ~RlcInfo();

  RlcInfo(const RlcInfo& from);
  RlcInfo(RlcInfo&& from) noexcept
    : RlcInfo() {
    *this = ::std::move(from);
  }

  inline RlcInfo& operator=(const RlcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RlcInfo& operator=(RlcInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RlcInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RlcInfo* internal_default_instance() {
    return reinterpret_cast<const RlcInfo*>(
               &_RlcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RlcInfo& a, RlcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RlcInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RlcInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RlcInfo* New() const final {
    return CreateMaybeMessage<RlcInfo>(nullptr);
  }

  RlcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RlcInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RlcInfo& from);
  void MergeFrom(const RlcInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RlcInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.RlcInfo";
  }
  protected:
  explicit RlcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 10,
    kModeFieldNumber = 20,
    kStatusRepRequireFieldNumber = 30,
    kPdcpSnSizeFieldNumber = 40,
  };
  // uint32 direction = 10;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 mode = 20;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool status_rep_require = 30;
  void clear_status_rep_require();
  bool status_rep_require() const;
  void set_status_rep_require(bool value);
  private:
  bool _internal_status_rep_require() const;
  void _internal_set_status_rep_require(bool value);
  public:

  // uint32 pdcp_sn_size = 40;
  void clear_pdcp_sn_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcp_sn_size() const;
  void set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcp_sn_size() const;
  void _internal_set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.RlcInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  bool status_rep_require_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcp_sn_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class HeaderCompressConfigure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.HeaderCompressConfigure) */ {
 public:
  inline HeaderCompressConfigure() : HeaderCompressConfigure(nullptr) {}
  virtual ~HeaderCompressConfigure();

  HeaderCompressConfigure(const HeaderCompressConfigure& from);
  HeaderCompressConfigure(HeaderCompressConfigure&& from) noexcept
    : HeaderCompressConfigure() {
    *this = ::std::move(from);
  }

  inline HeaderCompressConfigure& operator=(const HeaderCompressConfigure& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderCompressConfigure& operator=(HeaderCompressConfigure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeaderCompressConfigure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeaderCompressConfigure* internal_default_instance() {
    return reinterpret_cast<const HeaderCompressConfigure*>(
               &_HeaderCompressConfigure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HeaderCompressConfigure& a, HeaderCompressConfigure& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderCompressConfigure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderCompressConfigure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeaderCompressConfigure* New() const final {
    return CreateMaybeMessage<HeaderCompressConfigure>(nullptr);
  }

  HeaderCompressConfigure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeaderCompressConfigure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeaderCompressConfigure& from);
  void MergeFrom(const HeaderCompressConfigure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderCompressConfigure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.HeaderCompressConfigure";
  }
  protected:
  explicit HeaderCompressConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileListFieldNumber = 30,
    kHdrCompUsedFieldNumber = 10,
    kMaxCidFieldNumber = 20,
  };
  // repeated uint32 profile_list = 30;
  int profile_list_size() const;
  private:
  int _internal_profile_list_size() const;
  public:
  void clear_profile_list();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_profile_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_profile_list() const;
  void _internal_add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_profile_list();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 profile_list(int index) const;
  void set_profile_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      profile_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_profile_list();

  // bool hdr_comp_used = 10;
  void clear_hdr_comp_used();
  bool hdr_comp_used() const;
  void set_hdr_comp_used(bool value);
  private:
  bool _internal_hdr_comp_used() const;
  void _internal_set_hdr_comp_used(bool value);
  public:

  // uint32 max_cid = 20;
  void clear_max_cid();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cid() const;
  void set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_cid() const;
  void _internal_set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.HeaderCompressConfigure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > profile_list_;
  mutable std::atomic<int> _profile_list_cached_byte_size_;
  bool hdr_comp_used_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_cid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// -------------------------------------------------------------------

class PDCPConfigure PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:structure.PDCPConfigure) */ {
 public:
  inline PDCPConfigure() : PDCPConfigure(nullptr) {}
  virtual ~PDCPConfigure();

  PDCPConfigure(const PDCPConfigure& from);
  PDCPConfigure(PDCPConfigure&& from) noexcept
    : PDCPConfigure() {
    *this = ::std::move(from);
  }

  inline PDCPConfigure& operator=(const PDCPConfigure& from) {
    CopyFrom(from);
    return *this;
  }
  inline PDCPConfigure& operator=(PDCPConfigure&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PDCPConfigure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PDCPConfigure* internal_default_instance() {
    return reinterpret_cast<const PDCPConfigure*>(
               &_PDCPConfigure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PDCPConfigure& a, PDCPConfigure& b) {
    a.Swap(&b);
  }
  inline void Swap(PDCPConfigure* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PDCPConfigure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PDCPConfigure* New() const final {
    return CreateMaybeMessage<PDCPConfigure>(nullptr);
  }

  PDCPConfigure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PDCPConfigure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PDCPConfigure& from);
  void MergeFrom(const PDCPConfigure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PDCPConfigure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "structure.PDCPConfigure";
  }
  protected:
  explicit PDCPConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_structure_2eproto);
    return ::descriptor_table_structure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlcInfoFieldNumber = 40,
    kHdrCmpCfgFieldNumber = 50,
    kDiscardTimerFieldNumber = 30,
    kSnLenFieldNumber = 10,
    kQciFieldNumber = 20,
  };
  // .structure.RlcInfo rlc_info = 40;
  bool has_rlc_info() const;
  private:
  bool _internal_has_rlc_info() const;
  public:
  void clear_rlc_info();
  const ::structure::RlcInfo& rlc_info() const;
  ::structure::RlcInfo* release_rlc_info();
  ::structure::RlcInfo* mutable_rlc_info();
  void set_allocated_rlc_info(::structure::RlcInfo* rlc_info);
  private:
  const ::structure::RlcInfo& _internal_rlc_info() const;
  ::structure::RlcInfo* _internal_mutable_rlc_info();
  public:
  void unsafe_arena_set_allocated_rlc_info(
      ::structure::RlcInfo* rlc_info);
  ::structure::RlcInfo* unsafe_arena_release_rlc_info();

  // .structure.HeaderCompressConfigure hdr_cmp_cfg = 50;
  bool has_hdr_cmp_cfg() const;
  private:
  bool _internal_has_hdr_cmp_cfg() const;
  public:
  void clear_hdr_cmp_cfg();
  const ::structure::HeaderCompressConfigure& hdr_cmp_cfg() const;
  ::structure::HeaderCompressConfigure* release_hdr_cmp_cfg();
  ::structure::HeaderCompressConfigure* mutable_hdr_cmp_cfg();
  void set_allocated_hdr_cmp_cfg(::structure::HeaderCompressConfigure* hdr_cmp_cfg);
  private:
  const ::structure::HeaderCompressConfigure& _internal_hdr_cmp_cfg() const;
  ::structure::HeaderCompressConfigure* _internal_mutable_hdr_cmp_cfg();
  public:
  void unsafe_arena_set_allocated_hdr_cmp_cfg(
      ::structure::HeaderCompressConfigure* hdr_cmp_cfg);
  ::structure::HeaderCompressConfigure* unsafe_arena_release_hdr_cmp_cfg();

  // uint32 discard_timer = 30;
  void clear_discard_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 discard_timer() const;
  void set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_discard_timer() const;
  void _internal_set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sn_len = 10;
  void clear_sn_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_len() const;
  void set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sn_len() const;
  void _internal_set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 qci = 20;
  void clear_qci();
  ::PROTOBUF_NAMESPACE_ID::uint32 qci() const;
  void set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qci() const;
  void _internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:structure.PDCPConfigure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::structure::RlcInfo* rlc_info_;
  ::structure::HeaderCompressConfigure* hdr_cmp_cfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 discard_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sn_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qci_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_structure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pst

// uint32 dst_proc_id = 10;
inline void Pst::clear_dst_proc_id() {
  dst_proc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_dst_proc_id() const {
  return dst_proc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::dst_proc_id() const {
  // @@protoc_insertion_point(field_get:structure.Pst.dst_proc_id)
  return _internal_dst_proc_id();
}
inline void Pst::_internal_set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_proc_id_ = value;
}
inline void Pst::set_dst_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_proc_id(value);
  // @@protoc_insertion_point(field_set:structure.Pst.dst_proc_id)
}

// uint32 src_proc_id = 11;
inline void Pst::clear_src_proc_id() {
  src_proc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_src_proc_id() const {
  return src_proc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::src_proc_id() const {
  // @@protoc_insertion_point(field_get:structure.Pst.src_proc_id)
  return _internal_src_proc_id();
}
inline void Pst::_internal_set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_proc_id_ = value;
}
inline void Pst::set_src_proc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_proc_id(value);
  // @@protoc_insertion_point(field_set:structure.Pst.src_proc_id)
}

// uint32 dst_ent = 20;
inline void Pst::clear_dst_ent() {
  dst_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_dst_ent() const {
  return dst_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::dst_ent() const {
  // @@protoc_insertion_point(field_get:structure.Pst.dst_ent)
  return _internal_dst_ent();
}
inline void Pst::_internal_set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_ent_ = value;
}
inline void Pst::set_dst_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_ent(value);
  // @@protoc_insertion_point(field_set:structure.Pst.dst_ent)
}

// uint32 dst_inst = 21;
inline void Pst::clear_dst_inst() {
  dst_inst_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_dst_inst() const {
  return dst_inst_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::dst_inst() const {
  // @@protoc_insertion_point(field_get:structure.Pst.dst_inst)
  return _internal_dst_inst();
}
inline void Pst::_internal_set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dst_inst_ = value;
}
inline void Pst::set_dst_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dst_inst(value);
  // @@protoc_insertion_point(field_set:structure.Pst.dst_inst)
}

// uint32 src_ent = 30;
inline void Pst::clear_src_ent() {
  src_ent_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_src_ent() const {
  return src_ent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::src_ent() const {
  // @@protoc_insertion_point(field_get:structure.Pst.src_ent)
  return _internal_src_ent();
}
inline void Pst::_internal_set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_ent_ = value;
}
inline void Pst::set_src_ent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_ent(value);
  // @@protoc_insertion_point(field_set:structure.Pst.src_ent)
}

// uint32 src_inst = 31;
inline void Pst::clear_src_inst() {
  src_inst_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_src_inst() const {
  return src_inst_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::src_inst() const {
  // @@protoc_insertion_point(field_get:structure.Pst.src_inst)
  return _internal_src_inst();
}
inline void Pst::_internal_set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  src_inst_ = value;
}
inline void Pst::set_src_inst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_inst(value);
  // @@protoc_insertion_point(field_set:structure.Pst.src_inst)
}

// uint32 prior = 40;
inline void Pst::clear_prior() {
  prior_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_prior() const {
  return prior_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::prior() const {
  // @@protoc_insertion_point(field_get:structure.Pst.prior)
  return _internal_prior();
}
inline void Pst::_internal_set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prior_ = value;
}
inline void Pst::set_prior(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prior(value);
  // @@protoc_insertion_point(field_set:structure.Pst.prior)
}

// uint32 route = 45;
inline void Pst::clear_route() {
  route_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_route() const {
  return route_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::route() const {
  // @@protoc_insertion_point(field_get:structure.Pst.route)
  return _internal_route();
}
inline void Pst::_internal_set_route(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  route_ = value;
}
inline void Pst::set_route(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_route(value);
  // @@protoc_insertion_point(field_set:structure.Pst.route)
}

// uint32 event = 50;
inline void Pst::clear_event() {
  event_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_event() const {
  return event_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::event() const {
  // @@protoc_insertion_point(field_get:structure.Pst.event)
  return _internal_event();
}
inline void Pst::_internal_set_event(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_ = value;
}
inline void Pst::set_event(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:structure.Pst.event)
}

// uint32 region = 55;
inline void Pst::clear_region() {
  region_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::region() const {
  // @@protoc_insertion_point(field_get:structure.Pst.region)
  return _internal_region();
}
inline void Pst::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  region_ = value;
}
inline void Pst::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:structure.Pst.region)
}

// uint32 pool = 60;
inline void Pst::clear_pool() {
  pool_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_pool() const {
  return pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::pool() const {
  // @@protoc_insertion_point(field_get:structure.Pst.pool)
  return _internal_pool();
}
inline void Pst::_internal_set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pool_ = value;
}
inline void Pst::set_pool(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:structure.Pst.pool)
}

// uint32 selector = 65;
inline void Pst::clear_selector() {
  selector_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_selector() const {
  return selector_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::selector() const {
  // @@protoc_insertion_point(field_get:structure.Pst.selector)
  return _internal_selector();
}
inline void Pst::_internal_set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  selector_ = value;
}
inline void Pst::set_selector(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selector(value);
  // @@protoc_insertion_point(field_set:structure.Pst.selector)
}

// uint32 interface_version = 70;
inline void Pst::clear_interface_version() {
  interface_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_interface_version() const {
  return interface_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::interface_version() const {
  // @@protoc_insertion_point(field_get:structure.Pst.interface_version)
  return _internal_interface_version();
}
inline void Pst::_internal_set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interface_version_ = value;
}
inline void Pst::set_interface_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interface_version(value);
  // @@protoc_insertion_point(field_set:structure.Pst.interface_version)
}

// uint32 cell_id = 75;
inline void Pst::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pst::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.Pst.cell_id)
  return _internal_cell_id();
}
inline void Pst::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void Pst::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.Pst.cell_id)
}

// -------------------------------------------------------------------

// CuCpID

// uint32 cp_id = 10;
inline void CuCpID::clear_cp_id() {
  cp_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_cp_id() const {
  return cp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::cp_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.cp_id)
  return _internal_cp_id();
}
inline void CuCpID::_internal_set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cp_id_ = value;
}
inline void CuCpID::set_cp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cp_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.cp_id)
}

// uint32 cell_id = 20;
inline void CuCpID::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.cell_id)
  return _internal_cell_id();
}
inline void CuCpID::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void CuCpID::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.cell_id)
}

// uint32 ue_id = 30;
inline void CuCpID::clear_ue_id() {
  ue_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_ue_id() const {
  return ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::ue_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.ue_id)
  return _internal_ue_id();
}
inline void CuCpID::_internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ue_id_ = value;
}
inline void CuCpID::set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.ue_id)
}

// uint32 rb_id = 40;
inline void CuCpID::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuCpID::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.CuCpID.rb_id)
  return _internal_rb_id();
}
inline void CuCpID::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void CuCpID::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.CuCpID.rb_id)
}

// -------------------------------------------------------------------

// CuUpID

// uint32 up_id = 10;
inline void CuUpID::clear_up_id() {
  up_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::_internal_up_id() const {
  return up_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::up_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.up_id)
  return _internal_up_id();
}
inline void CuUpID::_internal_set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  up_id_ = value;
}
inline void CuUpID::set_up_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_up_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.up_id)
}

// uint32 cell_id = 20;
inline void CuUpID::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::_internal_cell_id() const {
  return cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::cell_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.cell_id)
  return _internal_cell_id();
}
inline void CuUpID::_internal_set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cell_id_ = value;
}
inline void CuUpID::set_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.cell_id)
}

// uint64 ue_id = 30;
inline void CuUpID::clear_ue_id() {
  ue_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CuUpID::_internal_ue_id() const {
  return ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CuUpID::ue_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.ue_id)
  return _internal_ue_id();
}
inline void CuUpID::_internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ue_id_ = value;
}
inline void CuUpID::set_ue_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ue_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.ue_id)
}

// uint32 rb_id = 40;
inline void CuUpID::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CuUpID::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.CuUpID.rb_id)
  return _internal_rb_id();
}
inline void CuUpID::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void CuUpID::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.CuUpID.rb_id)
}

// -------------------------------------------------------------------

// SuSpID

// uint32 su_id = 10;
inline void SuSpID::clear_su_id() {
  su_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::_internal_su_id() const {
  return su_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::su_id() const {
  // @@protoc_insertion_point(field_get:structure.SuSpID.su_id)
  return _internal_su_id();
}
inline void SuSpID::_internal_set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  su_id_ = value;
}
inline void SuSpID::set_su_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_su_id(value);
  // @@protoc_insertion_point(field_set:structure.SuSpID.su_id)
}

// uint32 sp_id = 20;
inline void SuSpID::clear_sp_id() {
  sp_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::_internal_sp_id() const {
  return sp_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SuSpID::sp_id() const {
  // @@protoc_insertion_point(field_get:structure.SuSpID.sp_id)
  return _internal_sp_id();
}
inline void SuSpID::_internal_set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sp_id_ = value;
}
inline void SuSpID::set_sp_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sp_id(value);
  // @@protoc_insertion_point(field_set:structure.SuSpID.sp_id)
}

// -------------------------------------------------------------------

// CpUpHdr

// .structure.Pst pst = 10;
inline bool CpUpHdr::_internal_has_pst() const {
  return this != internal_default_instance() && pst_ != nullptr;
}
inline bool CpUpHdr::has_pst() const {
  return _internal_has_pst();
}
inline void CpUpHdr::clear_pst() {
  if (GetArena() == nullptr && pst_ != nullptr) {
    delete pst_;
  }
  pst_ = nullptr;
}
inline const ::structure::Pst& CpUpHdr::_internal_pst() const {
  const ::structure::Pst* p = pst_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::Pst*>(
      &::structure::_Pst_default_instance_);
}
inline const ::structure::Pst& CpUpHdr::pst() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.pst)
  return _internal_pst();
}
inline void CpUpHdr::unsafe_arena_set_allocated_pst(
    ::structure::Pst* pst) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pst_);
  }
  pst_ = pst;
  if (pst) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.pst)
}
inline ::structure::Pst* CpUpHdr::release_pst() {
  
  ::structure::Pst* temp = pst_;
  pst_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::Pst* CpUpHdr::unsafe_arena_release_pst() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.pst)
  
  ::structure::Pst* temp = pst_;
  pst_ = nullptr;
  return temp;
}
inline ::structure::Pst* CpUpHdr::_internal_mutable_pst() {
  
  if (pst_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::Pst>(GetArena());
    pst_ = p;
  }
  return pst_;
}
inline ::structure::Pst* CpUpHdr::mutable_pst() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.pst)
  return _internal_mutable_pst();
}
inline void CpUpHdr::set_allocated_pst(::structure::Pst* pst) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pst_;
  }
  if (pst) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pst);
    if (message_arena != submessage_arena) {
      pst = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pst, submessage_arena);
    }
    
  } else {
    
  }
  pst_ = pst;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.pst)
}

// .structure.CuCpID cu_cp_id = 20;
inline bool CpUpHdr::_internal_has_cu_cp_id() const {
  return this != internal_default_instance() && cu_cp_id_ != nullptr;
}
inline bool CpUpHdr::has_cu_cp_id() const {
  return _internal_has_cu_cp_id();
}
inline void CpUpHdr::clear_cu_cp_id() {
  if (GetArena() == nullptr && cu_cp_id_ != nullptr) {
    delete cu_cp_id_;
  }
  cu_cp_id_ = nullptr;
}
inline const ::structure::CuCpID& CpUpHdr::_internal_cu_cp_id() const {
  const ::structure::CuCpID* p = cu_cp_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CuCpID*>(
      &::structure::_CuCpID_default_instance_);
}
inline const ::structure::CuCpID& CpUpHdr::cu_cp_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.cu_cp_id)
  return _internal_cu_cp_id();
}
inline void CpUpHdr::unsafe_arena_set_allocated_cu_cp_id(
    ::structure::CuCpID* cu_cp_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cu_cp_id_);
  }
  cu_cp_id_ = cu_cp_id;
  if (cu_cp_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.cu_cp_id)
}
inline ::structure::CuCpID* CpUpHdr::release_cu_cp_id() {
  
  ::structure::CuCpID* temp = cu_cp_id_;
  cu_cp_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CuCpID* CpUpHdr::unsafe_arena_release_cu_cp_id() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.cu_cp_id)
  
  ::structure::CuCpID* temp = cu_cp_id_;
  cu_cp_id_ = nullptr;
  return temp;
}
inline ::structure::CuCpID* CpUpHdr::_internal_mutable_cu_cp_id() {
  
  if (cu_cp_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CuCpID>(GetArena());
    cu_cp_id_ = p;
  }
  return cu_cp_id_;
}
inline ::structure::CuCpID* CpUpHdr::mutable_cu_cp_id() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.cu_cp_id)
  return _internal_mutable_cu_cp_id();
}
inline void CpUpHdr::set_allocated_cu_cp_id(::structure::CuCpID* cu_cp_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cu_cp_id_;
  }
  if (cu_cp_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cu_cp_id);
    if (message_arena != submessage_arena) {
      cu_cp_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cu_cp_id, submessage_arena);
    }
    
  } else {
    
  }
  cu_cp_id_ = cu_cp_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.cu_cp_id)
}

// .structure.CuUpID cu_up_id = 30;
inline bool CpUpHdr::_internal_has_cu_up_id() const {
  return this != internal_default_instance() && cu_up_id_ != nullptr;
}
inline bool CpUpHdr::has_cu_up_id() const {
  return _internal_has_cu_up_id();
}
inline void CpUpHdr::clear_cu_up_id() {
  if (GetArena() == nullptr && cu_up_id_ != nullptr) {
    delete cu_up_id_;
  }
  cu_up_id_ = nullptr;
}
inline const ::structure::CuUpID& CpUpHdr::_internal_cu_up_id() const {
  const ::structure::CuUpID* p = cu_up_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CuUpID*>(
      &::structure::_CuUpID_default_instance_);
}
inline const ::structure::CuUpID& CpUpHdr::cu_up_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.cu_up_id)
  return _internal_cu_up_id();
}
inline void CpUpHdr::unsafe_arena_set_allocated_cu_up_id(
    ::structure::CuUpID* cu_up_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cu_up_id_);
  }
  cu_up_id_ = cu_up_id;
  if (cu_up_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.cu_up_id)
}
inline ::structure::CuUpID* CpUpHdr::release_cu_up_id() {
  
  ::structure::CuUpID* temp = cu_up_id_;
  cu_up_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CuUpID* CpUpHdr::unsafe_arena_release_cu_up_id() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.cu_up_id)
  
  ::structure::CuUpID* temp = cu_up_id_;
  cu_up_id_ = nullptr;
  return temp;
}
inline ::structure::CuUpID* CpUpHdr::_internal_mutable_cu_up_id() {
  
  if (cu_up_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CuUpID>(GetArena());
    cu_up_id_ = p;
  }
  return cu_up_id_;
}
inline ::structure::CuUpID* CpUpHdr::mutable_cu_up_id() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.cu_up_id)
  return _internal_mutable_cu_up_id();
}
inline void CpUpHdr::set_allocated_cu_up_id(::structure::CuUpID* cu_up_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cu_up_id_;
  }
  if (cu_up_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cu_up_id);
    if (message_arena != submessage_arena) {
      cu_up_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cu_up_id, submessage_arena);
    }
    
  } else {
    
  }
  cu_up_id_ = cu_up_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.cu_up_id)
}

// .structure.SuSpID su_sp_id = 40;
inline bool CpUpHdr::_internal_has_su_sp_id() const {
  return this != internal_default_instance() && su_sp_id_ != nullptr;
}
inline bool CpUpHdr::has_su_sp_id() const {
  return _internal_has_su_sp_id();
}
inline void CpUpHdr::clear_su_sp_id() {
  if (GetArena() == nullptr && su_sp_id_ != nullptr) {
    delete su_sp_id_;
  }
  su_sp_id_ = nullptr;
}
inline const ::structure::SuSpID& CpUpHdr::_internal_su_sp_id() const {
  const ::structure::SuSpID* p = su_sp_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::SuSpID*>(
      &::structure::_SuSpID_default_instance_);
}
inline const ::structure::SuSpID& CpUpHdr::su_sp_id() const {
  // @@protoc_insertion_point(field_get:structure.CpUpHdr.su_sp_id)
  return _internal_su_sp_id();
}
inline void CpUpHdr::unsafe_arena_set_allocated_su_sp_id(
    ::structure::SuSpID* su_sp_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(su_sp_id_);
  }
  su_sp_id_ = su_sp_id;
  if (su_sp_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.CpUpHdr.su_sp_id)
}
inline ::structure::SuSpID* CpUpHdr::release_su_sp_id() {
  
  ::structure::SuSpID* temp = su_sp_id_;
  su_sp_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::SuSpID* CpUpHdr::unsafe_arena_release_su_sp_id() {
  // @@protoc_insertion_point(field_release:structure.CpUpHdr.su_sp_id)
  
  ::structure::SuSpID* temp = su_sp_id_;
  su_sp_id_ = nullptr;
  return temp;
}
inline ::structure::SuSpID* CpUpHdr::_internal_mutable_su_sp_id() {
  
  if (su_sp_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::SuSpID>(GetArena());
    su_sp_id_ = p;
  }
  return su_sp_id_;
}
inline ::structure::SuSpID* CpUpHdr::mutable_su_sp_id() {
  // @@protoc_insertion_point(field_mutable:structure.CpUpHdr.su_sp_id)
  return _internal_mutable_su_sp_id();
}
inline void CpUpHdr::set_allocated_su_sp_id(::structure::SuSpID* su_sp_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete su_sp_id_;
  }
  if (su_sp_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(su_sp_id);
    if (message_arena != submessage_arena) {
      su_sp_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, su_sp_id, submessage_arena);
    }
    
  } else {
    
  }
  su_sp_id_ = su_sp_id;
  // @@protoc_insertion_point(field_set_allocated:structure.CpUpHdr.su_sp_id)
}

// -------------------------------------------------------------------

// SecurityConfigure

// uint32 algorithm_type = 10;
inline void SecurityConfigure::clear_algorithm_type() {
  algorithm_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfigure::_internal_algorithm_type() const {
  return algorithm_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfigure::algorithm_type() const {
  // @@protoc_insertion_point(field_get:structure.SecurityConfigure.algorithm_type)
  return _internal_algorithm_type();
}
inline void SecurityConfigure::_internal_set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  algorithm_type_ = value;
}
inline void SecurityConfigure::set_algorithm_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_algorithm_type(value);
  // @@protoc_insertion_point(field_set:structure.SecurityConfigure.algorithm_type)
}

// repeated uint32 encryption_key = 20;
inline int SecurityConfigure::_internal_encryption_key_size() const {
  return encryption_key_.size();
}
inline int SecurityConfigure::encryption_key_size() const {
  return _internal_encryption_key_size();
}
inline void SecurityConfigure::clear_encryption_key() {
  encryption_key_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfigure::_internal_encryption_key(int index) const {
  return encryption_key_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SecurityConfigure::encryption_key(int index) const {
  // @@protoc_insertion_point(field_get:structure.SecurityConfigure.encryption_key)
  return _internal_encryption_key(index);
}
inline void SecurityConfigure::set_encryption_key(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  encryption_key_.Set(index, value);
  // @@protoc_insertion_point(field_set:structure.SecurityConfigure.encryption_key)
}
inline void SecurityConfigure::_internal_add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  encryption_key_.Add(value);
}
inline void SecurityConfigure::add_encryption_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_encryption_key(value);
  // @@protoc_insertion_point(field_add:structure.SecurityConfigure.encryption_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SecurityConfigure::_internal_encryption_key() const {
  return encryption_key_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SecurityConfigure::encryption_key() const {
  // @@protoc_insertion_point(field_list:structure.SecurityConfigure.encryption_key)
  return _internal_encryption_key();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SecurityConfigure::_internal_mutable_encryption_key() {
  return &encryption_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SecurityConfigure::mutable_encryption_key() {
  // @@protoc_insertion_point(field_mutable_list:structure.SecurityConfigure.encryption_key)
  return _internal_mutable_encryption_key();
}

// -------------------------------------------------------------------

// GtpTunnelId

// uint32 ue_id = 10;
inline void GtpTunnelId::clear_ue_id() {
  ue_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_ue_id() const {
  return ue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::ue_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.ue_id)
  return _internal_ue_id();
}
inline void GtpTunnelId::_internal_set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ue_id_ = value;
}
inline void GtpTunnelId::set_ue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_id(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.ue_id)
}

// uint32 rb_id = 20;
inline void GtpTunnelId::clear_rb_id() {
  rb_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_rb_id() const {
  return rb_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::rb_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.rb_id)
  return _internal_rb_id();
}
inline void GtpTunnelId::_internal_set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rb_id_ = value;
}
inline void GtpTunnelId::set_rb_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_id(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.rb_id)
}

// .structure.TunnelType tnl_type = 30;
inline void GtpTunnelId::clear_tnl_type() {
  tnl_type_ = 0;
}
inline ::structure::TunnelType GtpTunnelId::_internal_tnl_type() const {
  return static_cast< ::structure::TunnelType >(tnl_type_);
}
inline ::structure::TunnelType GtpTunnelId::tnl_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.tnl_type)
  return _internal_tnl_type();
}
inline void GtpTunnelId::_internal_set_tnl_type(::structure::TunnelType value) {
  
  tnl_type_ = value;
}
inline void GtpTunnelId::set_tnl_type(::structure::TunnelType value) {
  _internal_set_tnl_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.tnl_type)
}

// uint32 tnl_priority = 40;
inline void GtpTunnelId::clear_tnl_priority() {
  tnl_priority_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::_internal_tnl_priority() const {
  return tnl_priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunnelId::tnl_priority() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunnelId.tnl_priority)
  return _internal_tnl_priority();
}
inline void GtpTunnelId::_internal_set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tnl_priority_ = value;
}
inline void GtpTunnelId::set_tnl_priority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tnl_priority(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunnelId.tnl_priority)
}

// -------------------------------------------------------------------

// GtpTunInfo

// .structure.GtpTunnelId tnl_id = 10;
inline bool GtpTunInfo::_internal_has_tnl_id() const {
  return this != internal_default_instance() && tnl_id_ != nullptr;
}
inline bool GtpTunInfo::has_tnl_id() const {
  return _internal_has_tnl_id();
}
inline void GtpTunInfo::clear_tnl_id() {
  if (GetArena() == nullptr && tnl_id_ != nullptr) {
    delete tnl_id_;
  }
  tnl_id_ = nullptr;
}
inline const ::structure::GtpTunnelId& GtpTunInfo::_internal_tnl_id() const {
  const ::structure::GtpTunnelId* p = tnl_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::GtpTunnelId*>(
      &::structure::_GtpTunnelId_default_instance_);
}
inline const ::structure::GtpTunnelId& GtpTunInfo::tnl_id() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.tnl_id)
  return _internal_tnl_id();
}
inline void GtpTunInfo::unsafe_arena_set_allocated_tnl_id(
    ::structure::GtpTunnelId* tnl_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tnl_id_);
  }
  tnl_id_ = tnl_id;
  if (tnl_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.GtpTunInfo.tnl_id)
}
inline ::structure::GtpTunnelId* GtpTunInfo::release_tnl_id() {
  
  ::structure::GtpTunnelId* temp = tnl_id_;
  tnl_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::GtpTunnelId* GtpTunInfo::unsafe_arena_release_tnl_id() {
  // @@protoc_insertion_point(field_release:structure.GtpTunInfo.tnl_id)
  
  ::structure::GtpTunnelId* temp = tnl_id_;
  tnl_id_ = nullptr;
  return temp;
}
inline ::structure::GtpTunnelId* GtpTunInfo::_internal_mutable_tnl_id() {
  
  if (tnl_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::GtpTunnelId>(GetArena());
    tnl_id_ = p;
  }
  return tnl_id_;
}
inline ::structure::GtpTunnelId* GtpTunInfo::mutable_tnl_id() {
  // @@protoc_insertion_point(field_mutable:structure.GtpTunInfo.tnl_id)
  return _internal_mutable_tnl_id();
}
inline void GtpTunInfo::set_allocated_tnl_id(::structure::GtpTunnelId* tnl_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tnl_id_;
  }
  if (tnl_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tnl_id);
    if (message_arena != submessage_arena) {
      tnl_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tnl_id, submessage_arena);
    }
    
  } else {
    
  }
  tnl_id_ = tnl_id;
  // @@protoc_insertion_point(field_set_allocated:structure.GtpTunInfo.tnl_id)
}

// .structure.InterfaceType interface_type = 20;
inline void GtpTunInfo::clear_interface_type() {
  interface_type_ = 0;
}
inline ::structure::InterfaceType GtpTunInfo::_internal_interface_type() const {
  return static_cast< ::structure::InterfaceType >(interface_type_);
}
inline ::structure::InterfaceType GtpTunInfo::interface_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.interface_type)
  return _internal_interface_type();
}
inline void GtpTunInfo::_internal_set_interface_type(::structure::InterfaceType value) {
  
  interface_type_ = value;
}
inline void GtpTunInfo::set_interface_type(::structure::InterfaceType value) {
  _internal_set_interface_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunInfo.interface_type)
}

// .common.IpAddress dst_addr = 30;
inline bool GtpTunInfo::_internal_has_dst_addr() const {
  return this != internal_default_instance() && dst_addr_ != nullptr;
}
inline bool GtpTunInfo::has_dst_addr() const {
  return _internal_has_dst_addr();
}
inline const ::common::IpAddress& GtpTunInfo::_internal_dst_addr() const {
  const ::common::IpAddress* p = dst_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& GtpTunInfo::dst_addr() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.dst_addr)
  return _internal_dst_addr();
}
inline void GtpTunInfo::unsafe_arena_set_allocated_dst_addr(
    ::common::IpAddress* dst_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  dst_addr_ = dst_addr;
  if (dst_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.GtpTunInfo.dst_addr)
}
inline ::common::IpAddress* GtpTunInfo::release_dst_addr() {
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* GtpTunInfo::unsafe_arena_release_dst_addr() {
  // @@protoc_insertion_point(field_release:structure.GtpTunInfo.dst_addr)
  
  ::common::IpAddress* temp = dst_addr_;
  dst_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* GtpTunInfo::_internal_mutable_dst_addr() {
  
  if (dst_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    dst_addr_ = p;
  }
  return dst_addr_;
}
inline ::common::IpAddress* GtpTunInfo::mutable_dst_addr() {
  // @@protoc_insertion_point(field_mutable:structure.GtpTunInfo.dst_addr)
  return _internal_mutable_dst_addr();
}
inline void GtpTunInfo::set_allocated_dst_addr(::common::IpAddress* dst_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr_);
  }
  if (dst_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dst_addr)->GetArena();
    if (message_arena != submessage_arena) {
      dst_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dst_addr, submessage_arena);
    }
    
  } else {
    
  }
  dst_addr_ = dst_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.GtpTunInfo.dst_addr)
}

// .common.IpAddress src_addr = 31;
inline bool GtpTunInfo::_internal_has_src_addr() const {
  return this != internal_default_instance() && src_addr_ != nullptr;
}
inline bool GtpTunInfo::has_src_addr() const {
  return _internal_has_src_addr();
}
inline const ::common::IpAddress& GtpTunInfo::_internal_src_addr() const {
  const ::common::IpAddress* p = src_addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::common::IpAddress*>(
      &::common::_IpAddress_default_instance_);
}
inline const ::common::IpAddress& GtpTunInfo::src_addr() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.src_addr)
  return _internal_src_addr();
}
inline void GtpTunInfo::unsafe_arena_set_allocated_src_addr(
    ::common::IpAddress* src_addr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  src_addr_ = src_addr;
  if (src_addr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.GtpTunInfo.src_addr)
}
inline ::common::IpAddress* GtpTunInfo::release_src_addr() {
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::common::IpAddress* GtpTunInfo::unsafe_arena_release_src_addr() {
  // @@protoc_insertion_point(field_release:structure.GtpTunInfo.src_addr)
  
  ::common::IpAddress* temp = src_addr_;
  src_addr_ = nullptr;
  return temp;
}
inline ::common::IpAddress* GtpTunInfo::_internal_mutable_src_addr() {
  
  if (src_addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::IpAddress>(GetArena());
    src_addr_ = p;
  }
  return src_addr_;
}
inline ::common::IpAddress* GtpTunInfo::mutable_src_addr() {
  // @@protoc_insertion_point(field_mutable:structure.GtpTunInfo.src_addr)
  return _internal_mutable_src_addr();
}
inline void GtpTunInfo::set_allocated_src_addr(::common::IpAddress* src_addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr_);
  }
  if (src_addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(src_addr)->GetArena();
    if (message_arena != submessage_arena) {
      src_addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, src_addr, submessage_arena);
    }
    
  } else {
    
  }
  src_addr_ = src_addr;
  // @@protoc_insertion_point(field_set_allocated:structure.GtpTunInfo.src_addr)
}

// uint32 rem_teid = 40;
inline void GtpTunInfo::clear_rem_teid() {
  rem_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunInfo::_internal_rem_teid() const {
  return rem_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunInfo::rem_teid() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.rem_teid)
  return _internal_rem_teid();
}
inline void GtpTunInfo::_internal_set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rem_teid_ = value;
}
inline void GtpTunInfo::set_rem_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rem_teid(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunInfo.rem_teid)
}

// bool ho_src_enodeb = 50;
inline void GtpTunInfo::clear_ho_src_enodeb() {
  ho_src_enodeb_ = false;
}
inline bool GtpTunInfo::_internal_ho_src_enodeb() const {
  return ho_src_enodeb_;
}
inline bool GtpTunInfo::ho_src_enodeb() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.ho_src_enodeb)
  return _internal_ho_src_enodeb();
}
inline void GtpTunInfo::_internal_set_ho_src_enodeb(bool value) {
  
  ho_src_enodeb_ = value;
}
inline void GtpTunInfo::set_ho_src_enodeb(bool value) {
  _internal_set_ho_src_enodeb(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunInfo.ho_src_enodeb)
}

// .structure.HandoverType ho_type = 51;
inline void GtpTunInfo::clear_ho_type() {
  ho_type_ = 0;
}
inline ::structure::HandoverType GtpTunInfo::_internal_ho_type() const {
  return static_cast< ::structure::HandoverType >(ho_type_);
}
inline ::structure::HandoverType GtpTunInfo::ho_type() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.ho_type)
  return _internal_ho_type();
}
inline void GtpTunInfo::_internal_set_ho_type(::structure::HandoverType value) {
  
  ho_type_ = value;
}
inline void GtpTunInfo::set_ho_type(::structure::HandoverType value) {
  _internal_set_ho_type(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunInfo.ho_type)
}

// bool id_fullCfg = 60;
inline void GtpTunInfo::clear_id_fullcfg() {
  id_fullcfg_ = false;
}
inline bool GtpTunInfo::_internal_id_fullcfg() const {
  return id_fullcfg_;
}
inline bool GtpTunInfo::id_fullcfg() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.id_fullCfg)
  return _internal_id_fullcfg();
}
inline void GtpTunInfo::_internal_set_id_fullcfg(bool value) {
  
  id_fullcfg_ = value;
}
inline void GtpTunInfo::set_id_fullcfg(bool value) {
  _internal_set_id_fullcfg(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunInfo.id_fullCfg)
}

// uint32 rlc_mode = 61;
inline void GtpTunInfo::clear_rlc_mode() {
  rlc_mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunInfo::_internal_rlc_mode() const {
  return rlc_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtpTunInfo::rlc_mode() const {
  // @@protoc_insertion_point(field_get:structure.GtpTunInfo.rlc_mode)
  return _internal_rlc_mode();
}
inline void GtpTunInfo::_internal_set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rlc_mode_ = value;
}
inline void GtpTunInfo::set_rlc_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rlc_mode(value);
  // @@protoc_insertion_point(field_set:structure.GtpTunInfo.rlc_mode)
}

// -------------------------------------------------------------------

// RlcInfo

// uint32 direction = 10;
inline void RlcInfo::clear_direction() {
  direction_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::direction() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.direction)
  return _internal_direction();
}
inline void RlcInfo::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  direction_ = value;
}
inline void RlcInfo::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.direction)
}

// uint32 mode = 20;
inline void RlcInfo::clear_mode() {
  mode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::mode() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.mode)
  return _internal_mode();
}
inline void RlcInfo::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mode_ = value;
}
inline void RlcInfo::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.mode)
}

// bool status_rep_require = 30;
inline void RlcInfo::clear_status_rep_require() {
  status_rep_require_ = false;
}
inline bool RlcInfo::_internal_status_rep_require() const {
  return status_rep_require_;
}
inline bool RlcInfo::status_rep_require() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.status_rep_require)
  return _internal_status_rep_require();
}
inline void RlcInfo::_internal_set_status_rep_require(bool value) {
  
  status_rep_require_ = value;
}
inline void RlcInfo::set_status_rep_require(bool value) {
  _internal_set_status_rep_require(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.status_rep_require)
}

// uint32 pdcp_sn_size = 40;
inline void RlcInfo::clear_pdcp_sn_size() {
  pdcp_sn_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::_internal_pdcp_sn_size() const {
  return pdcp_sn_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RlcInfo::pdcp_sn_size() const {
  // @@protoc_insertion_point(field_get:structure.RlcInfo.pdcp_sn_size)
  return _internal_pdcp_sn_size();
}
inline void RlcInfo::_internal_set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pdcp_sn_size_ = value;
}
inline void RlcInfo::set_pdcp_sn_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcp_sn_size(value);
  // @@protoc_insertion_point(field_set:structure.RlcInfo.pdcp_sn_size)
}

// -------------------------------------------------------------------

// HeaderCompressConfigure

// bool hdr_comp_used = 10;
inline void HeaderCompressConfigure::clear_hdr_comp_used() {
  hdr_comp_used_ = false;
}
inline bool HeaderCompressConfigure::_internal_hdr_comp_used() const {
  return hdr_comp_used_;
}
inline bool HeaderCompressConfigure::hdr_comp_used() const {
  // @@protoc_insertion_point(field_get:structure.HeaderCompressConfigure.hdr_comp_used)
  return _internal_hdr_comp_used();
}
inline void HeaderCompressConfigure::_internal_set_hdr_comp_used(bool value) {
  
  hdr_comp_used_ = value;
}
inline void HeaderCompressConfigure::set_hdr_comp_used(bool value) {
  _internal_set_hdr_comp_used(value);
  // @@protoc_insertion_point(field_set:structure.HeaderCompressConfigure.hdr_comp_used)
}

// uint32 max_cid = 20;
inline void HeaderCompressConfigure::clear_max_cid() {
  max_cid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressConfigure::_internal_max_cid() const {
  return max_cid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressConfigure::max_cid() const {
  // @@protoc_insertion_point(field_get:structure.HeaderCompressConfigure.max_cid)
  return _internal_max_cid();
}
inline void HeaderCompressConfigure::_internal_set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_cid_ = value;
}
inline void HeaderCompressConfigure::set_max_cid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_cid(value);
  // @@protoc_insertion_point(field_set:structure.HeaderCompressConfigure.max_cid)
}

// repeated uint32 profile_list = 30;
inline int HeaderCompressConfigure::_internal_profile_list_size() const {
  return profile_list_.size();
}
inline int HeaderCompressConfigure::profile_list_size() const {
  return _internal_profile_list_size();
}
inline void HeaderCompressConfigure::clear_profile_list() {
  profile_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressConfigure::_internal_profile_list(int index) const {
  return profile_list_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeaderCompressConfigure::profile_list(int index) const {
  // @@protoc_insertion_point(field_get:structure.HeaderCompressConfigure.profile_list)
  return _internal_profile_list(index);
}
inline void HeaderCompressConfigure::set_profile_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  profile_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:structure.HeaderCompressConfigure.profile_list)
}
inline void HeaderCompressConfigure::_internal_add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  profile_list_.Add(value);
}
inline void HeaderCompressConfigure::add_profile_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_profile_list(value);
  // @@protoc_insertion_point(field_add:structure.HeaderCompressConfigure.profile_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HeaderCompressConfigure::_internal_profile_list() const {
  return profile_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HeaderCompressConfigure::profile_list() const {
  // @@protoc_insertion_point(field_list:structure.HeaderCompressConfigure.profile_list)
  return _internal_profile_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HeaderCompressConfigure::_internal_mutable_profile_list() {
  return &profile_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HeaderCompressConfigure::mutable_profile_list() {
  // @@protoc_insertion_point(field_mutable_list:structure.HeaderCompressConfigure.profile_list)
  return _internal_mutable_profile_list();
}

// -------------------------------------------------------------------

// PDCPConfigure

// uint32 sn_len = 10;
inline void PDCPConfigure::clear_sn_len() {
  sn_len_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPConfigure::_internal_sn_len() const {
  return sn_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPConfigure::sn_len() const {
  // @@protoc_insertion_point(field_get:structure.PDCPConfigure.sn_len)
  return _internal_sn_len();
}
inline void PDCPConfigure::_internal_set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sn_len_ = value;
}
inline void PDCPConfigure::set_sn_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sn_len(value);
  // @@protoc_insertion_point(field_set:structure.PDCPConfigure.sn_len)
}

// uint32 qci = 20;
inline void PDCPConfigure::clear_qci() {
  qci_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPConfigure::_internal_qci() const {
  return qci_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPConfigure::qci() const {
  // @@protoc_insertion_point(field_get:structure.PDCPConfigure.qci)
  return _internal_qci();
}
inline void PDCPConfigure::_internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  qci_ = value;
}
inline void PDCPConfigure::set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qci(value);
  // @@protoc_insertion_point(field_set:structure.PDCPConfigure.qci)
}

// uint32 discard_timer = 30;
inline void PDCPConfigure::clear_discard_timer() {
  discard_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPConfigure::_internal_discard_timer() const {
  return discard_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PDCPConfigure::discard_timer() const {
  // @@protoc_insertion_point(field_get:structure.PDCPConfigure.discard_timer)
  return _internal_discard_timer();
}
inline void PDCPConfigure::_internal_set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  discard_timer_ = value;
}
inline void PDCPConfigure::set_discard_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_discard_timer(value);
  // @@protoc_insertion_point(field_set:structure.PDCPConfigure.discard_timer)
}

// .structure.RlcInfo rlc_info = 40;
inline bool PDCPConfigure::_internal_has_rlc_info() const {
  return this != internal_default_instance() && rlc_info_ != nullptr;
}
inline bool PDCPConfigure::has_rlc_info() const {
  return _internal_has_rlc_info();
}
inline void PDCPConfigure::clear_rlc_info() {
  if (GetArena() == nullptr && rlc_info_ != nullptr) {
    delete rlc_info_;
  }
  rlc_info_ = nullptr;
}
inline const ::structure::RlcInfo& PDCPConfigure::_internal_rlc_info() const {
  const ::structure::RlcInfo* p = rlc_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::RlcInfo*>(
      &::structure::_RlcInfo_default_instance_);
}
inline const ::structure::RlcInfo& PDCPConfigure::rlc_info() const {
  // @@protoc_insertion_point(field_get:structure.PDCPConfigure.rlc_info)
  return _internal_rlc_info();
}
inline void PDCPConfigure::unsafe_arena_set_allocated_rlc_info(
    ::structure::RlcInfo* rlc_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rlc_info_);
  }
  rlc_info_ = rlc_info;
  if (rlc_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPConfigure.rlc_info)
}
inline ::structure::RlcInfo* PDCPConfigure::release_rlc_info() {
  
  ::structure::RlcInfo* temp = rlc_info_;
  rlc_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::RlcInfo* PDCPConfigure::unsafe_arena_release_rlc_info() {
  // @@protoc_insertion_point(field_release:structure.PDCPConfigure.rlc_info)
  
  ::structure::RlcInfo* temp = rlc_info_;
  rlc_info_ = nullptr;
  return temp;
}
inline ::structure::RlcInfo* PDCPConfigure::_internal_mutable_rlc_info() {
  
  if (rlc_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::RlcInfo>(GetArena());
    rlc_info_ = p;
  }
  return rlc_info_;
}
inline ::structure::RlcInfo* PDCPConfigure::mutable_rlc_info() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPConfigure.rlc_info)
  return _internal_mutable_rlc_info();
}
inline void PDCPConfigure::set_allocated_rlc_info(::structure::RlcInfo* rlc_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rlc_info_;
  }
  if (rlc_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rlc_info);
    if (message_arena != submessage_arena) {
      rlc_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rlc_info, submessage_arena);
    }
    
  } else {
    
  }
  rlc_info_ = rlc_info;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPConfigure.rlc_info)
}

// .structure.HeaderCompressConfigure hdr_cmp_cfg = 50;
inline bool PDCPConfigure::_internal_has_hdr_cmp_cfg() const {
  return this != internal_default_instance() && hdr_cmp_cfg_ != nullptr;
}
inline bool PDCPConfigure::has_hdr_cmp_cfg() const {
  return _internal_has_hdr_cmp_cfg();
}
inline void PDCPConfigure::clear_hdr_cmp_cfg() {
  if (GetArena() == nullptr && hdr_cmp_cfg_ != nullptr) {
    delete hdr_cmp_cfg_;
  }
  hdr_cmp_cfg_ = nullptr;
}
inline const ::structure::HeaderCompressConfigure& PDCPConfigure::_internal_hdr_cmp_cfg() const {
  const ::structure::HeaderCompressConfigure* p = hdr_cmp_cfg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::HeaderCompressConfigure*>(
      &::structure::_HeaderCompressConfigure_default_instance_);
}
inline const ::structure::HeaderCompressConfigure& PDCPConfigure::hdr_cmp_cfg() const {
  // @@protoc_insertion_point(field_get:structure.PDCPConfigure.hdr_cmp_cfg)
  return _internal_hdr_cmp_cfg();
}
inline void PDCPConfigure::unsafe_arena_set_allocated_hdr_cmp_cfg(
    ::structure::HeaderCompressConfigure* hdr_cmp_cfg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_cmp_cfg_);
  }
  hdr_cmp_cfg_ = hdr_cmp_cfg;
  if (hdr_cmp_cfg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:structure.PDCPConfigure.hdr_cmp_cfg)
}
inline ::structure::HeaderCompressConfigure* PDCPConfigure::release_hdr_cmp_cfg() {
  
  ::structure::HeaderCompressConfigure* temp = hdr_cmp_cfg_;
  hdr_cmp_cfg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::HeaderCompressConfigure* PDCPConfigure::unsafe_arena_release_hdr_cmp_cfg() {
  // @@protoc_insertion_point(field_release:structure.PDCPConfigure.hdr_cmp_cfg)
  
  ::structure::HeaderCompressConfigure* temp = hdr_cmp_cfg_;
  hdr_cmp_cfg_ = nullptr;
  return temp;
}
inline ::structure::HeaderCompressConfigure* PDCPConfigure::_internal_mutable_hdr_cmp_cfg() {
  
  if (hdr_cmp_cfg_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::HeaderCompressConfigure>(GetArena());
    hdr_cmp_cfg_ = p;
  }
  return hdr_cmp_cfg_;
}
inline ::structure::HeaderCompressConfigure* PDCPConfigure::mutable_hdr_cmp_cfg() {
  // @@protoc_insertion_point(field_mutable:structure.PDCPConfigure.hdr_cmp_cfg)
  return _internal_mutable_hdr_cmp_cfg();
}
inline void PDCPConfigure::set_allocated_hdr_cmp_cfg(::structure::HeaderCompressConfigure* hdr_cmp_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hdr_cmp_cfg_;
  }
  if (hdr_cmp_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hdr_cmp_cfg);
    if (message_arena != submessage_arena) {
      hdr_cmp_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr_cmp_cfg, submessage_arena);
    }
    
  } else {
    
  }
  hdr_cmp_cfg_ = hdr_cmp_cfg;
  // @@protoc_insertion_point(field_set_allocated:structure.PDCPConfigure.hdr_cmp_cfg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace structure

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::structure::TunnelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::TunnelType>() {
  return ::structure::TunnelType_descriptor();
}
template <> struct is_proto_enum< ::structure::InterfaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::InterfaceType>() {
  return ::structure::InterfaceType_descriptor();
}
template <> struct is_proto_enum< ::structure::HandoverType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::structure::HandoverType>() {
  return ::structure::HandoverType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_structure_2eproto
