// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvCp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_srvCp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_srvCp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mhdr.pb.h"
#include "structure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_srvCp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_srvCp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvCp_2eproto;
namespace srvCp {
class AddRbConfigureRsp;
class AddRbConfigureRspDefaultTypeInternal;
extern AddRbConfigureRspDefaultTypeInternal _AddRbConfigureRsp_default_instance_;
class CfmReply;
class CfmReplyDefaultTypeInternal;
extern CfmReplyDefaultTypeInternal _CfmReply_default_instance_;
class CreateTunnelRsp;
class CreateTunnelRspDefaultTypeInternal;
extern CreateTunnelRspDefaultTypeInternal _CreateTunnelRsp_default_instance_;
class DeleteTunnelRsp;
class DeleteTunnelRspDefaultTypeInternal;
extern DeleteTunnelRspDefaultTypeInternal _DeleteTunnelRsp_default_instance_;
class ModifyTunnelRsp;
class ModifyTunnelRspDefaultTypeInternal;
extern ModifyTunnelRspDefaultTypeInternal _ModifyTunnelRsp_default_instance_;
class SecurityConfigureRsp;
class SecurityConfigureRspDefaultTypeInternal;
extern SecurityConfigureRspDefaultTypeInternal _SecurityConfigureRsp_default_instance_;
}  // namespace srvCp
PROTOBUF_NAMESPACE_OPEN
template<> ::srvCp::AddRbConfigureRsp* Arena::CreateMaybeMessage<::srvCp::AddRbConfigureRsp>(Arena*);
template<> ::srvCp::CfmReply* Arena::CreateMaybeMessage<::srvCp::CfmReply>(Arena*);
template<> ::srvCp::CreateTunnelRsp* Arena::CreateMaybeMessage<::srvCp::CreateTunnelRsp>(Arena*);
template<> ::srvCp::DeleteTunnelRsp* Arena::CreateMaybeMessage<::srvCp::DeleteTunnelRsp>(Arena*);
template<> ::srvCp::ModifyTunnelRsp* Arena::CreateMaybeMessage<::srvCp::ModifyTunnelRsp>(Arena*);
template<> ::srvCp::SecurityConfigureRsp* Arena::CreateMaybeMessage<::srvCp::SecurityConfigureRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace srvCp {

enum method : int {
  MethodUnknown = 0,
  MethodSecurityConfigureCfmReq = 1,
  MethodCreateTunnelCfmReq = 2,
  MethodModifyTunnelCfmReq = 3,
  MethodDeleteTunnelCfmReq = 4,
  MethodAddRbConfigureCfmReq = 5,
  MethodCfmReply = 6,
  method_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  method_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool method_IsValid(int value);
constexpr method method_MIN = MethodUnknown;
constexpr method method_MAX = MethodCfmReply;
constexpr int method_ARRAYSIZE = method_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor();
template<typename T>
inline const std::string& method_Name(T enum_t_value) {
  static_assert(::std::is_same<T, method>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function method_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    method_descriptor(), enum_t_value);
}
inline bool method_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, method* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<method>(
    method_descriptor(), name, value);
}
enum version : int {
  VerUnknown = 0,
  Ver = 1,
  version_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  version_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool version_IsValid(int value);
constexpr version version_MIN = VerUnknown;
constexpr version version_MAX = Ver;
constexpr int version_ARRAYSIZE = version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor();
template<typename T>
inline const std::string& version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    version_descriptor(), enum_t_value);
}
inline bool version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<version>(
    version_descriptor(), name, value);
}
// ===================================================================

class SecurityConfigureRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.SecurityConfigureRsp) */ {
 public:
  inline SecurityConfigureRsp() : SecurityConfigureRsp(nullptr) {}
  virtual ~SecurityConfigureRsp();

  SecurityConfigureRsp(const SecurityConfigureRsp& from);
  SecurityConfigureRsp(SecurityConfigureRsp&& from) noexcept
    : SecurityConfigureRsp() {
    *this = ::std::move(from);
  }

  inline SecurityConfigureRsp& operator=(const SecurityConfigureRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityConfigureRsp& operator=(SecurityConfigureRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityConfigureRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityConfigureRsp* internal_default_instance() {
    return reinterpret_cast<const SecurityConfigureRsp*>(
               &_SecurityConfigureRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecurityConfigureRsp& a, SecurityConfigureRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityConfigureRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityConfigureRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityConfigureRsp* New() const final {
    return CreateMaybeMessage<SecurityConfigureRsp>(nullptr);
  }

  SecurityConfigureRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityConfigureRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityConfigureRsp& from);
  void MergeFrom(const SecurityConfigureRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityConfigureRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.SecurityConfigureRsp";
  }
  protected:
  explicit SecurityConfigureRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 40,
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kStatusFieldNumber = 30,
  };
  // string reason = 40;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // bool status = 30;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.SecurityConfigureRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class CreateTunnelRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.CreateTunnelRsp) */ {
 public:
  inline CreateTunnelRsp() : CreateTunnelRsp(nullptr) {}
  virtual ~CreateTunnelRsp();

  CreateTunnelRsp(const CreateTunnelRsp& from);
  CreateTunnelRsp(CreateTunnelRsp&& from) noexcept
    : CreateTunnelRsp() {
    *this = ::std::move(from);
  }

  inline CreateTunnelRsp& operator=(const CreateTunnelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTunnelRsp& operator=(CreateTunnelRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTunnelRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTunnelRsp* internal_default_instance() {
    return reinterpret_cast<const CreateTunnelRsp*>(
               &_CreateTunnelRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateTunnelRsp& a, CreateTunnelRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTunnelRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTunnelRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTunnelRsp* New() const final {
    return CreateMaybeMessage<CreateTunnelRsp>(nullptr);
  }

  CreateTunnelRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTunnelRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTunnelRsp& from);
  void MergeFrom(const CreateTunnelRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTunnelRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.CreateTunnelRsp";
  }
  protected:
  explicit CreateTunnelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kStatusFieldNumber = 40,
    kLocalGtpTeidFieldNumber = 30,
    kRemoteGtpTeidFieldNumber = 35,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // bool status = 40;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // uint32 local_gtp_teid = 30;
  void clear_local_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid() const;
  void set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_local_gtp_teid() const;
  void _internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 remote_gtp_teid = 35;
  void clear_remote_gtp_teid();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid() const;
  void set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_gtp_teid() const;
  void _internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.CreateTunnelRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  bool status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 local_gtp_teid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_gtp_teid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class ModifyTunnelRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.ModifyTunnelRsp) */ {
 public:
  inline ModifyTunnelRsp() : ModifyTunnelRsp(nullptr) {}
  virtual ~ModifyTunnelRsp();

  ModifyTunnelRsp(const ModifyTunnelRsp& from);
  ModifyTunnelRsp(ModifyTunnelRsp&& from) noexcept
    : ModifyTunnelRsp() {
    *this = ::std::move(from);
  }

  inline ModifyTunnelRsp& operator=(const ModifyTunnelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyTunnelRsp& operator=(ModifyTunnelRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModifyTunnelRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyTunnelRsp* internal_default_instance() {
    return reinterpret_cast<const ModifyTunnelRsp*>(
               &_ModifyTunnelRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModifyTunnelRsp& a, ModifyTunnelRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyTunnelRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyTunnelRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyTunnelRsp* New() const final {
    return CreateMaybeMessage<ModifyTunnelRsp>(nullptr);
  }

  ModifyTunnelRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyTunnelRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModifyTunnelRsp& from);
  void MergeFrom(const ModifyTunnelRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyTunnelRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.ModifyTunnelRsp";
  }
  protected:
  explicit ModifyTunnelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kStatusFieldNumber = 30,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // bool status = 30;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.ModifyTunnelRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class DeleteTunnelRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.DeleteTunnelRsp) */ {
 public:
  inline DeleteTunnelRsp() : DeleteTunnelRsp(nullptr) {}
  virtual ~DeleteTunnelRsp();

  DeleteTunnelRsp(const DeleteTunnelRsp& from);
  DeleteTunnelRsp(DeleteTunnelRsp&& from) noexcept
    : DeleteTunnelRsp() {
    *this = ::std::move(from);
  }

  inline DeleteTunnelRsp& operator=(const DeleteTunnelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTunnelRsp& operator=(DeleteTunnelRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTunnelRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTunnelRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteTunnelRsp*>(
               &_DeleteTunnelRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteTunnelRsp& a, DeleteTunnelRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTunnelRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTunnelRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTunnelRsp* New() const final {
    return CreateMaybeMessage<DeleteTunnelRsp>(nullptr);
  }

  DeleteTunnelRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTunnelRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTunnelRsp& from);
  void MergeFrom(const DeleteTunnelRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTunnelRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.DeleteTunnelRsp";
  }
  protected:
  explicit DeleteTunnelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kStatusFieldNumber = 30,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // bool status = 30;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.DeleteTunnelRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class AddRbConfigureRsp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.AddRbConfigureRsp) */ {
 public:
  inline AddRbConfigureRsp() : AddRbConfigureRsp(nullptr) {}
  virtual ~AddRbConfigureRsp();

  AddRbConfigureRsp(const AddRbConfigureRsp& from);
  AddRbConfigureRsp(AddRbConfigureRsp&& from) noexcept
    : AddRbConfigureRsp() {
    *this = ::std::move(from);
  }

  inline AddRbConfigureRsp& operator=(const AddRbConfigureRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRbConfigureRsp& operator=(AddRbConfigureRsp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRbConfigureRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRbConfigureRsp* internal_default_instance() {
    return reinterpret_cast<const AddRbConfigureRsp*>(
               &_AddRbConfigureRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddRbConfigureRsp& a, AddRbConfigureRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRbConfigureRsp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRbConfigureRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRbConfigureRsp* New() const final {
    return CreateMaybeMessage<AddRbConfigureRsp>(nullptr);
  }

  AddRbConfigureRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRbConfigureRsp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRbConfigureRsp& from);
  void MergeFrom(const AddRbConfigureRsp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRbConfigureRsp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.AddRbConfigureRsp";
  }
  protected:
  explicit AddRbConfigureRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
    kCpUpHdrFieldNumber = 20,
    kStatusFieldNumber = 30,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // .structure.CpUpHdr cp_up_hdr = 20;
  bool has_cp_up_hdr() const;
  private:
  bool _internal_has_cp_up_hdr() const;
  public:
  void clear_cp_up_hdr();
  const ::structure::CpUpHdr& cp_up_hdr() const;
  ::structure::CpUpHdr* release_cp_up_hdr();
  ::structure::CpUpHdr* mutable_cp_up_hdr();
  void set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr);
  private:
  const ::structure::CpUpHdr& _internal_cp_up_hdr() const;
  ::structure::CpUpHdr* _internal_mutable_cp_up_hdr();
  public:
  void unsafe_arena_set_allocated_cp_up_hdr(
      ::structure::CpUpHdr* cp_up_hdr);
  ::structure::CpUpHdr* unsafe_arena_release_cp_up_hdr();

  // bool status = 30;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:srvCp.AddRbConfigureRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  ::structure::CpUpHdr* cp_up_hdr_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// -------------------------------------------------------------------

class CfmReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:srvCp.CfmReply) */ {
 public:
  inline CfmReply() : CfmReply(nullptr) {}
  virtual ~CfmReply();

  CfmReply(const CfmReply& from);
  CfmReply(CfmReply&& from) noexcept
    : CfmReply() {
    *this = ::std::move(from);
  }

  inline CfmReply& operator=(const CfmReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CfmReply& operator=(CfmReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CfmReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CfmReply* internal_default_instance() {
    return reinterpret_cast<const CfmReply*>(
               &_CfmReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CfmReply& a, CfmReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CfmReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CfmReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CfmReply* New() const final {
    return CreateMaybeMessage<CfmReply>(nullptr);
  }

  CfmReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CfmReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CfmReply& from);
  void MergeFrom(const CfmReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CfmReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "srvCp.CfmReply";
  }
  protected:
  explicit CfmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_srvCp_2eproto);
    return ::descriptor_table_srvCp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdrFieldNumber = 10,
  };
  // .mhdr.MsgHdr hdr = 10;
  bool has_hdr() const;
  private:
  bool _internal_has_hdr() const;
  public:
  void clear_hdr();
  const ::mhdr::MsgHdr& hdr() const;
  ::mhdr::MsgHdr* release_hdr();
  ::mhdr::MsgHdr* mutable_hdr();
  void set_allocated_hdr(::mhdr::MsgHdr* hdr);
  private:
  const ::mhdr::MsgHdr& _internal_hdr() const;
  ::mhdr::MsgHdr* _internal_mutable_hdr();
  public:
  void unsafe_arena_set_allocated_hdr(
      ::mhdr::MsgHdr* hdr);
  ::mhdr::MsgHdr* unsafe_arena_release_hdr();

  // @@protoc_insertion_point(class_scope:srvCp.CfmReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mhdr::MsgHdr* hdr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_srvCp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecurityConfigureRsp

// .mhdr.MsgHdr hdr = 10;
inline bool SecurityConfigureRsp::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool SecurityConfigureRsp::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& SecurityConfigureRsp::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& SecurityConfigureRsp::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigureRsp.hdr)
  return _internal_hdr();
}
inline void SecurityConfigureRsp::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.SecurityConfigureRsp.hdr)
}
inline ::mhdr::MsgHdr* SecurityConfigureRsp::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* SecurityConfigureRsp::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.SecurityConfigureRsp.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* SecurityConfigureRsp::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* SecurityConfigureRsp::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.SecurityConfigureRsp.hdr)
  return _internal_mutable_hdr();
}
inline void SecurityConfigureRsp::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.SecurityConfigureRsp.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool SecurityConfigureRsp::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool SecurityConfigureRsp::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& SecurityConfigureRsp::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& SecurityConfigureRsp::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigureRsp.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void SecurityConfigureRsp::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.SecurityConfigureRsp.cp_up_hdr)
}
inline ::structure::CpUpHdr* SecurityConfigureRsp::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* SecurityConfigureRsp::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.SecurityConfigureRsp.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* SecurityConfigureRsp::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* SecurityConfigureRsp::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.SecurityConfigureRsp.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void SecurityConfigureRsp::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.SecurityConfigureRsp.cp_up_hdr)
}

// bool status = 30;
inline void SecurityConfigureRsp::clear_status() {
  status_ = false;
}
inline bool SecurityConfigureRsp::_internal_status() const {
  return status_;
}
inline bool SecurityConfigureRsp::status() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigureRsp.status)
  return _internal_status();
}
inline void SecurityConfigureRsp::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void SecurityConfigureRsp::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvCp.SecurityConfigureRsp.status)
}

// string reason = 40;
inline void SecurityConfigureRsp::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SecurityConfigureRsp::reason() const {
  // @@protoc_insertion_point(field_get:srvCp.SecurityConfigureRsp.reason)
  return _internal_reason();
}
inline void SecurityConfigureRsp::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:srvCp.SecurityConfigureRsp.reason)
}
inline std::string* SecurityConfigureRsp::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:srvCp.SecurityConfigureRsp.reason)
  return _internal_mutable_reason();
}
inline const std::string& SecurityConfigureRsp::_internal_reason() const {
  return reason_.Get();
}
inline void SecurityConfigureRsp::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityConfigureRsp::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:srvCp.SecurityConfigureRsp.reason)
}
inline void SecurityConfigureRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:srvCp.SecurityConfigureRsp.reason)
}
inline void SecurityConfigureRsp::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:srvCp.SecurityConfigureRsp.reason)
}
inline std::string* SecurityConfigureRsp::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityConfigureRsp::release_reason() {
  // @@protoc_insertion_point(field_release:srvCp.SecurityConfigureRsp.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityConfigureRsp::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:srvCp.SecurityConfigureRsp.reason)
}

// -------------------------------------------------------------------

// CreateTunnelRsp

// .mhdr.MsgHdr hdr = 10;
inline bool CreateTunnelRsp::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool CreateTunnelRsp::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& CreateTunnelRsp::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& CreateTunnelRsp::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelRsp.hdr)
  return _internal_hdr();
}
inline void CreateTunnelRsp::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.CreateTunnelRsp.hdr)
}
inline ::mhdr::MsgHdr* CreateTunnelRsp::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* CreateTunnelRsp::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.CreateTunnelRsp.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* CreateTunnelRsp::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* CreateTunnelRsp::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.CreateTunnelRsp.hdr)
  return _internal_mutable_hdr();
}
inline void CreateTunnelRsp::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.CreateTunnelRsp.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool CreateTunnelRsp::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool CreateTunnelRsp::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& CreateTunnelRsp::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& CreateTunnelRsp::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelRsp.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void CreateTunnelRsp::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.CreateTunnelRsp.cp_up_hdr)
}
inline ::structure::CpUpHdr* CreateTunnelRsp::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* CreateTunnelRsp::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.CreateTunnelRsp.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* CreateTunnelRsp::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* CreateTunnelRsp::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.CreateTunnelRsp.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void CreateTunnelRsp::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.CreateTunnelRsp.cp_up_hdr)
}

// uint32 local_gtp_teid = 30;
inline void CreateTunnelRsp::clear_local_gtp_teid() {
  local_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelRsp::_internal_local_gtp_teid() const {
  return local_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelRsp::local_gtp_teid() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelRsp.local_gtp_teid)
  return _internal_local_gtp_teid();
}
inline void CreateTunnelRsp::_internal_set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  local_gtp_teid_ = value;
}
inline void CreateTunnelRsp::set_local_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_local_gtp_teid(value);
  // @@protoc_insertion_point(field_set:srvCp.CreateTunnelRsp.local_gtp_teid)
}

// uint32 remote_gtp_teid = 35;
inline void CreateTunnelRsp::clear_remote_gtp_teid() {
  remote_gtp_teid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelRsp::_internal_remote_gtp_teid() const {
  return remote_gtp_teid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateTunnelRsp::remote_gtp_teid() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelRsp.remote_gtp_teid)
  return _internal_remote_gtp_teid();
}
inline void CreateTunnelRsp::_internal_set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_gtp_teid_ = value;
}
inline void CreateTunnelRsp::set_remote_gtp_teid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_gtp_teid(value);
  // @@protoc_insertion_point(field_set:srvCp.CreateTunnelRsp.remote_gtp_teid)
}

// bool status = 40;
inline void CreateTunnelRsp::clear_status() {
  status_ = false;
}
inline bool CreateTunnelRsp::_internal_status() const {
  return status_;
}
inline bool CreateTunnelRsp::status() const {
  // @@protoc_insertion_point(field_get:srvCp.CreateTunnelRsp.status)
  return _internal_status();
}
inline void CreateTunnelRsp::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CreateTunnelRsp::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvCp.CreateTunnelRsp.status)
}

// -------------------------------------------------------------------

// ModifyTunnelRsp

// .mhdr.MsgHdr hdr = 10;
inline bool ModifyTunnelRsp::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool ModifyTunnelRsp::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& ModifyTunnelRsp::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& ModifyTunnelRsp::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelRsp.hdr)
  return _internal_hdr();
}
inline void ModifyTunnelRsp::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyTunnelRsp.hdr)
}
inline ::mhdr::MsgHdr* ModifyTunnelRsp::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* ModifyTunnelRsp::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyTunnelRsp.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* ModifyTunnelRsp::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* ModifyTunnelRsp::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyTunnelRsp.hdr)
  return _internal_mutable_hdr();
}
inline void ModifyTunnelRsp::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyTunnelRsp.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool ModifyTunnelRsp::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool ModifyTunnelRsp::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& ModifyTunnelRsp::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& ModifyTunnelRsp::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelRsp.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void ModifyTunnelRsp::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.ModifyTunnelRsp.cp_up_hdr)
}
inline ::structure::CpUpHdr* ModifyTunnelRsp::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* ModifyTunnelRsp::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.ModifyTunnelRsp.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* ModifyTunnelRsp::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* ModifyTunnelRsp::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.ModifyTunnelRsp.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void ModifyTunnelRsp::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.ModifyTunnelRsp.cp_up_hdr)
}

// bool status = 30;
inline void ModifyTunnelRsp::clear_status() {
  status_ = false;
}
inline bool ModifyTunnelRsp::_internal_status() const {
  return status_;
}
inline bool ModifyTunnelRsp::status() const {
  // @@protoc_insertion_point(field_get:srvCp.ModifyTunnelRsp.status)
  return _internal_status();
}
inline void ModifyTunnelRsp::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ModifyTunnelRsp::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvCp.ModifyTunnelRsp.status)
}

// -------------------------------------------------------------------

// DeleteTunnelRsp

// .mhdr.MsgHdr hdr = 10;
inline bool DeleteTunnelRsp::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool DeleteTunnelRsp::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& DeleteTunnelRsp::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& DeleteTunnelRsp::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelRsp.hdr)
  return _internal_hdr();
}
inline void DeleteTunnelRsp::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.DeleteTunnelRsp.hdr)
}
inline ::mhdr::MsgHdr* DeleteTunnelRsp::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* DeleteTunnelRsp::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.DeleteTunnelRsp.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* DeleteTunnelRsp::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* DeleteTunnelRsp::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteTunnelRsp.hdr)
  return _internal_mutable_hdr();
}
inline void DeleteTunnelRsp::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.DeleteTunnelRsp.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool DeleteTunnelRsp::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool DeleteTunnelRsp::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& DeleteTunnelRsp::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& DeleteTunnelRsp::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelRsp.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void DeleteTunnelRsp::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.DeleteTunnelRsp.cp_up_hdr)
}
inline ::structure::CpUpHdr* DeleteTunnelRsp::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* DeleteTunnelRsp::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.DeleteTunnelRsp.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* DeleteTunnelRsp::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* DeleteTunnelRsp::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.DeleteTunnelRsp.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void DeleteTunnelRsp::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.DeleteTunnelRsp.cp_up_hdr)
}

// bool status = 30;
inline void DeleteTunnelRsp::clear_status() {
  status_ = false;
}
inline bool DeleteTunnelRsp::_internal_status() const {
  return status_;
}
inline bool DeleteTunnelRsp::status() const {
  // @@protoc_insertion_point(field_get:srvCp.DeleteTunnelRsp.status)
  return _internal_status();
}
inline void DeleteTunnelRsp::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void DeleteTunnelRsp::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvCp.DeleteTunnelRsp.status)
}

// -------------------------------------------------------------------

// AddRbConfigureRsp

// .mhdr.MsgHdr hdr = 10;
inline bool AddRbConfigureRsp::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool AddRbConfigureRsp::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& AddRbConfigureRsp::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& AddRbConfigureRsp::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigureRsp.hdr)
  return _internal_hdr();
}
inline void AddRbConfigureRsp::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddRbConfigureRsp.hdr)
}
inline ::mhdr::MsgHdr* AddRbConfigureRsp::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* AddRbConfigureRsp::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.AddRbConfigureRsp.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* AddRbConfigureRsp::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* AddRbConfigureRsp::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddRbConfigureRsp.hdr)
  return _internal_mutable_hdr();
}
inline void AddRbConfigureRsp::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddRbConfigureRsp.hdr)
}

// .structure.CpUpHdr cp_up_hdr = 20;
inline bool AddRbConfigureRsp::_internal_has_cp_up_hdr() const {
  return this != internal_default_instance() && cp_up_hdr_ != nullptr;
}
inline bool AddRbConfigureRsp::has_cp_up_hdr() const {
  return _internal_has_cp_up_hdr();
}
inline const ::structure::CpUpHdr& AddRbConfigureRsp::_internal_cp_up_hdr() const {
  const ::structure::CpUpHdr* p = cp_up_hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::structure::CpUpHdr*>(
      &::structure::_CpUpHdr_default_instance_);
}
inline const ::structure::CpUpHdr& AddRbConfigureRsp::cp_up_hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigureRsp.cp_up_hdr)
  return _internal_cp_up_hdr();
}
inline void AddRbConfigureRsp::unsafe_arena_set_allocated_cp_up_hdr(
    ::structure::CpUpHdr* cp_up_hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  cp_up_hdr_ = cp_up_hdr;
  if (cp_up_hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.AddRbConfigureRsp.cp_up_hdr)
}
inline ::structure::CpUpHdr* AddRbConfigureRsp::release_cp_up_hdr() {
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::structure::CpUpHdr* AddRbConfigureRsp::unsafe_arena_release_cp_up_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.AddRbConfigureRsp.cp_up_hdr)
  
  ::structure::CpUpHdr* temp = cp_up_hdr_;
  cp_up_hdr_ = nullptr;
  return temp;
}
inline ::structure::CpUpHdr* AddRbConfigureRsp::_internal_mutable_cp_up_hdr() {
  
  if (cp_up_hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::structure::CpUpHdr>(GetArena());
    cp_up_hdr_ = p;
  }
  return cp_up_hdr_;
}
inline ::structure::CpUpHdr* AddRbConfigureRsp::mutable_cp_up_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.AddRbConfigureRsp.cp_up_hdr)
  return _internal_mutable_cp_up_hdr();
}
inline void AddRbConfigureRsp::set_allocated_cp_up_hdr(::structure::CpUpHdr* cp_up_hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr_);
  }
  if (cp_up_hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cp_up_hdr)->GetArena();
    if (message_arena != submessage_arena) {
      cp_up_hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cp_up_hdr, submessage_arena);
    }
    
  } else {
    
  }
  cp_up_hdr_ = cp_up_hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.AddRbConfigureRsp.cp_up_hdr)
}

// bool status = 30;
inline void AddRbConfigureRsp::clear_status() {
  status_ = false;
}
inline bool AddRbConfigureRsp::_internal_status() const {
  return status_;
}
inline bool AddRbConfigureRsp::status() const {
  // @@protoc_insertion_point(field_get:srvCp.AddRbConfigureRsp.status)
  return _internal_status();
}
inline void AddRbConfigureRsp::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void AddRbConfigureRsp::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:srvCp.AddRbConfigureRsp.status)
}

// -------------------------------------------------------------------

// CfmReply

// .mhdr.MsgHdr hdr = 10;
inline bool CfmReply::_internal_has_hdr() const {
  return this != internal_default_instance() && hdr_ != nullptr;
}
inline bool CfmReply::has_hdr() const {
  return _internal_has_hdr();
}
inline const ::mhdr::MsgHdr& CfmReply::_internal_hdr() const {
  const ::mhdr::MsgHdr* p = hdr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mhdr::MsgHdr*>(
      &::mhdr::_MsgHdr_default_instance_);
}
inline const ::mhdr::MsgHdr& CfmReply::hdr() const {
  // @@protoc_insertion_point(field_get:srvCp.CfmReply.hdr)
  return _internal_hdr();
}
inline void CfmReply::unsafe_arena_set_allocated_hdr(
    ::mhdr::MsgHdr* hdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  hdr_ = hdr;
  if (hdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:srvCp.CfmReply.hdr)
}
inline ::mhdr::MsgHdr* CfmReply::release_hdr() {
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mhdr::MsgHdr* CfmReply::unsafe_arena_release_hdr() {
  // @@protoc_insertion_point(field_release:srvCp.CfmReply.hdr)
  
  ::mhdr::MsgHdr* temp = hdr_;
  hdr_ = nullptr;
  return temp;
}
inline ::mhdr::MsgHdr* CfmReply::_internal_mutable_hdr() {
  
  if (hdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::mhdr::MsgHdr>(GetArena());
    hdr_ = p;
  }
  return hdr_;
}
inline ::mhdr::MsgHdr* CfmReply::mutable_hdr() {
  // @@protoc_insertion_point(field_mutable:srvCp.CfmReply.hdr)
  return _internal_mutable_hdr();
}
inline void CfmReply::set_allocated_hdr(::mhdr::MsgHdr* hdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr_);
  }
  if (hdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hdr)->GetArena();
    if (message_arena != submessage_arena) {
      hdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hdr, submessage_arena);
    }
    
  } else {
    
  }
  hdr_ = hdr;
  // @@protoc_insertion_point(field_set_allocated:srvCp.CfmReply.hdr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srvCp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::srvCp::method> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srvCp::method>() {
  return ::srvCp::method_descriptor();
}
template <> struct is_proto_enum< ::srvCp::version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::srvCp::version>() {
  return ::srvCp::version_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_srvCp_2eproto
