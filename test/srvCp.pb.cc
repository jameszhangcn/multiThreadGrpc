// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvCp.proto

#include "srvCp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgHdr_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpUpHdr_structure_2eproto;
namespace srvCp {
class SecurityConfigureRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityConfigureRsp> _instance;
} _SecurityConfigureRsp_default_instance_;
class CreateTunnelRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTunnelRsp> _instance;
} _CreateTunnelRsp_default_instance_;
class ModifyTunnelRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyTunnelRsp> _instance;
} _ModifyTunnelRsp_default_instance_;
class DeleteTunnelRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTunnelRsp> _instance;
} _DeleteTunnelRsp_default_instance_;
class AddRbConfigureRspDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRbConfigureRsp> _instance;
} _AddRbConfigureRsp_default_instance_;
class CfmReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CfmReply> _instance;
} _CfmReply_default_instance_;
}  // namespace srvCp
static void InitDefaultsscc_info_AddRbConfigureRsp_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_AddRbConfigureRsp_default_instance_;
    new (ptr) ::srvCp::AddRbConfigureRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::AddRbConfigureRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddRbConfigureRsp_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddRbConfigureRsp_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_CfmReply_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_CfmReply_default_instance_;
    new (ptr) ::srvCp::CfmReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::CfmReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CfmReply_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CfmReply_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,}};

static void InitDefaultsscc_info_CreateTunnelRsp_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_CreateTunnelRsp_default_instance_;
    new (ptr) ::srvCp::CreateTunnelRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::CreateTunnelRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateTunnelRsp_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateTunnelRsp_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_DeleteTunnelRsp_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_DeleteTunnelRsp_default_instance_;
    new (ptr) ::srvCp::DeleteTunnelRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::DeleteTunnelRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteTunnelRsp_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteTunnelRsp_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyTunnelRsp_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_ModifyTunnelRsp_default_instance_;
    new (ptr) ::srvCp::ModifyTunnelRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::ModifyTunnelRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModifyTunnelRsp_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModifyTunnelRsp_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_SecurityConfigureRsp_srvCp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvCp::_SecurityConfigureRsp_default_instance_;
    new (ptr) ::srvCp::SecurityConfigureRsp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvCp::SecurityConfigureRsp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SecurityConfigureRsp_srvCp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SecurityConfigureRsp_srvCp_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srvCp_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_srvCp_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srvCp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srvCp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigureRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigureRsp, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigureRsp, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigureRsp, status_),
  PROTOBUF_FIELD_OFFSET(::srvCp::SecurityConfigureRsp, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelRsp, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelRsp, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelRsp, local_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelRsp, remote_gtp_teid_),
  PROTOBUF_FIELD_OFFSET(::srvCp::CreateTunnelRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelRsp, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelRsp, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::ModifyTunnelRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelRsp, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelRsp, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::DeleteTunnelRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigureRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigureRsp, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigureRsp, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvCp::AddRbConfigureRsp, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvCp::CfmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvCp::CfmReply, hdr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srvCp::SecurityConfigureRsp)},
  { 9, -1, sizeof(::srvCp::CreateTunnelRsp)},
  { 19, -1, sizeof(::srvCp::ModifyTunnelRsp)},
  { 27, -1, sizeof(::srvCp::DeleteTunnelRsp)},
  { 35, -1, sizeof(::srvCp::AddRbConfigureRsp)},
  { 43, -1, sizeof(::srvCp::CfmReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_SecurityConfigureRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_CreateTunnelRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_ModifyTunnelRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_DeleteTunnelRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_AddRbConfigureRsp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvCp::_CfmReply_default_instance_),
};

const char descriptor_table_protodef_srvCp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013srvCp.proto\022\005srvCp\032\nmhdr.proto\032\017struct"
  "ure.proto\"x\n\024SecurityConfigureRsp\022\031\n\003hdr"
  "\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132"
  "\022.structure.CpUpHdr\022\016\n\006status\030\036 \001(\010\022\016\n\006r"
  "eason\030( \001(\t\"\224\001\n\017CreateTunnelRsp\022\031\n\003hdr\030\n"
  " \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022."
  "structure.CpUpHdr\022\026\n\016local_gtp_teid\030\036 \001("
  "\r\022\027\n\017remote_gtp_teid\030# \001(\r\022\016\n\006status\030( \001"
  "(\010\"c\n\017ModifyTunnelRsp\022\031\n\003hdr\030\n \001(\0132\014.mhd"
  "r.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure."
  "CpUpHdr\022\016\n\006status\030\036 \001(\010\"c\n\017DeleteTunnelR"
  "sp\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_h"
  "dr\030\024 \001(\0132\022.structure.CpUpHdr\022\016\n\006status\030\036"
  " \001(\010\"e\n\021AddRbConfigureRsp\022\031\n\003hdr\030\n \001(\0132\014"
  ".mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.struct"
  "ure.CpUpHdr\022\016\n\006status\030\036 \001(\010\"%\n\010CfmReply\022"
  "\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr*\314\001\n\006method\022\021\n"
  "\rMethodUnknown\020\000\022!\n\035MethodSecurityConfig"
  "ureCfmReq\020\001\022\034\n\030MethodCreateTunnelCfmReq\020"
  "\002\022\034\n\030MethodModifyTunnelCfmReq\020\003\022\034\n\030Metho"
  "dDeleteTunnelCfmReq\020\004\022\036\n\032MethodAddRbConf"
  "igureCfmReq\020\005\022\022\n\016MethodCfmReply\020\006*\"\n\007ver"
  "sion\022\016\n\nVerUnknown\020\000\022\007\n\003Ver\020\0012\310\002\n\002Cp\022F\n\024"
  "SecurityConfigureCfm\022\033.srvCp.SecurityCon"
  "figureRsp\032\017.srvCp.CfmReply\"\000\022<\n\017CreateTu"
  "nnelCfm\022\026.srvCp.CreateTunnelRsp\032\017.srvCp."
  "CfmReply\"\000\022<\n\017ModifyTunnelCfm\022\026.srvCp.Mo"
  "difyTunnelRsp\032\017.srvCp.CfmReply\"\000\022<\n\017Dele"
  "teTunnelCfm\022\026.srvCp.DeleteTunnelRsp\032\017.sr"
  "vCp.CfmReply\"\000\022@\n\021AddRbConfigureCfm\022\030.sr"
  "vCp.AddRbConfigureRsp\032\017.srvCp.CfmReply\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srvCp_2eproto_deps[2] = {
  &::descriptor_table_mhdr_2eproto,
  &::descriptor_table_structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srvCp_2eproto_sccs[6] = {
  &scc_info_AddRbConfigureRsp_srvCp_2eproto.base,
  &scc_info_CfmReply_srvCp_2eproto.base,
  &scc_info_CreateTunnelRsp_srvCp_2eproto.base,
  &scc_info_DeleteTunnelRsp_srvCp_2eproto.base,
  &scc_info_ModifyTunnelRsp_srvCp_2eproto.base,
  &scc_info_SecurityConfigureRsp_srvCp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srvCp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvCp_2eproto = {
  false, false, descriptor_table_protodef_srvCp_2eproto, "srvCp.proto", 1248,
  &descriptor_table_srvCp_2eproto_once, descriptor_table_srvCp_2eproto_sccs, descriptor_table_srvCp_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_srvCp_2eproto::offsets,
  file_level_metadata_srvCp_2eproto, 6, file_level_enum_descriptors_srvCp_2eproto, file_level_service_descriptors_srvCp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srvCp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srvCp_2eproto)), true);
namespace srvCp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvCp_2eproto);
  return file_level_enum_descriptors_srvCp_2eproto[0];
}
bool method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvCp_2eproto);
  return file_level_enum_descriptors_srvCp_2eproto[1];
}
bool version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SecurityConfigureRsp::InitAsDefaultInstance() {
  ::srvCp::_SecurityConfigureRsp_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_SecurityConfigureRsp_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class SecurityConfigureRsp::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const SecurityConfigureRsp* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const SecurityConfigureRsp* msg);
};

const ::mhdr::MsgHdr&
SecurityConfigureRsp::_Internal::hdr(const SecurityConfigureRsp* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
SecurityConfigureRsp::_Internal::cp_up_hdr(const SecurityConfigureRsp* msg) {
  return *msg->cp_up_hdr_;
}
void SecurityConfigureRsp::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void SecurityConfigureRsp::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
SecurityConfigureRsp::SecurityConfigureRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.SecurityConfigureRsp)
}
SecurityConfigureRsp::SecurityConfigureRsp(const SecurityConfigureRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
      GetArena());
  }
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:srvCp.SecurityConfigureRsp)
}

void SecurityConfigureRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityConfigureRsp_srvCp_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(status_));
}

SecurityConfigureRsp::~SecurityConfigureRsp() {
  // @@protoc_insertion_point(destructor:srvCp.SecurityConfigureRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfigureRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void SecurityConfigureRsp::ArenaDtor(void* object) {
  SecurityConfigureRsp* _this = reinterpret_cast< SecurityConfigureRsp* >(object);
  (void)_this;
}
void SecurityConfigureRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfigureRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityConfigureRsp& SecurityConfigureRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityConfigureRsp_srvCp_2eproto.base);
  return *internal_default_instance();
}


void SecurityConfigureRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.SecurityConfigureRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfigureRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "srvCp.SecurityConfigureRsp.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfigureRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.SecurityConfigureRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool status = 30;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status(), target);
  }

  // string reason = 40;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "srvCp.SecurityConfigureRsp.reason");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.SecurityConfigureRsp)
  return target;
}

size_t SecurityConfigureRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.SecurityConfigureRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 40;
  if (this->reason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // bool status = 30;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfigureRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.SecurityConfigureRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfigureRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfigureRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.SecurityConfigureRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.SecurityConfigureRsp)
    MergeFrom(*source);
  }
}

void SecurityConfigureRsp::MergeFrom(const SecurityConfigureRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.SecurityConfigureRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {
    _internal_set_reason(from._internal_reason());
  }
  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SecurityConfigureRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.SecurityConfigureRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfigureRsp::CopyFrom(const SecurityConfigureRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.SecurityConfigureRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfigureRsp::IsInitialized() const {
  return true;
}

void SecurityConfigureRsp::InternalSwap(SecurityConfigureRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityConfigureRsp, status_)
      + sizeof(SecurityConfigureRsp::status_)
      - PROTOBUF_FIELD_OFFSET(SecurityConfigureRsp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfigureRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTunnelRsp::InitAsDefaultInstance() {
  ::srvCp::_CreateTunnelRsp_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_CreateTunnelRsp_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class CreateTunnelRsp::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const CreateTunnelRsp* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const CreateTunnelRsp* msg);
};

const ::mhdr::MsgHdr&
CreateTunnelRsp::_Internal::hdr(const CreateTunnelRsp* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
CreateTunnelRsp::_Internal::cp_up_hdr(const CreateTunnelRsp* msg) {
  return *msg->cp_up_hdr_;
}
void CreateTunnelRsp::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void CreateTunnelRsp::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
CreateTunnelRsp::CreateTunnelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.CreateTunnelRsp)
}
CreateTunnelRsp::CreateTunnelRsp(const CreateTunnelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_gtp_teid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(remote_gtp_teid_));
  // @@protoc_insertion_point(copy_constructor:srvCp.CreateTunnelRsp)
}

void CreateTunnelRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTunnelRsp_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_gtp_teid_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(remote_gtp_teid_));
}

CreateTunnelRsp::~CreateTunnelRsp() {
  // @@protoc_insertion_point(destructor:srvCp.CreateTunnelRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTunnelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void CreateTunnelRsp::ArenaDtor(void* object) {
  CreateTunnelRsp* _this = reinterpret_cast< CreateTunnelRsp* >(object);
  (void)_this;
}
void CreateTunnelRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTunnelRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTunnelRsp& CreateTunnelRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTunnelRsp_srvCp_2eproto.base);
  return *internal_default_instance();
}


void CreateTunnelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.CreateTunnelRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_gtp_teid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(remote_gtp_teid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTunnelRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 local_gtp_teid = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          local_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_gtp_teid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remote_gtp_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTunnelRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.CreateTunnelRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_local_gtp_teid(), target);
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_remote_gtp_teid(), target);
  }

  // bool status = 40;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.CreateTunnelRsp)
  return target;
}

size_t CreateTunnelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.CreateTunnelRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // bool status = 40;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  // uint32 local_gtp_teid = 30;
  if (this->local_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_local_gtp_teid());
  }

  // uint32 remote_gtp_teid = 35;
  if (this->remote_gtp_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_gtp_teid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTunnelRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.CreateTunnelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTunnelRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTunnelRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.CreateTunnelRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.CreateTunnelRsp)
    MergeFrom(*source);
  }
}

void CreateTunnelRsp::MergeFrom(const CreateTunnelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.CreateTunnelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.local_gtp_teid() != 0) {
    _internal_set_local_gtp_teid(from._internal_local_gtp_teid());
  }
  if (from.remote_gtp_teid() != 0) {
    _internal_set_remote_gtp_teid(from._internal_remote_gtp_teid());
  }
}

void CreateTunnelRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.CreateTunnelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTunnelRsp::CopyFrom(const CreateTunnelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.CreateTunnelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTunnelRsp::IsInitialized() const {
  return true;
}

void CreateTunnelRsp::InternalSwap(CreateTunnelRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTunnelRsp, remote_gtp_teid_)
      + sizeof(CreateTunnelRsp::remote_gtp_teid_)
      - PROTOBUF_FIELD_OFFSET(CreateTunnelRsp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTunnelRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyTunnelRsp::InitAsDefaultInstance() {
  ::srvCp::_ModifyTunnelRsp_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_ModifyTunnelRsp_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class ModifyTunnelRsp::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyTunnelRsp* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyTunnelRsp* msg);
};

const ::mhdr::MsgHdr&
ModifyTunnelRsp::_Internal::hdr(const ModifyTunnelRsp* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyTunnelRsp::_Internal::cp_up_hdr(const ModifyTunnelRsp* msg) {
  return *msg->cp_up_hdr_;
}
void ModifyTunnelRsp::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyTunnelRsp::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
ModifyTunnelRsp::ModifyTunnelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.ModifyTunnelRsp)
}
ModifyTunnelRsp::ModifyTunnelRsp(const ModifyTunnelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:srvCp.ModifyTunnelRsp)
}

void ModifyTunnelRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyTunnelRsp_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(status_));
}

ModifyTunnelRsp::~ModifyTunnelRsp() {
  // @@protoc_insertion_point(destructor:srvCp.ModifyTunnelRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTunnelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void ModifyTunnelRsp::ArenaDtor(void* object) {
  ModifyTunnelRsp* _this = reinterpret_cast< ModifyTunnelRsp* >(object);
  (void)_this;
}
void ModifyTunnelRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTunnelRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyTunnelRsp& ModifyTunnelRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyTunnelRsp_srvCp_2eproto.base);
  return *internal_default_instance();
}


void ModifyTunnelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.ModifyTunnelRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTunnelRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTunnelRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.ModifyTunnelRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool status = 30;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.ModifyTunnelRsp)
  return target;
}

size_t ModifyTunnelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.ModifyTunnelRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // bool status = 30;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTunnelRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.ModifyTunnelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTunnelRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTunnelRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.ModifyTunnelRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.ModifyTunnelRsp)
    MergeFrom(*source);
  }
}

void ModifyTunnelRsp::MergeFrom(const ModifyTunnelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.ModifyTunnelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ModifyTunnelRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.ModifyTunnelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTunnelRsp::CopyFrom(const ModifyTunnelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.ModifyTunnelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTunnelRsp::IsInitialized() const {
  return true;
}

void ModifyTunnelRsp::InternalSwap(ModifyTunnelRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTunnelRsp, status_)
      + sizeof(ModifyTunnelRsp::status_)
      - PROTOBUF_FIELD_OFFSET(ModifyTunnelRsp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTunnelRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTunnelRsp::InitAsDefaultInstance() {
  ::srvCp::_DeleteTunnelRsp_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_DeleteTunnelRsp_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DeleteTunnelRsp::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DeleteTunnelRsp* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DeleteTunnelRsp* msg);
};

const ::mhdr::MsgHdr&
DeleteTunnelRsp::_Internal::hdr(const DeleteTunnelRsp* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DeleteTunnelRsp::_Internal::cp_up_hdr(const DeleteTunnelRsp* msg) {
  return *msg->cp_up_hdr_;
}
void DeleteTunnelRsp::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DeleteTunnelRsp::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
DeleteTunnelRsp::DeleteTunnelRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.DeleteTunnelRsp)
}
DeleteTunnelRsp::DeleteTunnelRsp(const DeleteTunnelRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:srvCp.DeleteTunnelRsp)
}

void DeleteTunnelRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTunnelRsp_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(status_));
}

DeleteTunnelRsp::~DeleteTunnelRsp() {
  // @@protoc_insertion_point(destructor:srvCp.DeleteTunnelRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTunnelRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DeleteTunnelRsp::ArenaDtor(void* object) {
  DeleteTunnelRsp* _this = reinterpret_cast< DeleteTunnelRsp* >(object);
  (void)_this;
}
void DeleteTunnelRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTunnelRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTunnelRsp& DeleteTunnelRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTunnelRsp_srvCp_2eproto.base);
  return *internal_default_instance();
}


void DeleteTunnelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.DeleteTunnelRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTunnelRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTunnelRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.DeleteTunnelRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool status = 30;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.DeleteTunnelRsp)
  return target;
}

size_t DeleteTunnelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.DeleteTunnelRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // bool status = 30;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTunnelRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.DeleteTunnelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTunnelRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTunnelRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.DeleteTunnelRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.DeleteTunnelRsp)
    MergeFrom(*source);
  }
}

void DeleteTunnelRsp::MergeFrom(const DeleteTunnelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.DeleteTunnelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DeleteTunnelRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.DeleteTunnelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTunnelRsp::CopyFrom(const DeleteTunnelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.DeleteTunnelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTunnelRsp::IsInitialized() const {
  return true;
}

void DeleteTunnelRsp::InternalSwap(DeleteTunnelRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteTunnelRsp, status_)
      + sizeof(DeleteTunnelRsp::status_)
      - PROTOBUF_FIELD_OFFSET(DeleteTunnelRsp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTunnelRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRbConfigureRsp::InitAsDefaultInstance() {
  ::srvCp::_AddRbConfigureRsp_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvCp::_AddRbConfigureRsp_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class AddRbConfigureRsp::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const AddRbConfigureRsp* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const AddRbConfigureRsp* msg);
};

const ::mhdr::MsgHdr&
AddRbConfigureRsp::_Internal::hdr(const AddRbConfigureRsp* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
AddRbConfigureRsp::_Internal::cp_up_hdr(const AddRbConfigureRsp* msg) {
  return *msg->cp_up_hdr_;
}
void AddRbConfigureRsp::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void AddRbConfigureRsp::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
AddRbConfigureRsp::AddRbConfigureRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.AddRbConfigureRsp)
}
AddRbConfigureRsp::AddRbConfigureRsp(const AddRbConfigureRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:srvCp.AddRbConfigureRsp)
}

void AddRbConfigureRsp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRbConfigureRsp_srvCp_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(status_));
}

AddRbConfigureRsp::~AddRbConfigureRsp() {
  // @@protoc_insertion_point(destructor:srvCp.AddRbConfigureRsp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRbConfigureRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void AddRbConfigureRsp::ArenaDtor(void* object) {
  AddRbConfigureRsp* _this = reinterpret_cast< AddRbConfigureRsp* >(object);
  (void)_this;
}
void AddRbConfigureRsp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRbConfigureRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRbConfigureRsp& AddRbConfigureRsp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRbConfigureRsp_srvCp_2eproto.base);
  return *internal_default_instance();
}


void AddRbConfigureRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.AddRbConfigureRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRbConfigureRsp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRbConfigureRsp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.AddRbConfigureRsp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // bool status = 30;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.AddRbConfigureRsp)
  return target;
}

size_t AddRbConfigureRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.AddRbConfigureRsp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // bool status = 30;
  if (this->status() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRbConfigureRsp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.AddRbConfigureRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRbConfigureRsp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRbConfigureRsp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.AddRbConfigureRsp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.AddRbConfigureRsp)
    MergeFrom(*source);
  }
}

void AddRbConfigureRsp::MergeFrom(const AddRbConfigureRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.AddRbConfigureRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void AddRbConfigureRsp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.AddRbConfigureRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRbConfigureRsp::CopyFrom(const AddRbConfigureRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.AddRbConfigureRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRbConfigureRsp::IsInitialized() const {
  return true;
}

void AddRbConfigureRsp::InternalSwap(AddRbConfigureRsp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRbConfigureRsp, status_)
      + sizeof(AddRbConfigureRsp::status_)
      - PROTOBUF_FIELD_OFFSET(AddRbConfigureRsp, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRbConfigureRsp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CfmReply::InitAsDefaultInstance() {
  ::srvCp::_CfmReply_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
}
class CfmReply::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const CfmReply* msg);
};

const ::mhdr::MsgHdr&
CfmReply::_Internal::hdr(const CfmReply* msg) {
  return *msg->hdr_;
}
void CfmReply::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
CfmReply::CfmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvCp.CfmReply)
}
CfmReply::CfmReply(const CfmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvCp.CfmReply)
}

void CfmReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CfmReply_srvCp_2eproto.base);
  hdr_ = nullptr;
}

CfmReply::~CfmReply() {
  // @@protoc_insertion_point(destructor:srvCp.CfmReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CfmReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void CfmReply::ArenaDtor(void* object) {
  CfmReply* _this = reinterpret_cast< CfmReply* >(object);
  (void)_this;
}
void CfmReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CfmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CfmReply& CfmReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CfmReply_srvCp_2eproto.base);
  return *internal_default_instance();
}


void CfmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:srvCp.CfmReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CfmReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CfmReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvCp.CfmReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvCp.CfmReply)
  return target;
}

size_t CfmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvCp.CfmReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CfmReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvCp.CfmReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CfmReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CfmReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvCp.CfmReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvCp.CfmReply)
    MergeFrom(*source);
  }
}

void CfmReply::MergeFrom(const CfmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvCp.CfmReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
}

void CfmReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvCp.CfmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CfmReply::CopyFrom(const CfmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvCp.CfmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CfmReply::IsInitialized() const {
  return true;
}

void CfmReply::InternalSwap(CfmReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hdr_, other->hdr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CfmReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srvCp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srvCp::SecurityConfigureRsp* Arena::CreateMaybeMessage< ::srvCp::SecurityConfigureRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::SecurityConfigureRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::CreateTunnelRsp* Arena::CreateMaybeMessage< ::srvCp::CreateTunnelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::CreateTunnelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::ModifyTunnelRsp* Arena::CreateMaybeMessage< ::srvCp::ModifyTunnelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::ModifyTunnelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::DeleteTunnelRsp* Arena::CreateMaybeMessage< ::srvCp::DeleteTunnelRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::DeleteTunnelRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::AddRbConfigureRsp* Arena::CreateMaybeMessage< ::srvCp::AddRbConfigureRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::AddRbConfigureRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::srvCp::CfmReply* Arena::CreateMaybeMessage< ::srvCp::CfmReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvCp::CfmReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
