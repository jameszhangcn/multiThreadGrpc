// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace common {
class IpAddress;
class IpAddressDefaultTypeInternal;
extern IpAddressDefaultTypeInternal _IpAddress_default_instance_;
class SctpCntrlInfo;
class SctpCntrlInfoDefaultTypeInternal;
extern SctpCntrlInfoDefaultTypeInternal _SctpCntrlInfo_default_instance_;
class SctpEndpoint;
class SctpEndpointDefaultTypeInternal;
extern SctpEndpointDefaultTypeInternal _SctpEndpoint_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::IpAddress* Arena::CreateMaybeMessage<::common::IpAddress>(Arena*);
template<> ::common::SctpCntrlInfo* Arena::CreateMaybeMessage<::common::SctpCntrlInfo>(Arena*);
template<> ::common::SctpEndpoint* Arena::CreateMaybeMessage<::common::SctpEndpoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum SctpUser : int {
  X2AP = 0,
  NGAP = 1,
  XNAP = 2,
  F1AP = 3,
  E1AP = 4,
  UNDEFINED = 5,
  SctpUser_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SctpUser_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SctpUser_IsValid(int value);
constexpr SctpUser SctpUser_MIN = X2AP;
constexpr SctpUser SctpUser_MAX = UNDEFINED;
constexpr int SctpUser_ARRAYSIZE = SctpUser_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SctpUser_descriptor();
template<typename T>
inline const std::string& SctpUser_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SctpUser>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SctpUser_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SctpUser_descriptor(), enum_t_value);
}
inline bool SctpUser_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SctpUser* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SctpUser>(
    SctpUser_descriptor(), name, value);
}
enum IpAddressType : int {
  IPV4 = 0,
  IPV6 = 1,
  IpAddressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IpAddressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IpAddressType_IsValid(int value);
constexpr IpAddressType IpAddressType_MIN = IPV4;
constexpr IpAddressType IpAddressType_MAX = IPV6;
constexpr int IpAddressType_ARRAYSIZE = IpAddressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpAddressType_descriptor();
template<typename T>
inline const std::string& IpAddressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IpAddressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IpAddressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IpAddressType_descriptor(), enum_t_value);
}
inline bool IpAddressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IpAddressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IpAddressType>(
    IpAddressType_descriptor(), name, value);
}
enum MsgType : int {
  INVALID_MSG_TYPE = 0,
  CU_CP_E1_RESET = 1,
  CU_CP_E1_RESET_ACK = 2,
  CU_UP_E1_RESET = 3,
  CU_UP_E1_RESET_ACK = 4,
  CU_CP_ERROR_INDICATION = 5,
  CU_UP_ERROR_INDICATION = 6,
  CU_CP_E1_SETUP_REQUEST = 7,
  CU_CP_E1_SETUP_RESPONSE = 8,
  CU_CP_E1_SETUP_FAILURE = 9,
  CU_UP_E1_SETUP_REQUEST = 10,
  CU_UP_E1_SETUP_RESPONSE = 11,
  CU_UP_E1_SETUP_FAILURE = 12,
  CU_CP_CONFIGURATION_UPDATE = 13,
  CU_CP_CONFIGURATION_UPDATE_ACK = 14,
  CU_CP_CONFIGURATION_UPDATE_FAILURE = 15,
  CU_UP_CONFIGURATION_UPDATE = 16,
  CU_UP_CONFIGURATION_UPDATE_ACK = 17,
  CU_UP_CONFIGURATION_UPDATE_FAILURE = 18,
  CU_CP_E1_RELEASE_REQUEST = 19,
  CU_CP_E1_RELEASE_RESPONSE = 20,
  CU_UP_E1_RELEASE_REQUEST = 21,
  CU_UP_E1_RELEASE_RESPONSE = 22,
  CU_UP_STATUS_INDICATION = 23,
  BEARER_CONTEXT_SETUP_REQUEST = 24,
  BEARER_CONTEXT_SETUP_RESPONSE = 25,
  BEARER_CONTEXT_SETUP_FAILURE = 26,
  BEARER_CONTEXT_MODIFY_REQUEST = 27,
  BEARER_CONTEXT_MODIFY_RESPONSE = 28,
  BEARER_CONTEXT_MODIFY_FAILURE = 29,
  BEARER_CONTEXT_MODIFY_REQUIRED = 30,
  BEARER_CONTEXT_MODIFY_CONFIRM = 31,
  BEARER_CONTEXT_RELEASE_COMMAND = 32,
  BEARER_CONTEXT_RELEASE_COMPLETE = 33,
  BEARER_CONTEXT_RELEASE_REQUEST = 34,
  BEARER_CONTEXT_INACTIVITY_NOTIFICATION = 35,
  DL_DATA_NOTIFICATION = 36,
  DATA_USAGE_REPORT = 37,
  CU_UP_COUNTER_CHECK_REQUEST = 38,
  UL_DATA_NOTIFICATION = 39,
  MR_DC_DATA_USAGE_REPORT = 40,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = INVALID_MSG_TYPE;
constexpr MsgType MsgType_MAX = MR_DC_DATA_USAGE_REPORT;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class SctpCntrlInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SctpCntrlInfo) */ {
 public:
  inline SctpCntrlInfo() : SctpCntrlInfo(nullptr) {}
  virtual ~SctpCntrlInfo();

  SctpCntrlInfo(const SctpCntrlInfo& from);
  SctpCntrlInfo(SctpCntrlInfo&& from) noexcept
    : SctpCntrlInfo() {
    *this = ::std::move(from);
  }

  inline SctpCntrlInfo& operator=(const SctpCntrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SctpCntrlInfo& operator=(SctpCntrlInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SctpCntrlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SctpCntrlInfo* internal_default_instance() {
    return reinterpret_cast<const SctpCntrlInfo*>(
               &_SctpCntrlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SctpCntrlInfo& a, SctpCntrlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SctpCntrlInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SctpCntrlInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SctpCntrlInfo* New() const final {
    return CreateMaybeMessage<SctpCntrlInfo>(nullptr);
  }

  SctpCntrlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SctpCntrlInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SctpCntrlInfo& from);
  void MergeFrom(const SctpCntrlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SctpCntrlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SctpCntrlInfo";
  }
  protected:
  explicit SctpCntrlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssocIdFieldNumber = 30,
    kSctpUserFieldNumber = 10,
    kRefIdFieldNumber = 20,
  };
  // uint32 assoc_id = 30;
  void clear_assoc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 assoc_id() const;
  void set_assoc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_assoc_id() const;
  void _internal_set_assoc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .common.SctpUser sctp_user = 10;
  void clear_sctp_user();
  ::common::SctpUser sctp_user() const;
  void set_sctp_user(::common::SctpUser value);
  private:
  ::common::SctpUser _internal_sctp_user() const;
  void _internal_set_sctp_user(::common::SctpUser value);
  public:

  // uint32 ref_id = 20;
  void clear_ref_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ref_id() const;
  void set_ref_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ref_id() const;
  void _internal_set_ref_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:common.SctpCntrlInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 assoc_id_;
  int sctp_user_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ref_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class IpAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.IpAddress) */ {
 public:
  inline IpAddress() : IpAddress(nullptr) {}
  virtual ~IpAddress();

  IpAddress(const IpAddress& from);
  IpAddress(IpAddress&& from) noexcept
    : IpAddress() {
    *this = ::std::move(from);
  }

  inline IpAddress& operator=(const IpAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpAddress& operator=(IpAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpAddress* internal_default_instance() {
    return reinterpret_cast<const IpAddress*>(
               &_IpAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IpAddress& a, IpAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(IpAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpAddress* New() const final {
    return CreateMaybeMessage<IpAddress>(nullptr);
  }

  IpAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpAddress& from);
  void MergeFrom(const IpAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.IpAddress";
  }
  protected:
  explicit IpAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 20,
    kTypeFieldNumber = 10,
  };
  // string addr = 20;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // .common.IpAddressType type = 10;
  void clear_type();
  ::common::IpAddressType type() const;
  void set_type(::common::IpAddressType value);
  private:
  ::common::IpAddressType _internal_type() const;
  void _internal_set_type(::common::IpAddressType value);
  public:

  // @@protoc_insertion_point(class_scope:common.IpAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class SctpEndpoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.SctpEndpoint) */ {
 public:
  inline SctpEndpoint() : SctpEndpoint(nullptr) {}
  virtual ~SctpEndpoint();

  SctpEndpoint(const SctpEndpoint& from);
  SctpEndpoint(SctpEndpoint&& from) noexcept
    : SctpEndpoint() {
    *this = ::std::move(from);
  }

  inline SctpEndpoint& operator=(const SctpEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SctpEndpoint& operator=(SctpEndpoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SctpEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SctpEndpoint* internal_default_instance() {
    return reinterpret_cast<const SctpEndpoint*>(
               &_SctpEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SctpEndpoint& a, SctpEndpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SctpEndpoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SctpEndpoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SctpEndpoint* New() const final {
    return CreateMaybeMessage<SctpEndpoint>(nullptr);
  }

  SctpEndpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SctpEndpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SctpEndpoint& from);
  void MergeFrom(const SctpEndpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SctpEndpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.SctpEndpoint";
  }
  protected:
  explicit SctpEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddrListFieldNumber = 20,
    kNumIpAddrsFieldNumber = 10,
    kPortNumFieldNumber = 30,
  };
  // repeated .common.IpAddress ip_addr_list = 20;
  int ip_addr_list_size() const;
  private:
  int _internal_ip_addr_list_size() const;
  public:
  void clear_ip_addr_list();
  ::common::IpAddress* mutable_ip_addr_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::IpAddress >*
      mutable_ip_addr_list();
  private:
  const ::common::IpAddress& _internal_ip_addr_list(int index) const;
  ::common::IpAddress* _internal_add_ip_addr_list();
  public:
  const ::common::IpAddress& ip_addr_list(int index) const;
  ::common::IpAddress* add_ip_addr_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::IpAddress >&
      ip_addr_list() const;

  // uint32 num_ip_addrs = 10;
  void clear_num_ip_addrs();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ip_addrs() const;
  void set_num_ip_addrs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_ip_addrs() const;
  void _internal_set_num_ip_addrs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port_num = 30;
  void clear_port_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 port_num() const;
  void set_port_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port_num() const;
  void _internal_set_port_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:common.SctpEndpoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::IpAddress > ip_addr_list_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_ip_addrs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SctpCntrlInfo

// .common.SctpUser sctp_user = 10;
inline void SctpCntrlInfo::clear_sctp_user() {
  sctp_user_ = 0;
}
inline ::common::SctpUser SctpCntrlInfo::_internal_sctp_user() const {
  return static_cast< ::common::SctpUser >(sctp_user_);
}
inline ::common::SctpUser SctpCntrlInfo::sctp_user() const {
  // @@protoc_insertion_point(field_get:common.SctpCntrlInfo.sctp_user)
  return _internal_sctp_user();
}
inline void SctpCntrlInfo::_internal_set_sctp_user(::common::SctpUser value) {
  
  sctp_user_ = value;
}
inline void SctpCntrlInfo::set_sctp_user(::common::SctpUser value) {
  _internal_set_sctp_user(value);
  // @@protoc_insertion_point(field_set:common.SctpCntrlInfo.sctp_user)
}

// uint32 ref_id = 20;
inline void SctpCntrlInfo::clear_ref_id() {
  ref_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpCntrlInfo::_internal_ref_id() const {
  return ref_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpCntrlInfo::ref_id() const {
  // @@protoc_insertion_point(field_get:common.SctpCntrlInfo.ref_id)
  return _internal_ref_id();
}
inline void SctpCntrlInfo::_internal_set_ref_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ref_id_ = value;
}
inline void SctpCntrlInfo::set_ref_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ref_id(value);
  // @@protoc_insertion_point(field_set:common.SctpCntrlInfo.ref_id)
}

// uint32 assoc_id = 30;
inline void SctpCntrlInfo::clear_assoc_id() {
  assoc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpCntrlInfo::_internal_assoc_id() const {
  return assoc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpCntrlInfo::assoc_id() const {
  // @@protoc_insertion_point(field_get:common.SctpCntrlInfo.assoc_id)
  return _internal_assoc_id();
}
inline void SctpCntrlInfo::_internal_set_assoc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  assoc_id_ = value;
}
inline void SctpCntrlInfo::set_assoc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_assoc_id(value);
  // @@protoc_insertion_point(field_set:common.SctpCntrlInfo.assoc_id)
}

// -------------------------------------------------------------------

// IpAddress

// .common.IpAddressType type = 10;
inline void IpAddress::clear_type() {
  type_ = 0;
}
inline ::common::IpAddressType IpAddress::_internal_type() const {
  return static_cast< ::common::IpAddressType >(type_);
}
inline ::common::IpAddressType IpAddress::type() const {
  // @@protoc_insertion_point(field_get:common.IpAddress.type)
  return _internal_type();
}
inline void IpAddress::_internal_set_type(::common::IpAddressType value) {
  
  type_ = value;
}
inline void IpAddress::set_type(::common::IpAddressType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:common.IpAddress.type)
}

// string addr = 20;
inline void IpAddress::clear_addr() {
  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IpAddress::addr() const {
  // @@protoc_insertion_point(field_get:common.IpAddress.addr)
  return _internal_addr();
}
inline void IpAddress::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:common.IpAddress.addr)
}
inline std::string* IpAddress::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:common.IpAddress.addr)
  return _internal_mutable_addr();
}
inline const std::string& IpAddress::_internal_addr() const {
  return addr_.Get();
}
inline void IpAddress::_internal_set_addr(const std::string& value) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IpAddress::set_addr(std::string&& value) {
  
  addr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:common.IpAddress.addr)
}
inline void IpAddress::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:common.IpAddress.addr)
}
inline void IpAddress::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:common.IpAddress.addr)
}
inline std::string* IpAddress::_internal_mutable_addr() {
  
  return addr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IpAddress::release_addr() {
  // @@protoc_insertion_point(field_release:common.IpAddress.addr)
  return addr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IpAddress::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:common.IpAddress.addr)
}

// -------------------------------------------------------------------

// SctpEndpoint

// uint32 num_ip_addrs = 10;
inline void SctpEndpoint::clear_num_ip_addrs() {
  num_ip_addrs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpEndpoint::_internal_num_ip_addrs() const {
  return num_ip_addrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpEndpoint::num_ip_addrs() const {
  // @@protoc_insertion_point(field_get:common.SctpEndpoint.num_ip_addrs)
  return _internal_num_ip_addrs();
}
inline void SctpEndpoint::_internal_set_num_ip_addrs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_ip_addrs_ = value;
}
inline void SctpEndpoint::set_num_ip_addrs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_ip_addrs(value);
  // @@protoc_insertion_point(field_set:common.SctpEndpoint.num_ip_addrs)
}

// repeated .common.IpAddress ip_addr_list = 20;
inline int SctpEndpoint::_internal_ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline int SctpEndpoint::ip_addr_list_size() const {
  return _internal_ip_addr_list_size();
}
inline void SctpEndpoint::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
inline ::common::IpAddress* SctpEndpoint::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:common.SctpEndpoint.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::IpAddress >*
SctpEndpoint::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:common.SctpEndpoint.ip_addr_list)
  return &ip_addr_list_;
}
inline const ::common::IpAddress& SctpEndpoint::_internal_ip_addr_list(int index) const {
  return ip_addr_list_.Get(index);
}
inline const ::common::IpAddress& SctpEndpoint::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:common.SctpEndpoint.ip_addr_list)
  return _internal_ip_addr_list(index);
}
inline ::common::IpAddress* SctpEndpoint::_internal_add_ip_addr_list() {
  return ip_addr_list_.Add();
}
inline ::common::IpAddress* SctpEndpoint::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:common.SctpEndpoint.ip_addr_list)
  return _internal_add_ip_addr_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::IpAddress >&
SctpEndpoint::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:common.SctpEndpoint.ip_addr_list)
  return ip_addr_list_;
}

// uint32 port_num = 30;
inline void SctpEndpoint::clear_port_num() {
  port_num_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpEndpoint::_internal_port_num() const {
  return port_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SctpEndpoint::port_num() const {
  // @@protoc_insertion_point(field_get:common.SctpEndpoint.port_num)
  return _internal_port_num();
}
inline void SctpEndpoint::_internal_set_port_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_num_ = value;
}
inline void SctpEndpoint::set_port_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port_num(value);
  // @@protoc_insertion_point(field_set:common.SctpEndpoint.port_num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::SctpUser> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::SctpUser>() {
  return ::common::SctpUser_descriptor();
}
template <> struct is_proto_enum< ::common::IpAddressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::IpAddressType>() {
  return ::common::IpAddressType_descriptor();
}
template <> struct is_proto_enum< ::common::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::MsgType>() {
  return ::common::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
