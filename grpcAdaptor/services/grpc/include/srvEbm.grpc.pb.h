// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvEbm.proto
#ifndef GRPC_srvEbm_2eproto__INCLUDED
#define GRPC_srvEbm_2eproto__INCLUDED

#include "srvEbm.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace srvEbm {

class Ebm final {
 public:
  static constexpr char const* service_full_name() {
    return "srvEbm.Ebm";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::srvEbm::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> AsyncSecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(AsyncSecurityConfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> PrepareAsyncSecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(PrepareAsyncSecurityConfigureRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::srvEbm::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> AsyncCreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(AsyncCreateTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> PrepareAsyncCreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(PrepareAsyncCreateTunnelRaw(context, request, cq));
    }
    virtual ::grpc::Status ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::srvEbm::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> AsyncModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(AsyncModifyTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> PrepareAsyncModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(PrepareAsyncModifyTunnelRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::srvEbm::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> AsyncDeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(AsyncDeleteTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> PrepareAsyncDeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(PrepareAsyncDeleteTunnelRaw(context, request, cq));
    }
    virtual ::grpc::Status AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::srvEbm::ReqReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> AsyncAddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(AsyncAddRbConfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>> PrepareAsyncAddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>>(PrepareAsyncAddRbConfigureRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* AsyncSecurityConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* PrepareAsyncSecurityConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* AsyncCreateTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* PrepareAsyncCreateTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* AsyncModifyTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* PrepareAsyncModifyTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* AsyncDeleteTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* PrepareAsyncDeleteTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* AsyncAddRbConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::srvEbm::ReqReply>* PrepareAsyncAddRbConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::srvEbm::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> AsyncSecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(AsyncSecurityConfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> PrepareAsyncSecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(PrepareAsyncSecurityConfigureRaw(context, request, cq));
    }
    ::grpc::Status CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::srvEbm::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> AsyncCreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(AsyncCreateTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> PrepareAsyncCreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(PrepareAsyncCreateTunnelRaw(context, request, cq));
    }
    ::grpc::Status ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::srvEbm::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> AsyncModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(AsyncModifyTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> PrepareAsyncModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(PrepareAsyncModifyTunnelRaw(context, request, cq));
    }
    ::grpc::Status DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::srvEbm::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> AsyncDeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(AsyncDeleteTunnelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> PrepareAsyncDeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(PrepareAsyncDeleteTunnelRaw(context, request, cq));
    }
    ::grpc::Status AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::srvEbm::ReqReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> AsyncAddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(AsyncAddRbConfigureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>> PrepareAsyncAddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>>(PrepareAsyncAddRbConfigureRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* AsyncSecurityConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* PrepareAsyncSecurityConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* AsyncCreateTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* PrepareAsyncCreateTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* AsyncModifyTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* PrepareAsyncModifyTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* AsyncDeleteTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* PrepareAsyncDeleteTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* AsyncAddRbConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* PrepareAsyncAddRbConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SecurityConfigure_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateTunnel_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyTunnel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteTunnel_;
    const ::grpc::internal::RpcMethod rpcmethod_AddRbConfigure_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SecurityConfigure(::grpc::ServerContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response);
    virtual ::grpc::Status CreateTunnel(::grpc::ServerContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response);
    virtual ::grpc::Status ModifyTunnel(::grpc::ServerContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response);
    virtual ::grpc::Status DeleteTunnel(::grpc::ServerContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response);
    virtual ::grpc::Status AddRbConfigure(::grpc::ServerContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SecurityConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SecurityConfigure() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SecurityConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSecurityConfigure(::grpc::ServerContext* context, ::srvEbm::SecurityConfigureReq* request, ::grpc::ServerAsyncResponseWriter< ::srvEbm::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateTunnel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTunnel(::grpc::ServerContext* context, ::srvEbm::CreateTunnelReq* request, ::grpc::ServerAsyncResponseWriter< ::srvEbm::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModifyTunnel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ModifyTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyTunnel(::grpc::ServerContext* context, ::srvEbm::ModifyTunnelReq* request, ::grpc::ServerAsyncResponseWriter< ::srvEbm::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteTunnel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTunnel(::grpc::ServerContext* context, ::srvEbm::DeleteTunnelReq* request, ::grpc::ServerAsyncResponseWriter< ::srvEbm::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddRbConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddRbConfigure() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddRbConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRbConfigure(::grpc::ServerContext* context, ::srvEbm::AddRbConfigureReq* request, ::grpc::ServerAsyncResponseWriter< ::srvEbm::ReqReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SecurityConfigure<WithAsyncMethod_CreateTunnel<WithAsyncMethod_ModifyTunnel<WithAsyncMethod_DeleteTunnel<WithAsyncMethod_AddRbConfigure<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SecurityConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SecurityConfigure() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response) { return this->SecurityConfigure(context, request, response); }));}
    void SetMessageAllocatorFor_SecurityConfigure(
        ::grpc::experimental::MessageAllocator< ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SecurityConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SecurityConfigure(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SecurityConfigure(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateTunnel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response) { return this->CreateTunnel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateTunnel(
        ::grpc::experimental::MessageAllocator< ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTunnel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ModifyTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ModifyTunnel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response) { return this->ModifyTunnel(context, request, response); }));}
    void SetMessageAllocatorFor_ModifyTunnel(
        ::grpc::experimental::MessageAllocator< ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ModifyTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ModifyTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ModifyTunnel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteTunnel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response) { return this->DeleteTunnel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteTunnel(
        ::grpc::experimental::MessageAllocator< ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTunnel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddRbConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddRbConfigure() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response) { return this->AddRbConfigure(context, request, response); }));}
    void SetMessageAllocatorFor_AddRbConfigure(
        ::grpc::experimental::MessageAllocator< ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddRbConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRbConfigure(
      ::grpc::CallbackServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRbConfigure(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SecurityConfigure<ExperimentalWithCallbackMethod_CreateTunnel<ExperimentalWithCallbackMethod_ModifyTunnel<ExperimentalWithCallbackMethod_DeleteTunnel<ExperimentalWithCallbackMethod_AddRbConfigure<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SecurityConfigure<ExperimentalWithCallbackMethod_CreateTunnel<ExperimentalWithCallbackMethod_ModifyTunnel<ExperimentalWithCallbackMethod_DeleteTunnel<ExperimentalWithCallbackMethod_AddRbConfigure<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SecurityConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SecurityConfigure() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SecurityConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateTunnel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModifyTunnel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ModifyTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteTunnel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddRbConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddRbConfigure() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddRbConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SecurityConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SecurityConfigure() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SecurityConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSecurityConfigure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateTunnel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateTunnel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModifyTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModifyTunnel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ModifyTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyTunnel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteTunnel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteTunnel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddRbConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddRbConfigure() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddRbConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddRbConfigure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SecurityConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SecurityConfigure() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SecurityConfigure(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SecurityConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SecurityConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SecurityConfigure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SecurityConfigure(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateTunnel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateTunnel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateTunnel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ModifyTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ModifyTunnel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModifyTunnel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ModifyTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ModifyTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ModifyTunnel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteTunnel() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteTunnel(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteTunnel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteTunnel(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddRbConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddRbConfigure() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddRbConfigure(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddRbConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddRbConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddRbConfigure(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddRbConfigure(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SecurityConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SecurityConfigure() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply>* streamer) {
                       return this->StreamedSecurityConfigure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SecurityConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SecurityConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::SecurityConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSecurityConfigure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::SecurityConfigureReq,::srvEbm::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateTunnel() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply>* streamer) {
                       return this->StreamedCreateTunnel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::CreateTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateTunnel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::CreateTunnelReq,::srvEbm::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModifyTunnel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply>* streamer) {
                       return this->StreamedModifyTunnel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModifyTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::ModifyTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyTunnel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::ModifyTunnelReq,::srvEbm::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteTunnel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteTunnel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply>* streamer) {
                       return this->StreamedDeleteTunnel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteTunnel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteTunnel(::grpc::ServerContext* /*context*/, const ::srvEbm::DeleteTunnelReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteTunnel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::DeleteTunnelReq,::srvEbm::ReqReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddRbConfigure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddRbConfigure() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply>* streamer) {
                       return this->StreamedAddRbConfigure(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddRbConfigure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddRbConfigure(::grpc::ServerContext* /*context*/, const ::srvEbm::AddRbConfigureReq* /*request*/, ::srvEbm::ReqReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddRbConfigure(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::srvEbm::AddRbConfigureReq,::srvEbm::ReqReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SecurityConfigure<WithStreamedUnaryMethod_CreateTunnel<WithStreamedUnaryMethod_ModifyTunnel<WithStreamedUnaryMethod_DeleteTunnel<WithStreamedUnaryMethod_AddRbConfigure<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SecurityConfigure<WithStreamedUnaryMethod_CreateTunnel<WithStreamedUnaryMethod_ModifyTunnel<WithStreamedUnaryMethod_DeleteTunnel<WithStreamedUnaryMethod_AddRbConfigure<Service > > > > > StreamedService;
};

}  // namespace srvEbm


#endif  // GRPC_srvEbm_2eproto__INCLUDED
