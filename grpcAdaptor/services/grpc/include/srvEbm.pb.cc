// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: srvEbm.proto

#include "srvEbm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mhdr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MsgHdr_mhdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpUpHdr_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GtpTunInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PDCPConfigure_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecurityConfigure_structure_2eproto;
namespace srvEbm {
class SecurityConfigureReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityConfigureReq> _instance;
} _SecurityConfigureReq_default_instance_;
class CreateTunnelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTunnelReq> _instance;
} _CreateTunnelReq_default_instance_;
class ModifyTunnelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyTunnelReq> _instance;
} _ModifyTunnelReq_default_instance_;
class DeleteTunnelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTunnelReq> _instance;
} _DeleteTunnelReq_default_instance_;
class AddRbConfigureReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddRbConfigureReq> _instance;
} _AddRbConfigureReq_default_instance_;
class ReqReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqReply> _instance;
} _ReqReply_default_instance_;
}  // namespace srvEbm
static void InitDefaultsscc_info_AddRbConfigureReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_AddRbConfigureReq_default_instance_;
    new (ptr) ::srvEbm::AddRbConfigureReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::AddRbConfigureReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddRbConfigureReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AddRbConfigureReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_PDCPConfigure_structure_2eproto.base,}};

static void InitDefaultsscc_info_CreateTunnelReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_CreateTunnelReq_default_instance_;
    new (ptr) ::srvEbm::CreateTunnelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::CreateTunnelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateTunnelReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateTunnelReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_GtpTunInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_DeleteTunnelReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_DeleteTunnelReq_default_instance_;
    new (ptr) ::srvEbm::DeleteTunnelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::DeleteTunnelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteTunnelReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteTunnelReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,}};

static void InitDefaultsscc_info_ModifyTunnelReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_ModifyTunnelReq_default_instance_;
    new (ptr) ::srvEbm::ModifyTunnelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::ModifyTunnelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModifyTunnelReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ModifyTunnelReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_GtpTunInfo_structure_2eproto.base,}};

static void InitDefaultsscc_info_ReqReply_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_ReqReply_default_instance_;
    new (ptr) ::srvEbm::ReqReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::ReqReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqReply_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqReply_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,}};

static void InitDefaultsscc_info_SecurityConfigureReq_srvEbm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::srvEbm::_SecurityConfigureReq_default_instance_;
    new (ptr) ::srvEbm::SecurityConfigureReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::srvEbm::SecurityConfigureReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SecurityConfigureReq_srvEbm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SecurityConfigureReq_srvEbm_2eproto}, {
      &scc_info_MsgHdr_mhdr_2eproto.base,
      &scc_info_CpUpHdr_structure_2eproto.base,
      &scc_info_SecurityConfigure_structure_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_srvEbm_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_srvEbm_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_srvEbm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_srvEbm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigureReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigureReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigureReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::SecurityConfigureReq, security_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::CreateTunnelReq, gtp_tnl_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::ModifyTunnelReq, gtp_tnl_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::DeleteTunnelReq, cp_up_hdr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigureReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigureReq, hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigureReq, cp_up_hdr_),
  PROTOBUF_FIELD_OFFSET(::srvEbm::AddRbConfigureReq, pdcp_configure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ReqReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::srvEbm::ReqReply, hdr_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::srvEbm::SecurityConfigureReq)},
  { 8, -1, sizeof(::srvEbm::CreateTunnelReq)},
  { 16, -1, sizeof(::srvEbm::ModifyTunnelReq)},
  { 24, -1, sizeof(::srvEbm::DeleteTunnelReq)},
  { 31, -1, sizeof(::srvEbm::AddRbConfigureReq)},
  { 39, -1, sizeof(::srvEbm::ReqReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_SecurityConfigureReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_CreateTunnelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_ModifyTunnelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_DeleteTunnelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_AddRbConfigureReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::srvEbm::_ReqReply_default_instance_),
};

const char descriptor_table_protodef_srvEbm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014srvEbm.proto\022\006srvEbm\032\nmhdr.proto\032\017stru"
  "cture.proto\"\217\001\n\024SecurityConfigureReq\022\031\n\003"
  "hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001"
  "(\0132\022.structure.CpUpHdr\0225\n\017security_confi"
  "g\030\036 \001(\0132\034.structure.SecurityConfigure\"\200\001"
  "\n\017CreateTunnelReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.Ms"
  "gHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.structure.CpUp"
  "Hdr\022+\n\014gtp_tnl_info\030\036 \001(\0132\025.structure.Gt"
  "pTunInfo\"\200\001\n\017ModifyTunnelReq\022\031\n\003hdr\030\n \001("
  "\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024 \001(\0132\022.str"
  "ucture.CpUpHdr\022+\n\014gtp_tnl_info\030\036 \001(\0132\025.s"
  "tructure.GtpTunInfo\"S\n\017DeleteTunnelReq\022\031"
  "\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_up_hdr\030\024"
  " \001(\0132\022.structure.CpUpHdr\"\207\001\n\021AddRbConfig"
  "ureReq\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHdr\022%\n\tcp_"
  "up_hdr\030\024 \001(\0132\022.structure.CpUpHdr\0220\n\016pdcp"
  "_configure\030\036 \001(\0132\030.structure.PDCPConfigu"
  "re\"%\n\010ReqReply\022\031\n\003hdr\030\n \001(\0132\014.mhdr.MsgHd"
  "r*\275\001\n\006method\022\021\n\rMethodUnknown\020\000\022\036\n\032Metho"
  "dSecurityConfigureReq\020\001\022\031\n\025MethodCreateT"
  "unnelReq\020\002\022\031\n\025MethodModifyTunnelReq\020\003\022\031\n"
  "\025MethodDeleteTunnelReq\020\004\022\033\n\027MethodAddRbC"
  "onfigureReq\020\005\022\022\n\016MethodReqReply\020\006*\"\n\007ver"
  "sion\022\016\n\nVerUnknown\020\000\022\007\n\003Ver\020\0012\304\002\n\003Ebm\022E\n"
  "\021SecurityConfigure\022\034.srvEbm.SecurityConf"
  "igureReq\032\020.srvEbm.ReqReply\"\000\022;\n\014CreateTu"
  "nnel\022\027.srvEbm.CreateTunnelReq\032\020.srvEbm.R"
  "eqReply\"\000\022;\n\014ModifyTunnel\022\027.srvEbm.Modif"
  "yTunnelReq\032\020.srvEbm.ReqReply\"\000\022;\n\014Delete"
  "Tunnel\022\027.srvEbm.DeleteTunnelReq\032\020.srvEbm"
  ".ReqReply\"\000\022\?\n\016AddRbConfigure\022\031.srvEbm.A"
  "ddRbConfigureReq\032\020.srvEbm.ReqReply\"\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_srvEbm_2eproto_deps[2] = {
  &::descriptor_table_mhdr_2eproto,
  &::descriptor_table_structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_srvEbm_2eproto_sccs[6] = {
  &scc_info_AddRbConfigureReq_srvEbm_2eproto.base,
  &scc_info_CreateTunnelReq_srvEbm_2eproto.base,
  &scc_info_DeleteTunnelReq_srvEbm_2eproto.base,
  &scc_info_ModifyTunnelReq_srvEbm_2eproto.base,
  &scc_info_ReqReply_srvEbm_2eproto.base,
  &scc_info_SecurityConfigureReq_srvEbm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_srvEbm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_srvEbm_2eproto = {
  false, false, descriptor_table_protodef_srvEbm_2eproto, "srvEbm.proto", 1284,
  &descriptor_table_srvEbm_2eproto_once, descriptor_table_srvEbm_2eproto_sccs, descriptor_table_srvEbm_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_srvEbm_2eproto::offsets,
  file_level_metadata_srvEbm_2eproto, 6, file_level_enum_descriptors_srvEbm_2eproto, file_level_service_descriptors_srvEbm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_srvEbm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_srvEbm_2eproto)), true);
namespace srvEbm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* method_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvEbm_2eproto);
  return file_level_enum_descriptors_srvEbm_2eproto[0];
}
bool method_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* version_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_srvEbm_2eproto);
  return file_level_enum_descriptors_srvEbm_2eproto[1];
}
bool version_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SecurityConfigureReq::InitAsDefaultInstance() {
  ::srvEbm::_SecurityConfigureReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_SecurityConfigureReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_SecurityConfigureReq_default_instance_._instance.get_mutable()->security_config_ = const_cast< ::structure::SecurityConfigure*>(
      ::structure::SecurityConfigure::internal_default_instance());
}
class SecurityConfigureReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const SecurityConfigureReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const SecurityConfigureReq* msg);
  static const ::structure::SecurityConfigure& security_config(const SecurityConfigureReq* msg);
};

const ::mhdr::MsgHdr&
SecurityConfigureReq::_Internal::hdr(const SecurityConfigureReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
SecurityConfigureReq::_Internal::cp_up_hdr(const SecurityConfigureReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::SecurityConfigure&
SecurityConfigureReq::_Internal::security_config(const SecurityConfigureReq* msg) {
  return *msg->security_config_;
}
void SecurityConfigureReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void SecurityConfigureReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void SecurityConfigureReq::clear_security_config() {
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
}
SecurityConfigureReq::SecurityConfigureReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.SecurityConfigureReq)
}
SecurityConfigureReq::SecurityConfigureReq(const SecurityConfigureReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_security_config()) {
    security_config_ = new ::structure::SecurityConfigure(*from.security_config_);
  } else {
    security_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.SecurityConfigureReq)
}

void SecurityConfigureReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecurityConfigureReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&security_config_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(security_config_));
}

SecurityConfigureReq::~SecurityConfigureReq() {
  // @@protoc_insertion_point(destructor:srvEbm.SecurityConfigureReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfigureReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete security_config_;
}

void SecurityConfigureReq::ArenaDtor(void* object) {
  SecurityConfigureReq* _this = reinterpret_cast< SecurityConfigureReq* >(object);
  (void)_this;
}
void SecurityConfigureReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfigureReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityConfigureReq& SecurityConfigureReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityConfigureReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void SecurityConfigureReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.SecurityConfigureReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && security_config_ != nullptr) {
    delete security_config_;
  }
  security_config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfigureReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SecurityConfigure security_config = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_security_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfigureReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.SecurityConfigureReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.SecurityConfigure security_config = 30;
  if (this->has_security_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::security_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.SecurityConfigureReq)
  return target;
}

size_t SecurityConfigureReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.SecurityConfigureReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.SecurityConfigure security_config = 30;
  if (this->has_security_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfigureReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.SecurityConfigureReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfigureReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfigureReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.SecurityConfigureReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.SecurityConfigureReq)
    MergeFrom(*source);
  }
}

void SecurityConfigureReq::MergeFrom(const SecurityConfigureReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.SecurityConfigureReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_security_config()) {
    _internal_mutable_security_config()->::structure::SecurityConfigure::MergeFrom(from._internal_security_config());
  }
}

void SecurityConfigureReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.SecurityConfigureReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfigureReq::CopyFrom(const SecurityConfigureReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.SecurityConfigureReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfigureReq::IsInitialized() const {
  return true;
}

void SecurityConfigureReq::InternalSwap(SecurityConfigureReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityConfigureReq, security_config_)
      + sizeof(SecurityConfigureReq::security_config_)
      - PROTOBUF_FIELD_OFFSET(SecurityConfigureReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfigureReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTunnelReq::InitAsDefaultInstance() {
  ::srvEbm::_CreateTunnelReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_CreateTunnelReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_CreateTunnelReq_default_instance_._instance.get_mutable()->gtp_tnl_info_ = const_cast< ::structure::GtpTunInfo*>(
      ::structure::GtpTunInfo::internal_default_instance());
}
class CreateTunnelReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const CreateTunnelReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const CreateTunnelReq* msg);
  static const ::structure::GtpTunInfo& gtp_tnl_info(const CreateTunnelReq* msg);
};

const ::mhdr::MsgHdr&
CreateTunnelReq::_Internal::hdr(const CreateTunnelReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
CreateTunnelReq::_Internal::cp_up_hdr(const CreateTunnelReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::GtpTunInfo&
CreateTunnelReq::_Internal::gtp_tnl_info(const CreateTunnelReq* msg) {
  return *msg->gtp_tnl_info_;
}
void CreateTunnelReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void CreateTunnelReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void CreateTunnelReq::clear_gtp_tnl_info() {
  if (GetArena() == nullptr && gtp_tnl_info_ != nullptr) {
    delete gtp_tnl_info_;
  }
  gtp_tnl_info_ = nullptr;
}
CreateTunnelReq::CreateTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.CreateTunnelReq)
}
CreateTunnelReq::CreateTunnelReq(const CreateTunnelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_gtp_tnl_info()) {
    gtp_tnl_info_ = new ::structure::GtpTunInfo(*from.gtp_tnl_info_);
  } else {
    gtp_tnl_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.CreateTunnelReq)
}

void CreateTunnelReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTunnelReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gtp_tnl_info_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(gtp_tnl_info_));
}

CreateTunnelReq::~CreateTunnelReq() {
  // @@protoc_insertion_point(destructor:srvEbm.CreateTunnelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTunnelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete gtp_tnl_info_;
}

void CreateTunnelReq::ArenaDtor(void* object) {
  CreateTunnelReq* _this = reinterpret_cast< CreateTunnelReq* >(object);
  (void)_this;
}
void CreateTunnelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTunnelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTunnelReq& CreateTunnelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTunnelReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void CreateTunnelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.CreateTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && gtp_tnl_info_ != nullptr) {
    delete gtp_tnl_info_;
  }
  gtp_tnl_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTunnelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.GtpTunInfo gtp_tnl_info = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_gtp_tnl_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTunnelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.CreateTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.GtpTunInfo gtp_tnl_info = 30;
  if (this->has_gtp_tnl_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::gtp_tnl_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.CreateTunnelReq)
  return target;
}

size_t CreateTunnelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.CreateTunnelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.GtpTunInfo gtp_tnl_info = 30;
  if (this->has_gtp_tnl_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtp_tnl_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTunnelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.CreateTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTunnelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTunnelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.CreateTunnelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.CreateTunnelReq)
    MergeFrom(*source);
  }
}

void CreateTunnelReq::MergeFrom(const CreateTunnelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.CreateTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_gtp_tnl_info()) {
    _internal_mutable_gtp_tnl_info()->::structure::GtpTunInfo::MergeFrom(from._internal_gtp_tnl_info());
  }
}

void CreateTunnelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.CreateTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTunnelReq::CopyFrom(const CreateTunnelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.CreateTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTunnelReq::IsInitialized() const {
  return true;
}

void CreateTunnelReq::InternalSwap(CreateTunnelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTunnelReq, gtp_tnl_info_)
      + sizeof(CreateTunnelReq::gtp_tnl_info_)
      - PROTOBUF_FIELD_OFFSET(CreateTunnelReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTunnelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyTunnelReq::InitAsDefaultInstance() {
  ::srvEbm::_ModifyTunnelReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_ModifyTunnelReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_ModifyTunnelReq_default_instance_._instance.get_mutable()->gtp_tnl_info_ = const_cast< ::structure::GtpTunInfo*>(
      ::structure::GtpTunInfo::internal_default_instance());
}
class ModifyTunnelReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ModifyTunnelReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const ModifyTunnelReq* msg);
  static const ::structure::GtpTunInfo& gtp_tnl_info(const ModifyTunnelReq* msg);
};

const ::mhdr::MsgHdr&
ModifyTunnelReq::_Internal::hdr(const ModifyTunnelReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
ModifyTunnelReq::_Internal::cp_up_hdr(const ModifyTunnelReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::GtpTunInfo&
ModifyTunnelReq::_Internal::gtp_tnl_info(const ModifyTunnelReq* msg) {
  return *msg->gtp_tnl_info_;
}
void ModifyTunnelReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void ModifyTunnelReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void ModifyTunnelReq::clear_gtp_tnl_info() {
  if (GetArena() == nullptr && gtp_tnl_info_ != nullptr) {
    delete gtp_tnl_info_;
  }
  gtp_tnl_info_ = nullptr;
}
ModifyTunnelReq::ModifyTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.ModifyTunnelReq)
}
ModifyTunnelReq::ModifyTunnelReq(const ModifyTunnelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_gtp_tnl_info()) {
    gtp_tnl_info_ = new ::structure::GtpTunInfo(*from.gtp_tnl_info_);
  } else {
    gtp_tnl_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.ModifyTunnelReq)
}

void ModifyTunnelReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyTunnelReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gtp_tnl_info_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(gtp_tnl_info_));
}

ModifyTunnelReq::~ModifyTunnelReq() {
  // @@protoc_insertion_point(destructor:srvEbm.ModifyTunnelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModifyTunnelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete gtp_tnl_info_;
}

void ModifyTunnelReq::ArenaDtor(void* object) {
  ModifyTunnelReq* _this = reinterpret_cast< ModifyTunnelReq* >(object);
  (void)_this;
}
void ModifyTunnelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyTunnelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyTunnelReq& ModifyTunnelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyTunnelReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void ModifyTunnelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.ModifyTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && gtp_tnl_info_ != nullptr) {
    delete gtp_tnl_info_;
  }
  gtp_tnl_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModifyTunnelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.GtpTunInfo gtp_tnl_info = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_gtp_tnl_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyTunnelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.ModifyTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.GtpTunInfo gtp_tnl_info = 30;
  if (this->has_gtp_tnl_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::gtp_tnl_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.ModifyTunnelReq)
  return target;
}

size_t ModifyTunnelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.ModifyTunnelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.GtpTunInfo gtp_tnl_info = 30;
  if (this->has_gtp_tnl_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gtp_tnl_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyTunnelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.ModifyTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyTunnelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyTunnelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.ModifyTunnelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.ModifyTunnelReq)
    MergeFrom(*source);
  }
}

void ModifyTunnelReq::MergeFrom(const ModifyTunnelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.ModifyTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_gtp_tnl_info()) {
    _internal_mutable_gtp_tnl_info()->::structure::GtpTunInfo::MergeFrom(from._internal_gtp_tnl_info());
  }
}

void ModifyTunnelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.ModifyTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyTunnelReq::CopyFrom(const ModifyTunnelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.ModifyTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyTunnelReq::IsInitialized() const {
  return true;
}

void ModifyTunnelReq::InternalSwap(ModifyTunnelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModifyTunnelReq, gtp_tnl_info_)
      + sizeof(ModifyTunnelReq::gtp_tnl_info_)
      - PROTOBUF_FIELD_OFFSET(ModifyTunnelReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyTunnelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTunnelReq::InitAsDefaultInstance() {
  ::srvEbm::_DeleteTunnelReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_DeleteTunnelReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
}
class DeleteTunnelReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const DeleteTunnelReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const DeleteTunnelReq* msg);
};

const ::mhdr::MsgHdr&
DeleteTunnelReq::_Internal::hdr(const DeleteTunnelReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
DeleteTunnelReq::_Internal::cp_up_hdr(const DeleteTunnelReq* msg) {
  return *msg->cp_up_hdr_;
}
void DeleteTunnelReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void DeleteTunnelReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
DeleteTunnelReq::DeleteTunnelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.DeleteTunnelReq)
}
DeleteTunnelReq::DeleteTunnelReq(const DeleteTunnelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.DeleteTunnelReq)
}

void DeleteTunnelReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTunnelReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cp_up_hdr_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(cp_up_hdr_));
}

DeleteTunnelReq::~DeleteTunnelReq() {
  // @@protoc_insertion_point(destructor:srvEbm.DeleteTunnelReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTunnelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
}

void DeleteTunnelReq::ArenaDtor(void* object) {
  DeleteTunnelReq* _this = reinterpret_cast< DeleteTunnelReq* >(object);
  (void)_this;
}
void DeleteTunnelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTunnelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTunnelReq& DeleteTunnelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTunnelReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void DeleteTunnelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.DeleteTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTunnelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTunnelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.DeleteTunnelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.DeleteTunnelReq)
  return target;
}

size_t DeleteTunnelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.DeleteTunnelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTunnelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.DeleteTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTunnelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTunnelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.DeleteTunnelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.DeleteTunnelReq)
    MergeFrom(*source);
  }
}

void DeleteTunnelReq::MergeFrom(const DeleteTunnelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.DeleteTunnelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
}

void DeleteTunnelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.DeleteTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTunnelReq::CopyFrom(const DeleteTunnelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.DeleteTunnelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTunnelReq::IsInitialized() const {
  return true;
}

void DeleteTunnelReq::InternalSwap(DeleteTunnelReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteTunnelReq, cp_up_hdr_)
      + sizeof(DeleteTunnelReq::cp_up_hdr_)
      - PROTOBUF_FIELD_OFFSET(DeleteTunnelReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTunnelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddRbConfigureReq::InitAsDefaultInstance() {
  ::srvEbm::_AddRbConfigureReq_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
  ::srvEbm::_AddRbConfigureReq_default_instance_._instance.get_mutable()->cp_up_hdr_ = const_cast< ::structure::CpUpHdr*>(
      ::structure::CpUpHdr::internal_default_instance());
  ::srvEbm::_AddRbConfigureReq_default_instance_._instance.get_mutable()->pdcp_configure_ = const_cast< ::structure::PDCPConfigure*>(
      ::structure::PDCPConfigure::internal_default_instance());
}
class AddRbConfigureReq::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const AddRbConfigureReq* msg);
  static const ::structure::CpUpHdr& cp_up_hdr(const AddRbConfigureReq* msg);
  static const ::structure::PDCPConfigure& pdcp_configure(const AddRbConfigureReq* msg);
};

const ::mhdr::MsgHdr&
AddRbConfigureReq::_Internal::hdr(const AddRbConfigureReq* msg) {
  return *msg->hdr_;
}
const ::structure::CpUpHdr&
AddRbConfigureReq::_Internal::cp_up_hdr(const AddRbConfigureReq* msg) {
  return *msg->cp_up_hdr_;
}
const ::structure::PDCPConfigure&
AddRbConfigureReq::_Internal::pdcp_configure(const AddRbConfigureReq* msg) {
  return *msg->pdcp_configure_;
}
void AddRbConfigureReq::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
void AddRbConfigureReq::clear_cp_up_hdr() {
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
}
void AddRbConfigureReq::clear_pdcp_configure() {
  if (GetArena() == nullptr && pdcp_configure_ != nullptr) {
    delete pdcp_configure_;
  }
  pdcp_configure_ = nullptr;
}
AddRbConfigureReq::AddRbConfigureReq(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.AddRbConfigureReq)
}
AddRbConfigureReq::AddRbConfigureReq(const AddRbConfigureReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  if (from._internal_has_cp_up_hdr()) {
    cp_up_hdr_ = new ::structure::CpUpHdr(*from.cp_up_hdr_);
  } else {
    cp_up_hdr_ = nullptr;
  }
  if (from._internal_has_pdcp_configure()) {
    pdcp_configure_ = new ::structure::PDCPConfigure(*from.pdcp_configure_);
  } else {
    pdcp_configure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.AddRbConfigureReq)
}

void AddRbConfigureReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddRbConfigureReq_srvEbm_2eproto.base);
  ::memset(&hdr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdcp_configure_) -
      reinterpret_cast<char*>(&hdr_)) + sizeof(pdcp_configure_));
}

AddRbConfigureReq::~AddRbConfigureReq() {
  // @@protoc_insertion_point(destructor:srvEbm.AddRbConfigureReq)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddRbConfigureReq::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
  if (this != internal_default_instance()) delete cp_up_hdr_;
  if (this != internal_default_instance()) delete pdcp_configure_;
}

void AddRbConfigureReq::ArenaDtor(void* object) {
  AddRbConfigureReq* _this = reinterpret_cast< AddRbConfigureReq* >(object);
  (void)_this;
}
void AddRbConfigureReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRbConfigureReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRbConfigureReq& AddRbConfigureReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddRbConfigureReq_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void AddRbConfigureReq::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.AddRbConfigureReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  if (GetArena() == nullptr && cp_up_hdr_ != nullptr) {
    delete cp_up_hdr_;
  }
  cp_up_hdr_ = nullptr;
  if (GetArena() == nullptr && pdcp_configure_ != nullptr) {
    delete pdcp_configure_;
  }
  pdcp_configure_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRbConfigureReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CpUpHdr cp_up_hdr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cp_up_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.PDCPConfigure pdcp_configure = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_pdcp_configure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddRbConfigureReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.AddRbConfigureReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cp_up_hdr(this), target, stream);
  }

  // .structure.PDCPConfigure pdcp_configure = 30;
  if (this->has_pdcp_configure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::pdcp_configure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.AddRbConfigureReq)
  return target;
}

size_t AddRbConfigureReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.AddRbConfigureReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  // .structure.CpUpHdr cp_up_hdr = 20;
  if (this->has_cp_up_hdr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cp_up_hdr_);
  }

  // .structure.PDCPConfigure pdcp_configure = 30;
  if (this->has_pdcp_configure()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pdcp_configure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRbConfigureReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.AddRbConfigureReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRbConfigureReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddRbConfigureReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.AddRbConfigureReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.AddRbConfigureReq)
    MergeFrom(*source);
  }
}

void AddRbConfigureReq::MergeFrom(const AddRbConfigureReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.AddRbConfigureReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
  if (from.has_cp_up_hdr()) {
    _internal_mutable_cp_up_hdr()->::structure::CpUpHdr::MergeFrom(from._internal_cp_up_hdr());
  }
  if (from.has_pdcp_configure()) {
    _internal_mutable_pdcp_configure()->::structure::PDCPConfigure::MergeFrom(from._internal_pdcp_configure());
  }
}

void AddRbConfigureReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.AddRbConfigureReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRbConfigureReq::CopyFrom(const AddRbConfigureReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.AddRbConfigureReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRbConfigureReq::IsInitialized() const {
  return true;
}

void AddRbConfigureReq::InternalSwap(AddRbConfigureReq* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRbConfigureReq, pdcp_configure_)
      + sizeof(AddRbConfigureReq::pdcp_configure_)
      - PROTOBUF_FIELD_OFFSET(AddRbConfigureReq, hdr_)>(
          reinterpret_cast<char*>(&hdr_),
          reinterpret_cast<char*>(&other->hdr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRbConfigureReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqReply::InitAsDefaultInstance() {
  ::srvEbm::_ReqReply_default_instance_._instance.get_mutable()->hdr_ = const_cast< ::mhdr::MsgHdr*>(
      ::mhdr::MsgHdr::internal_default_instance());
}
class ReqReply::_Internal {
 public:
  static const ::mhdr::MsgHdr& hdr(const ReqReply* msg);
};

const ::mhdr::MsgHdr&
ReqReply::_Internal::hdr(const ReqReply* msg) {
  return *msg->hdr_;
}
void ReqReply::clear_hdr() {
  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
}
ReqReply::ReqReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:srvEbm.ReqReply)
}
ReqReply::ReqReply(const ReqReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hdr()) {
    hdr_ = new ::mhdr::MsgHdr(*from.hdr_);
  } else {
    hdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:srvEbm.ReqReply)
}

void ReqReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqReply_srvEbm_2eproto.base);
  hdr_ = nullptr;
}

ReqReply::~ReqReply() {
  // @@protoc_insertion_point(destructor:srvEbm.ReqReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete hdr_;
}

void ReqReply::ArenaDtor(void* object) {
  ReqReply* _this = reinterpret_cast< ReqReply* >(object);
  (void)_this;
}
void ReqReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqReply& ReqReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqReply_srvEbm_2eproto.base);
  return *internal_default_instance();
}


void ReqReply::Clear() {
// @@protoc_insertion_point(message_clear_start:srvEbm.ReqReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && hdr_ != nullptr) {
    delete hdr_;
  }
  hdr_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mhdr.MsgHdr hdr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:srvEbm.ReqReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hdr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:srvEbm.ReqReply)
  return target;
}

size_t ReqReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:srvEbm.ReqReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mhdr.MsgHdr hdr = 10;
  if (this->has_hdr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:srvEbm.ReqReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:srvEbm.ReqReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:srvEbm.ReqReply)
    MergeFrom(*source);
  }
}

void ReqReply::MergeFrom(const ReqReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:srvEbm.ReqReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdr()) {
    _internal_mutable_hdr()->::mhdr::MsgHdr::MergeFrom(from._internal_hdr());
  }
}

void ReqReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:srvEbm.ReqReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReply::CopyFrom(const ReqReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:srvEbm.ReqReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReply::IsInitialized() const {
  return true;
}

void ReqReply::InternalSwap(ReqReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(hdr_, other->hdr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace srvEbm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::srvEbm::SecurityConfigureReq* Arena::CreateMaybeMessage< ::srvEbm::SecurityConfigureReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::SecurityConfigureReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::CreateTunnelReq* Arena::CreateMaybeMessage< ::srvEbm::CreateTunnelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::CreateTunnelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::ModifyTunnelReq* Arena::CreateMaybeMessage< ::srvEbm::ModifyTunnelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::ModifyTunnelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::DeleteTunnelReq* Arena::CreateMaybeMessage< ::srvEbm::DeleteTunnelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::DeleteTunnelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::AddRbConfigureReq* Arena::CreateMaybeMessage< ::srvEbm::AddRbConfigureReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::AddRbConfigureReq >(arena);
}
template<> PROTOBUF_NOINLINE ::srvEbm::ReqReply* Arena::CreateMaybeMessage< ::srvEbm::ReqReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::srvEbm::ReqReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
