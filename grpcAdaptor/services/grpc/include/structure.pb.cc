// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structure.proto

#include "structure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddress_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuCpID_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuUpID_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtpTunnelId_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeaderCompressConfigure_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pst_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RlcInfo_structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuSpID_structure_2eproto;
namespace structure {
class PstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pst> _instance;
} _Pst_default_instance_;
class CuCpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CuCpID> _instance;
} _CuCpID_default_instance_;
class CuUpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CuUpID> _instance;
} _CuUpID_default_instance_;
class SuSpIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuSpID> _instance;
} _SuSpID_default_instance_;
class CpUpHdrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpUpHdr> _instance;
} _CpUpHdr_default_instance_;
class SecurityConfigureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecurityConfigure> _instance;
} _SecurityConfigure_default_instance_;
class GtpTunnelIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtpTunnelId> _instance;
} _GtpTunnelId_default_instance_;
class GtpTunInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtpTunInfo> _instance;
} _GtpTunInfo_default_instance_;
class RlcInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RlcInfo> _instance;
} _RlcInfo_default_instance_;
class HeaderCompressConfigureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeaderCompressConfigure> _instance;
} _HeaderCompressConfigure_default_instance_;
class PDCPConfigureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PDCPConfigure> _instance;
} _PDCPConfigure_default_instance_;
}  // namespace structure
static void InitDefaultsscc_info_CpUpHdr_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CpUpHdr_default_instance_;
    new (ptr) ::structure::CpUpHdr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CpUpHdr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpUpHdr_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CpUpHdr_structure_2eproto}, {
      &scc_info_Pst_structure_2eproto.base,
      &scc_info_CuCpID_structure_2eproto.base,
      &scc_info_CuUpID_structure_2eproto.base,
      &scc_info_SuSpID_structure_2eproto.base,}};

static void InitDefaultsscc_info_CuCpID_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CuCpID_default_instance_;
    new (ptr) ::structure::CuCpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CuCpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuCpID_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CuCpID_structure_2eproto}, {}};

static void InitDefaultsscc_info_CuUpID_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_CuUpID_default_instance_;
    new (ptr) ::structure::CuUpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::CuUpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CuUpID_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CuUpID_structure_2eproto}, {}};

static void InitDefaultsscc_info_GtpTunInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_GtpTunInfo_default_instance_;
    new (ptr) ::structure::GtpTunInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::GtpTunInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GtpTunInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GtpTunInfo_structure_2eproto}, {
      &scc_info_GtpTunnelId_structure_2eproto.base,
      &scc_info_IpAddress_common_2eproto.base,}};

static void InitDefaultsscc_info_GtpTunnelId_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_GtpTunnelId_default_instance_;
    new (ptr) ::structure::GtpTunnelId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::GtpTunnelId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtpTunnelId_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtpTunnelId_structure_2eproto}, {}};

static void InitDefaultsscc_info_HeaderCompressConfigure_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_HeaderCompressConfigure_default_instance_;
    new (ptr) ::structure::HeaderCompressConfigure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::HeaderCompressConfigure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeaderCompressConfigure_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeaderCompressConfigure_structure_2eproto}, {}};

static void InitDefaultsscc_info_PDCPConfigure_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_PDCPConfigure_default_instance_;
    new (ptr) ::structure::PDCPConfigure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::PDCPConfigure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PDCPConfigure_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PDCPConfigure_structure_2eproto}, {
      &scc_info_RlcInfo_structure_2eproto.base,
      &scc_info_HeaderCompressConfigure_structure_2eproto.base,}};

static void InitDefaultsscc_info_Pst_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_Pst_default_instance_;
    new (ptr) ::structure::Pst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::Pst::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pst_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pst_structure_2eproto}, {}};

static void InitDefaultsscc_info_RlcInfo_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_RlcInfo_default_instance_;
    new (ptr) ::structure::RlcInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::RlcInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RlcInfo_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RlcInfo_structure_2eproto}, {}};

static void InitDefaultsscc_info_SecurityConfigure_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_SecurityConfigure_default_instance_;
    new (ptr) ::structure::SecurityConfigure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::SecurityConfigure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SecurityConfigure_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SecurityConfigure_structure_2eproto}, {}};

static void InitDefaultsscc_info_SuSpID_structure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::structure::_SuSpID_default_instance_;
    new (ptr) ::structure::SuSpID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::structure::SuSpID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuSpID_structure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SuSpID_structure_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_structure_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_structure_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_structure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_structure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::Pst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::Pst, dst_proc_id_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, src_proc_id_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, dst_ent_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, dst_inst_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, src_ent_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, src_inst_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, prior_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, route_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, event_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, region_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, pool_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, selector_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, interface_version_),
  PROTOBUF_FIELD_OFFSET(::structure::Pst, cell_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, cp_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, ue_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuCpID, rb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, up_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, cell_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, ue_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CuUpID, rb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::SuSpID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::SuSpID, su_id_),
  PROTOBUF_FIELD_OFFSET(::structure::SuSpID, sp_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, pst_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, cu_cp_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, cu_up_id_),
  PROTOBUF_FIELD_OFFSET(::structure::CpUpHdr, su_sp_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::SecurityConfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::SecurityConfigure, algorithm_type_),
  PROTOBUF_FIELD_OFFSET(::structure::SecurityConfigure, encryption_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, ue_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, rb_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, tnl_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunnelId, tnl_priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, tnl_id_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, interface_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, dst_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, src_addr_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, rem_teid_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, ho_src_enodeb_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, ho_type_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, id_fullcfg_),
  PROTOBUF_FIELD_OFFSET(::structure::GtpTunInfo, rlc_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, direction_),
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, mode_),
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, status_rep_require_),
  PROTOBUF_FIELD_OFFSET(::structure::RlcInfo, pdcp_sn_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressConfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressConfigure, hdr_comp_used_),
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressConfigure, max_cid_),
  PROTOBUF_FIELD_OFFSET(::structure::HeaderCompressConfigure, profile_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPConfigure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::structure::PDCPConfigure, sn_len_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPConfigure, qci_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPConfigure, discard_timer_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPConfigure, rlc_info_),
  PROTOBUF_FIELD_OFFSET(::structure::PDCPConfigure, hdr_cmp_cfg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::structure::Pst)},
  { 19, -1, sizeof(::structure::CuCpID)},
  { 28, -1, sizeof(::structure::CuUpID)},
  { 37, -1, sizeof(::structure::SuSpID)},
  { 44, -1, sizeof(::structure::CpUpHdr)},
  { 53, -1, sizeof(::structure::SecurityConfigure)},
  { 60, -1, sizeof(::structure::GtpTunnelId)},
  { 69, -1, sizeof(::structure::GtpTunInfo)},
  { 83, -1, sizeof(::structure::RlcInfo)},
  { 92, -1, sizeof(::structure::HeaderCompressConfigure)},
  { 100, -1, sizeof(::structure::PDCPConfigure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_Pst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CuCpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CuUpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_SuSpID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_CpUpHdr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_SecurityConfigure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_GtpTunnelId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_GtpTunInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_RlcInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_HeaderCompressConfigure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::structure::_PDCPConfigure_default_instance_),
};

const char descriptor_table_protodef_structure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017structure.proto\022\tstructure\032\014common.pro"
  "to\"\376\001\n\003Pst\022\023\n\013dst_proc_id\030\n \001(\r\022\023\n\013src_p"
  "roc_id\030\013 \001(\r\022\017\n\007dst_ent\030\024 \001(\r\022\020\n\010dst_ins"
  "t\030\025 \001(\r\022\017\n\007src_ent\030\036 \001(\r\022\020\n\010src_inst\030\037 \001"
  "(\r\022\r\n\005prior\030( \001(\r\022\r\n\005route\030- \001(\r\022\r\n\005even"
  "t\0302 \001(\r\022\016\n\006region\0307 \001(\r\022\014\n\004pool\030< \001(\r\022\020\n"
  "\010selector\030A \001(\r\022\031\n\021interface_version\030F \001"
  "(\r\022\017\n\007cell_id\030K \001(\r\"F\n\006CuCpID\022\r\n\005cp_id\030\n"
  " \001(\r\022\017\n\007cell_id\030\024 \001(\r\022\r\n\005ue_id\030\036 \001(\r\022\r\n\005"
  "rb_id\030( \001(\r\"F\n\006CuUpID\022\r\n\005up_id\030\n \001(\r\022\017\n\007"
  "cell_id\030\024 \001(\r\022\r\n\005ue_id\030\036 \001(\004\022\r\n\005rb_id\030( "
  "\001(\r\"&\n\006SuSpID\022\r\n\005su_id\030\n \001(\r\022\r\n\005sp_id\030\024 "
  "\001(\r\"\225\001\n\007CpUpHdr\022\033\n\003pst\030\n \001(\0132\016.structure"
  ".Pst\022#\n\010cu_cp_id\030\024 \001(\0132\021.structure.CuCpI"
  "D\022#\n\010cu_up_id\030\036 \001(\0132\021.structure.CuUpID\022#"
  "\n\010su_sp_id\030( \001(\0132\021.structure.SuSpID\"C\n\021S"
  "ecurityConfigure\022\026\n\016algorithm_type\030\n \001(\r"
  "\022\026\n\016encryption_key\030\024 \003(\r\"j\n\013GtpTunnelId\022"
  "\r\n\005ue_id\030\n \001(\r\022\r\n\005rb_id\030\024 \001(\r\022\'\n\010tnl_typ"
  "e\030\036 \001(\0162\025.structure.TunnelType\022\024\n\014tnl_pr"
  "iority\030( \001(\r\"\251\002\n\nGtpTunInfo\022&\n\006tnl_id\030\n "
  "\001(\0132\026.structure.GtpTunnelId\0220\n\016interface"
  "_type\030\024 \001(\0162\030.structure.InterfaceType\022#\n"
  "\010dst_addr\030\036 \001(\0132\021.common.IpAddress\022#\n\010sr"
  "c_addr\030\037 \001(\0132\021.common.IpAddress\022\020\n\010rem_t"
  "eid\030( \001(\r\022\025\n\rho_src_enodeb\0302 \001(\010\022(\n\007ho_t"
  "ype\0303 \001(\0162\027.structure.HandoverType\022\022\n\nid"
  "_fullCfg\030< \001(\010\022\020\n\010rlc_mode\030= \001(\r\"\\\n\007RlcI"
  "nfo\022\021\n\tdirection\030\n \001(\r\022\014\n\004mode\030\024 \001(\r\022\032\n\022"
  "status_rep_require\030\036 \001(\010\022\024\n\014pdcp_sn_size"
  "\030( \001(\r\"W\n\027HeaderCompressConfigure\022\025\n\rhdr"
  "_comp_used\030\n \001(\010\022\017\n\007max_cid\030\024 \001(\r\022\024\n\014pro"
  "file_list\030\036 \003(\r\"\242\001\n\rPDCPConfigure\022\016\n\006sn_"
  "len\030\n \001(\r\022\013\n\003qci\030\024 \001(\r\022\025\n\rdiscard_timer\030"
  "\036 \001(\r\022$\n\010rlc_info\030( \001(\0132\022.structure.RlcI"
  "nfo\0227\n\013hdr_cmp_cfg\0302 \001(\0132\".structure.Hea"
  "derCompressConfigure*H\n\nTunnelType\022\006\n\002DL"
  "\020\000\022\006\n\002UL\020\001\022\017\n\013Dl_DATA_FWD\020\002\022\017\n\013UL_DATA_F"
  "WD\020\003\022\010\n\004LIPA\020\004*\'\n\rInterfaceType\022\006\n\002S1\020\000\022"
  "\006\n\002V1\020\001\022\006\n\002X2\020\002*g\n\014HandoverType\022\010\n\004NONE\020"
  "\000\022\014\n\010S1_BASED\020\001\022\014\n\010X2_BASED\020\002\022\r\n\tINTRA_B"
  "BU\020\003\022\020\n\014INTRA_DU_BBU\020\004\022\020\n\014INTER_DU_BBU\020\005"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_structure_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_structure_2eproto_sccs[11] = {
  &scc_info_CpUpHdr_structure_2eproto.base,
  &scc_info_CuCpID_structure_2eproto.base,
  &scc_info_CuUpID_structure_2eproto.base,
  &scc_info_GtpTunInfo_structure_2eproto.base,
  &scc_info_GtpTunnelId_structure_2eproto.base,
  &scc_info_HeaderCompressConfigure_structure_2eproto.base,
  &scc_info_PDCPConfigure_structure_2eproto.base,
  &scc_info_Pst_structure_2eproto.base,
  &scc_info_RlcInfo_structure_2eproto.base,
  &scc_info_SecurityConfigure_structure_2eproto.base,
  &scc_info_SuSpID_structure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_structure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_structure_2eproto = {
  false, false, descriptor_table_protodef_structure_2eproto, "structure.proto", 1688,
  &descriptor_table_structure_2eproto_once, descriptor_table_structure_2eproto_sccs, descriptor_table_structure_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_structure_2eproto::offsets,
  file_level_metadata_structure_2eproto, 11, file_level_enum_descriptors_structure_2eproto, file_level_service_descriptors_structure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_structure_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_structure_2eproto)), true);
namespace structure {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TunnelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[0];
}
bool TunnelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterfaceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[1];
}
bool InterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HandoverType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_structure_2eproto);
  return file_level_enum_descriptors_structure_2eproto[2];
}
bool HandoverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Pst::InitAsDefaultInstance() {
}
class Pst::_Internal {
 public:
};

Pst::Pst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.Pst)
}
Pst::Pst(const Pst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dst_proc_id_, &from.dst_proc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_id_) -
    reinterpret_cast<char*>(&dst_proc_id_)) + sizeof(cell_id_));
  // @@protoc_insertion_point(copy_constructor:structure.Pst)
}

void Pst::SharedCtor() {
  ::memset(&dst_proc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&dst_proc_id_)) + sizeof(cell_id_));
}

Pst::~Pst() {
  // @@protoc_insertion_point(destructor:structure.Pst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pst::ArenaDtor(void* object) {
  Pst* _this = reinterpret_cast< Pst* >(object);
  (void)_this;
}
void Pst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pst& Pst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pst_structure_2eproto.base);
  return *internal_default_instance();
}


void Pst::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.Pst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dst_proc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&dst_proc_id_)) + sizeof(cell_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 dst_proc_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          dst_proc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_proc_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          src_proc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_ent = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          dst_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst_inst = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          dst_inst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_ent = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          src_ent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src_inst = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          src_inst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 prior = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          prior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 route = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 event = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 region = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pool = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 selector = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          selector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 interface_version = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          interface_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_id = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.Pst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dst_proc_id = 10;
  if (this->dst_proc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dst_proc_id(), target);
  }

  // uint32 src_proc_id = 11;
  if (this->src_proc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_src_proc_id(), target);
  }

  // uint32 dst_ent = 20;
  if (this->dst_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_dst_ent(), target);
  }

  // uint32 dst_inst = 21;
  if (this->dst_inst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dst_inst(), target);
  }

  // uint32 src_ent = 30;
  if (this->src_ent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_src_ent(), target);
  }

  // uint32 src_inst = 31;
  if (this->src_inst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_src_inst(), target);
  }

  // uint32 prior = 40;
  if (this->prior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_prior(), target);
  }

  // uint32 route = 45;
  if (this->route() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_route(), target);
  }

  // uint32 event = 50;
  if (this->event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_event(), target);
  }

  // uint32 region = 55;
  if (this->region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_region(), target);
  }

  // uint32 pool = 60;
  if (this->pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_pool(), target);
  }

  // uint32 selector = 65;
  if (this->selector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_selector(), target);
  }

  // uint32 interface_version = 70;
  if (this->interface_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_interface_version(), target);
  }

  // uint32 cell_id = 75;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.Pst)
  return target;
}

size_t Pst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.Pst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 dst_proc_id = 10;
  if (this->dst_proc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_proc_id());
  }

  // uint32 src_proc_id = 11;
  if (this->src_proc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_proc_id());
  }

  // uint32 dst_ent = 20;
  if (this->dst_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_ent());
  }

  // uint32 dst_inst = 21;
  if (this->dst_inst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst_inst());
  }

  // uint32 src_ent = 30;
  if (this->src_ent() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_ent());
  }

  // uint32 src_inst = 31;
  if (this->src_inst() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src_inst());
  }

  // uint32 prior = 40;
  if (this->prior() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_prior());
  }

  // uint32 route = 45;
  if (this->route() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_route());
  }

  // uint32 event = 50;
  if (this->event() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event());
  }

  // uint32 region = 55;
  if (this->region() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_region());
  }

  // uint32 pool = 60;
  if (this->pool() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pool());
  }

  // uint32 selector = 65;
  if (this->selector() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_selector());
  }

  // uint32 interface_version = 70;
  if (this->interface_version() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_interface_version());
  }

  // uint32 cell_id = 75;
  if (this->cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.Pst)
  GOOGLE_DCHECK_NE(&from, this);
  const Pst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.Pst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.Pst)
    MergeFrom(*source);
  }
}

void Pst::MergeFrom(const Pst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.Pst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dst_proc_id() != 0) {
    _internal_set_dst_proc_id(from._internal_dst_proc_id());
  }
  if (from.src_proc_id() != 0) {
    _internal_set_src_proc_id(from._internal_src_proc_id());
  }
  if (from.dst_ent() != 0) {
    _internal_set_dst_ent(from._internal_dst_ent());
  }
  if (from.dst_inst() != 0) {
    _internal_set_dst_inst(from._internal_dst_inst());
  }
  if (from.src_ent() != 0) {
    _internal_set_src_ent(from._internal_src_ent());
  }
  if (from.src_inst() != 0) {
    _internal_set_src_inst(from._internal_src_inst());
  }
  if (from.prior() != 0) {
    _internal_set_prior(from._internal_prior());
  }
  if (from.route() != 0) {
    _internal_set_route(from._internal_route());
  }
  if (from.event() != 0) {
    _internal_set_event(from._internal_event());
  }
  if (from.region() != 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.pool() != 0) {
    _internal_set_pool(from._internal_pool());
  }
  if (from.selector() != 0) {
    _internal_set_selector(from._internal_selector());
  }
  if (from.interface_version() != 0) {
    _internal_set_interface_version(from._internal_interface_version());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
}

void Pst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.Pst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pst::CopyFrom(const Pst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.Pst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pst::IsInitialized() const {
  return true;
}

void Pst::InternalSwap(Pst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pst, cell_id_)
      + sizeof(Pst::cell_id_)
      - PROTOBUF_FIELD_OFFSET(Pst, dst_proc_id_)>(
          reinterpret_cast<char*>(&dst_proc_id_),
          reinterpret_cast<char*>(&other->dst_proc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CuCpID::InitAsDefaultInstance() {
}
class CuCpID::_Internal {
 public:
};

CuCpID::CuCpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CuCpID)
}
CuCpID::CuCpID(const CuCpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cp_id_, &from.cp_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rb_id_) -
    reinterpret_cast<char*>(&cp_id_)) + sizeof(rb_id_));
  // @@protoc_insertion_point(copy_constructor:structure.CuCpID)
}

void CuCpID::SharedCtor() {
  ::memset(&cp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_id_) -
      reinterpret_cast<char*>(&cp_id_)) + sizeof(rb_id_));
}

CuCpID::~CuCpID() {
  // @@protoc_insertion_point(destructor:structure.CuCpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CuCpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CuCpID::ArenaDtor(void* object) {
  CuCpID* _this = reinterpret_cast< CuCpID* >(object);
  (void)_this;
}
void CuCpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CuCpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CuCpID& CuCpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CuCpID_structure_2eproto.base);
  return *internal_default_instance();
}


void CuCpID::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CuCpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rb_id_) -
      reinterpret_cast<char*>(&cp_id_)) + sizeof(rb_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CuCpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 cp_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ue_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rb_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CuCpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CuCpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cp_id = 10;
  if (this->cp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cp_id(), target);
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cell_id(), target);
  }

  // uint32 ue_id = 30;
  if (this->ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_ue_id(), target);
  }

  // uint32 rb_id = 40;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_rb_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CuCpID)
  return target;
}

size_t CuCpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CuCpID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 cp_id = 10;
  if (this->cp_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cp_id());
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  // uint32 ue_id = 30;
  if (this->ue_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ue_id());
  }

  // uint32 rb_id = 40;
  if (this->rb_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CuCpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CuCpID)
  GOOGLE_DCHECK_NE(&from, this);
  const CuCpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CuCpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CuCpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CuCpID)
    MergeFrom(*source);
  }
}

void CuCpID::MergeFrom(const CuCpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CuCpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cp_id() != 0) {
    _internal_set_cp_id(from._internal_cp_id());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
  if (from.ue_id() != 0) {
    _internal_set_ue_id(from._internal_ue_id());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
}

void CuCpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CuCpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CuCpID::CopyFrom(const CuCpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CuCpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CuCpID::IsInitialized() const {
  return true;
}

void CuCpID::InternalSwap(CuCpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CuCpID, rb_id_)
      + sizeof(CuCpID::rb_id_)
      - PROTOBUF_FIELD_OFFSET(CuCpID, cp_id_)>(
          reinterpret_cast<char*>(&cp_id_),
          reinterpret_cast<char*>(&other->cp_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CuCpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CuUpID::InitAsDefaultInstance() {
}
class CuUpID::_Internal {
 public:
};

CuUpID::CuUpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CuUpID)
}
CuUpID::CuUpID(const CuUpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rb_id_, &from.rb_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ue_id_) -
    reinterpret_cast<char*>(&rb_id_)) + sizeof(ue_id_));
  // @@protoc_insertion_point(copy_constructor:structure.CuUpID)
}

void CuUpID::SharedCtor() {
  ::memset(&rb_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_id_) -
      reinterpret_cast<char*>(&rb_id_)) + sizeof(ue_id_));
}

CuUpID::~CuUpID() {
  // @@protoc_insertion_point(destructor:structure.CuUpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CuUpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CuUpID::ArenaDtor(void* object) {
  CuUpID* _this = reinterpret_cast< CuUpID* >(object);
  (void)_this;
}
void CuUpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CuUpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CuUpID& CuUpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CuUpID_structure_2eproto.base);
  return *internal_default_instance();
}


void CuUpID::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CuUpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rb_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_id_) -
      reinterpret_cast<char*>(&rb_id_)) + sizeof(ue_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CuUpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 up_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          up_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cell_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ue_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rb_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CuUpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CuUpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 up_id = 10;
  if (this->up_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_up_id(), target);
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cell_id(), target);
  }

  // uint64 ue_id = 30;
  if (this->ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_ue_id(), target);
  }

  // uint32 rb_id = 40;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_rb_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CuUpID)
  return target;
}

size_t CuUpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CuUpID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rb_id = 40;
  if (this->rb_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // uint32 up_id = 10;
  if (this->up_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_up_id());
  }

  // uint32 cell_id = 20;
  if (this->cell_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_id());
  }

  // uint64 ue_id = 30;
  if (this->ue_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ue_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CuUpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CuUpID)
  GOOGLE_DCHECK_NE(&from, this);
  const CuUpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CuUpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CuUpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CuUpID)
    MergeFrom(*source);
  }
}

void CuUpID::MergeFrom(const CuUpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CuUpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.up_id() != 0) {
    _internal_set_up_id(from._internal_up_id());
  }
  if (from.cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
  if (from.ue_id() != 0) {
    _internal_set_ue_id(from._internal_ue_id());
  }
}

void CuUpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CuUpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CuUpID::CopyFrom(const CuUpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CuUpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CuUpID::IsInitialized() const {
  return true;
}

void CuUpID::InternalSwap(CuUpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CuUpID, ue_id_)
      + sizeof(CuUpID::ue_id_)
      - PROTOBUF_FIELD_OFFSET(CuUpID, rb_id_)>(
          reinterpret_cast<char*>(&rb_id_),
          reinterpret_cast<char*>(&other->rb_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CuUpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SuSpID::InitAsDefaultInstance() {
}
class SuSpID::_Internal {
 public:
};

SuSpID::SuSpID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.SuSpID)
}
SuSpID::SuSpID(const SuSpID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&su_id_, &from.su_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sp_id_) -
    reinterpret_cast<char*>(&su_id_)) + sizeof(sp_id_));
  // @@protoc_insertion_point(copy_constructor:structure.SuSpID)
}

void SuSpID::SharedCtor() {
  ::memset(&su_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sp_id_) -
      reinterpret_cast<char*>(&su_id_)) + sizeof(sp_id_));
}

SuSpID::~SuSpID() {
  // @@protoc_insertion_point(destructor:structure.SuSpID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SuSpID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SuSpID::ArenaDtor(void* object) {
  SuSpID* _this = reinterpret_cast< SuSpID* >(object);
  (void)_this;
}
void SuSpID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuSpID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuSpID& SuSpID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuSpID_structure_2eproto.base);
  return *internal_default_instance();
}


void SuSpID::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.SuSpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&su_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sp_id_) -
      reinterpret_cast<char*>(&su_id_)) + sizeof(sp_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuSpID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 su_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          su_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sp_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          sp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuSpID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.SuSpID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 su_id = 10;
  if (this->su_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_su_id(), target);
  }

  // uint32 sp_id = 20;
  if (this->sp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_sp_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.SuSpID)
  return target;
}

size_t SuSpID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.SuSpID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 su_id = 10;
  if (this->su_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_su_id());
  }

  // uint32 sp_id = 20;
  if (this->sp_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sp_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuSpID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.SuSpID)
  GOOGLE_DCHECK_NE(&from, this);
  const SuSpID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuSpID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.SuSpID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.SuSpID)
    MergeFrom(*source);
  }
}

void SuSpID::MergeFrom(const SuSpID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.SuSpID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.su_id() != 0) {
    _internal_set_su_id(from._internal_su_id());
  }
  if (from.sp_id() != 0) {
    _internal_set_sp_id(from._internal_sp_id());
  }
}

void SuSpID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.SuSpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuSpID::CopyFrom(const SuSpID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.SuSpID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuSpID::IsInitialized() const {
  return true;
}

void SuSpID::InternalSwap(SuSpID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuSpID, sp_id_)
      + sizeof(SuSpID::sp_id_)
      - PROTOBUF_FIELD_OFFSET(SuSpID, su_id_)>(
          reinterpret_cast<char*>(&su_id_),
          reinterpret_cast<char*>(&other->su_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SuSpID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CpUpHdr::InitAsDefaultInstance() {
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->pst_ = const_cast< ::structure::Pst*>(
      ::structure::Pst::internal_default_instance());
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->cu_cp_id_ = const_cast< ::structure::CuCpID*>(
      ::structure::CuCpID::internal_default_instance());
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->cu_up_id_ = const_cast< ::structure::CuUpID*>(
      ::structure::CuUpID::internal_default_instance());
  ::structure::_CpUpHdr_default_instance_._instance.get_mutable()->su_sp_id_ = const_cast< ::structure::SuSpID*>(
      ::structure::SuSpID::internal_default_instance());
}
class CpUpHdr::_Internal {
 public:
  static const ::structure::Pst& pst(const CpUpHdr* msg);
  static const ::structure::CuCpID& cu_cp_id(const CpUpHdr* msg);
  static const ::structure::CuUpID& cu_up_id(const CpUpHdr* msg);
  static const ::structure::SuSpID& su_sp_id(const CpUpHdr* msg);
};

const ::structure::Pst&
CpUpHdr::_Internal::pst(const CpUpHdr* msg) {
  return *msg->pst_;
}
const ::structure::CuCpID&
CpUpHdr::_Internal::cu_cp_id(const CpUpHdr* msg) {
  return *msg->cu_cp_id_;
}
const ::structure::CuUpID&
CpUpHdr::_Internal::cu_up_id(const CpUpHdr* msg) {
  return *msg->cu_up_id_;
}
const ::structure::SuSpID&
CpUpHdr::_Internal::su_sp_id(const CpUpHdr* msg) {
  return *msg->su_sp_id_;
}
CpUpHdr::CpUpHdr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.CpUpHdr)
}
CpUpHdr::CpUpHdr(const CpUpHdr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pst()) {
    pst_ = new ::structure::Pst(*from.pst_);
  } else {
    pst_ = nullptr;
  }
  if (from._internal_has_cu_cp_id()) {
    cu_cp_id_ = new ::structure::CuCpID(*from.cu_cp_id_);
  } else {
    cu_cp_id_ = nullptr;
  }
  if (from._internal_has_cu_up_id()) {
    cu_up_id_ = new ::structure::CuUpID(*from.cu_up_id_);
  } else {
    cu_up_id_ = nullptr;
  }
  if (from._internal_has_su_sp_id()) {
    su_sp_id_ = new ::structure::SuSpID(*from.su_sp_id_);
  } else {
    su_sp_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:structure.CpUpHdr)
}

void CpUpHdr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpUpHdr_structure_2eproto.base);
  ::memset(&pst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&su_sp_id_) -
      reinterpret_cast<char*>(&pst_)) + sizeof(su_sp_id_));
}

CpUpHdr::~CpUpHdr() {
  // @@protoc_insertion_point(destructor:structure.CpUpHdr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CpUpHdr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pst_;
  if (this != internal_default_instance()) delete cu_cp_id_;
  if (this != internal_default_instance()) delete cu_up_id_;
  if (this != internal_default_instance()) delete su_sp_id_;
}

void CpUpHdr::ArenaDtor(void* object) {
  CpUpHdr* _this = reinterpret_cast< CpUpHdr* >(object);
  (void)_this;
}
void CpUpHdr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CpUpHdr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpUpHdr& CpUpHdr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpUpHdr_structure_2eproto.base);
  return *internal_default_instance();
}


void CpUpHdr::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.CpUpHdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pst_ != nullptr) {
    delete pst_;
  }
  pst_ = nullptr;
  if (GetArena() == nullptr && cu_cp_id_ != nullptr) {
    delete cu_cp_id_;
  }
  cu_cp_id_ = nullptr;
  if (GetArena() == nullptr && cu_up_id_ != nullptr) {
    delete cu_up_id_;
  }
  cu_up_id_ = nullptr;
  if (GetArena() == nullptr && su_sp_id_ != nullptr) {
    delete su_sp_id_;
  }
  su_sp_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CpUpHdr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.Pst pst = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CuCpID cu_cp_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_cu_cp_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.CuUpID cu_up_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_cu_up_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.SuSpID su_sp_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_su_sp_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CpUpHdr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.CpUpHdr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.Pst pst = 10;
  if (this->has_pst()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::pst(this), target, stream);
  }

  // .structure.CuCpID cu_cp_id = 20;
  if (this->has_cu_cp_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::cu_cp_id(this), target, stream);
  }

  // .structure.CuUpID cu_up_id = 30;
  if (this->has_cu_up_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::cu_up_id(this), target, stream);
  }

  // .structure.SuSpID su_sp_id = 40;
  if (this->has_su_sp_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::su_sp_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.CpUpHdr)
  return target;
}

size_t CpUpHdr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.CpUpHdr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.Pst pst = 10;
  if (this->has_pst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pst_);
  }

  // .structure.CuCpID cu_cp_id = 20;
  if (this->has_cu_cp_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cu_cp_id_);
  }

  // .structure.CuUpID cu_up_id = 30;
  if (this->has_cu_up_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cu_up_id_);
  }

  // .structure.SuSpID su_sp_id = 40;
  if (this->has_su_sp_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *su_sp_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpUpHdr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.CpUpHdr)
  GOOGLE_DCHECK_NE(&from, this);
  const CpUpHdr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CpUpHdr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.CpUpHdr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.CpUpHdr)
    MergeFrom(*source);
  }
}

void CpUpHdr::MergeFrom(const CpUpHdr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.CpUpHdr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pst()) {
    _internal_mutable_pst()->::structure::Pst::MergeFrom(from._internal_pst());
  }
  if (from.has_cu_cp_id()) {
    _internal_mutable_cu_cp_id()->::structure::CuCpID::MergeFrom(from._internal_cu_cp_id());
  }
  if (from.has_cu_up_id()) {
    _internal_mutable_cu_up_id()->::structure::CuUpID::MergeFrom(from._internal_cu_up_id());
  }
  if (from.has_su_sp_id()) {
    _internal_mutable_su_sp_id()->::structure::SuSpID::MergeFrom(from._internal_su_sp_id());
  }
}

void CpUpHdr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.CpUpHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpUpHdr::CopyFrom(const CpUpHdr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.CpUpHdr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpUpHdr::IsInitialized() const {
  return true;
}

void CpUpHdr::InternalSwap(CpUpHdr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CpUpHdr, su_sp_id_)
      + sizeof(CpUpHdr::su_sp_id_)
      - PROTOBUF_FIELD_OFFSET(CpUpHdr, pst_)>(
          reinterpret_cast<char*>(&pst_),
          reinterpret_cast<char*>(&other->pst_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CpUpHdr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SecurityConfigure::InitAsDefaultInstance() {
}
class SecurityConfigure::_Internal {
 public:
};

SecurityConfigure::SecurityConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  encryption_key_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.SecurityConfigure)
}
SecurityConfigure::SecurityConfigure(const SecurityConfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      encryption_key_(from.encryption_key_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_type_ = from.algorithm_type_;
  // @@protoc_insertion_point(copy_constructor:structure.SecurityConfigure)
}

void SecurityConfigure::SharedCtor() {
  algorithm_type_ = 0u;
}

SecurityConfigure::~SecurityConfigure() {
  // @@protoc_insertion_point(destructor:structure.SecurityConfigure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SecurityConfigure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SecurityConfigure::ArenaDtor(void* object) {
  SecurityConfigure* _this = reinterpret_cast< SecurityConfigure* >(object);
  (void)_this;
}
void SecurityConfigure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityConfigure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecurityConfigure& SecurityConfigure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecurityConfigure_structure_2eproto.base);
  return *internal_default_instance();
}


void SecurityConfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.SecurityConfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encryption_key_.Clear();
  algorithm_type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityConfigure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 algorithm_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          algorithm_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 encryption_key = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_encryption_key(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160) {
          _internal_add_encryption_key(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SecurityConfigure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.SecurityConfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 algorithm_type = 10;
  if (this->algorithm_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_algorithm_type(), target);
  }

  // repeated uint32 encryption_key = 20;
  {
    int byte_size = _encryption_key_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          20, _internal_encryption_key(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.SecurityConfigure)
  return target;
}

size_t SecurityConfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.SecurityConfigure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 encryption_key = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->encryption_key_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _encryption_key_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 algorithm_type = 10;
  if (this->algorithm_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_algorithm_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecurityConfigure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.SecurityConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  const SecurityConfigure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SecurityConfigure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.SecurityConfigure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.SecurityConfigure)
    MergeFrom(*source);
  }
}

void SecurityConfigure::MergeFrom(const SecurityConfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.SecurityConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encryption_key_.MergeFrom(from.encryption_key_);
  if (from.algorithm_type() != 0) {
    _internal_set_algorithm_type(from._internal_algorithm_type());
  }
}

void SecurityConfigure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.SecurityConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityConfigure::CopyFrom(const SecurityConfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.SecurityConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityConfigure::IsInitialized() const {
  return true;
}

void SecurityConfigure::InternalSwap(SecurityConfigure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encryption_key_.InternalSwap(&other->encryption_key_);
  swap(algorithm_type_, other->algorithm_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityConfigure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtpTunnelId::InitAsDefaultInstance() {
}
class GtpTunnelId::_Internal {
 public:
};

GtpTunnelId::GtpTunnelId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.GtpTunnelId)
}
GtpTunnelId::GtpTunnelId(const GtpTunnelId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ue_id_, &from.ue_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tnl_priority_) -
    reinterpret_cast<char*>(&ue_id_)) + sizeof(tnl_priority_));
  // @@protoc_insertion_point(copy_constructor:structure.GtpTunnelId)
}

void GtpTunnelId::SharedCtor() {
  ::memset(&ue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tnl_priority_) -
      reinterpret_cast<char*>(&ue_id_)) + sizeof(tnl_priority_));
}

GtpTunnelId::~GtpTunnelId() {
  // @@protoc_insertion_point(destructor:structure.GtpTunnelId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GtpTunnelId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GtpTunnelId::ArenaDtor(void* object) {
  GtpTunnelId* _this = reinterpret_cast< GtpTunnelId* >(object);
  (void)_this;
}
void GtpTunnelId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GtpTunnelId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtpTunnelId& GtpTunnelId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtpTunnelId_structure_2eproto.base);
  return *internal_default_instance();
}


void GtpTunnelId::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.GtpTunnelId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ue_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tnl_priority_) -
      reinterpret_cast<char*>(&ue_id_)) + sizeof(tnl_priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GtpTunnelId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ue_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rb_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          rb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.TunnelType tnl_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tnl_type(static_cast<::structure::TunnelType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 tnl_priority = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tnl_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtpTunnelId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.GtpTunnelId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ue_id = 10;
  if (this->ue_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ue_id(), target);
  }

  // uint32 rb_id = 20;
  if (this->rb_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_rb_id(), target);
  }

  // .structure.TunnelType tnl_type = 30;
  if (this->tnl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_tnl_type(), target);
  }

  // uint32 tnl_priority = 40;
  if (this->tnl_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_tnl_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.GtpTunnelId)
  return target;
}

size_t GtpTunnelId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.GtpTunnelId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ue_id = 10;
  if (this->ue_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ue_id());
  }

  // uint32 rb_id = 20;
  if (this->rb_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rb_id());
  }

  // .structure.TunnelType tnl_type = 30;
  if (this->tnl_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tnl_type());
  }

  // uint32 tnl_priority = 40;
  if (this->tnl_priority() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tnl_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtpTunnelId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.GtpTunnelId)
  GOOGLE_DCHECK_NE(&from, this);
  const GtpTunnelId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtpTunnelId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.GtpTunnelId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.GtpTunnelId)
    MergeFrom(*source);
  }
}

void GtpTunnelId::MergeFrom(const GtpTunnelId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.GtpTunnelId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ue_id() != 0) {
    _internal_set_ue_id(from._internal_ue_id());
  }
  if (from.rb_id() != 0) {
    _internal_set_rb_id(from._internal_rb_id());
  }
  if (from.tnl_type() != 0) {
    _internal_set_tnl_type(from._internal_tnl_type());
  }
  if (from.tnl_priority() != 0) {
    _internal_set_tnl_priority(from._internal_tnl_priority());
  }
}

void GtpTunnelId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.GtpTunnelId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtpTunnelId::CopyFrom(const GtpTunnelId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.GtpTunnelId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtpTunnelId::IsInitialized() const {
  return true;
}

void GtpTunnelId::InternalSwap(GtpTunnelId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GtpTunnelId, tnl_priority_)
      + sizeof(GtpTunnelId::tnl_priority_)
      - PROTOBUF_FIELD_OFFSET(GtpTunnelId, ue_id_)>(
          reinterpret_cast<char*>(&ue_id_),
          reinterpret_cast<char*>(&other->ue_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GtpTunnelId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtpTunInfo::InitAsDefaultInstance() {
  ::structure::_GtpTunInfo_default_instance_._instance.get_mutable()->tnl_id_ = const_cast< ::structure::GtpTunnelId*>(
      ::structure::GtpTunnelId::internal_default_instance());
  ::structure::_GtpTunInfo_default_instance_._instance.get_mutable()->dst_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
  ::structure::_GtpTunInfo_default_instance_._instance.get_mutable()->src_addr_ = const_cast< ::common::IpAddress*>(
      ::common::IpAddress::internal_default_instance());
}
class GtpTunInfo::_Internal {
 public:
  static const ::structure::GtpTunnelId& tnl_id(const GtpTunInfo* msg);
  static const ::common::IpAddress& dst_addr(const GtpTunInfo* msg);
  static const ::common::IpAddress& src_addr(const GtpTunInfo* msg);
};

const ::structure::GtpTunnelId&
GtpTunInfo::_Internal::tnl_id(const GtpTunInfo* msg) {
  return *msg->tnl_id_;
}
const ::common::IpAddress&
GtpTunInfo::_Internal::dst_addr(const GtpTunInfo* msg) {
  return *msg->dst_addr_;
}
const ::common::IpAddress&
GtpTunInfo::_Internal::src_addr(const GtpTunInfo* msg) {
  return *msg->src_addr_;
}
void GtpTunInfo::clear_dst_addr() {
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
}
void GtpTunInfo::clear_src_addr() {
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
}
GtpTunInfo::GtpTunInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.GtpTunInfo)
}
GtpTunInfo::GtpTunInfo(const GtpTunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tnl_id()) {
    tnl_id_ = new ::structure::GtpTunnelId(*from.tnl_id_);
  } else {
    tnl_id_ = nullptr;
  }
  if (from._internal_has_dst_addr()) {
    dst_addr_ = new ::common::IpAddress(*from.dst_addr_);
  } else {
    dst_addr_ = nullptr;
  }
  if (from._internal_has_src_addr()) {
    src_addr_ = new ::common::IpAddress(*from.src_addr_);
  } else {
    src_addr_ = nullptr;
  }
  ::memcpy(&rlc_mode_, &from.rlc_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_fullcfg_) -
    reinterpret_cast<char*>(&rlc_mode_)) + sizeof(id_fullcfg_));
  // @@protoc_insertion_point(copy_constructor:structure.GtpTunInfo)
}

void GtpTunInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GtpTunInfo_structure_2eproto.base);
  ::memset(&tnl_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_fullcfg_) -
      reinterpret_cast<char*>(&tnl_id_)) + sizeof(id_fullcfg_));
}

GtpTunInfo::~GtpTunInfo() {
  // @@protoc_insertion_point(destructor:structure.GtpTunInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GtpTunInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tnl_id_;
  if (this != internal_default_instance()) delete dst_addr_;
  if (this != internal_default_instance()) delete src_addr_;
}

void GtpTunInfo::ArenaDtor(void* object) {
  GtpTunInfo* _this = reinterpret_cast< GtpTunInfo* >(object);
  (void)_this;
}
void GtpTunInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GtpTunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtpTunInfo& GtpTunInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtpTunInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void GtpTunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.GtpTunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tnl_id_ != nullptr) {
    delete tnl_id_;
  }
  tnl_id_ = nullptr;
  if (GetArena() == nullptr && dst_addr_ != nullptr) {
    delete dst_addr_;
  }
  dst_addr_ = nullptr;
  if (GetArena() == nullptr && src_addr_ != nullptr) {
    delete src_addr_;
  }
  src_addr_ = nullptr;
  ::memset(&rlc_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_fullcfg_) -
      reinterpret_cast<char*>(&rlc_mode_)) + sizeof(id_fullcfg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GtpTunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .structure.GtpTunnelId tnl_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tnl_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.InterfaceType interface_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interface_type(static_cast<::structure::InterfaceType>(val));
        } else goto handle_unusual;
        continue;
      // .common.IpAddress dst_addr = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .common.IpAddress src_addr = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rem_teid = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rem_teid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ho_src_enodeb = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ho_src_enodeb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HandoverType ho_type = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ho_type(static_cast<::structure::HandoverType>(val));
        } else goto handle_unusual;
        continue;
      // bool id_fullCfg = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          id_fullcfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rlc_mode = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          rlc_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtpTunInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.GtpTunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .structure.GtpTunnelId tnl_id = 10;
  if (this->has_tnl_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::tnl_id(this), target, stream);
  }

  // .structure.InterfaceType interface_type = 20;
  if (this->interface_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_interface_type(), target);
  }

  // .common.IpAddress dst_addr = 30;
  if (this->has_dst_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::dst_addr(this), target, stream);
  }

  // .common.IpAddress src_addr = 31;
  if (this->has_src_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::src_addr(this), target, stream);
  }

  // uint32 rem_teid = 40;
  if (this->rem_teid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_rem_teid(), target);
  }

  // bool ho_src_enodeb = 50;
  if (this->ho_src_enodeb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_ho_src_enodeb(), target);
  }

  // .structure.HandoverType ho_type = 51;
  if (this->ho_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      51, this->_internal_ho_type(), target);
  }

  // bool id_fullCfg = 60;
  if (this->id_fullcfg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_id_fullcfg(), target);
  }

  // uint32 rlc_mode = 61;
  if (this->rlc_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_rlc_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.GtpTunInfo)
  return target;
}

size_t GtpTunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.GtpTunInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.GtpTunnelId tnl_id = 10;
  if (this->has_tnl_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tnl_id_);
  }

  // .common.IpAddress dst_addr = 30;
  if (this->has_dst_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_addr_);
  }

  // .common.IpAddress src_addr = 31;
  if (this->has_src_addr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_addr_);
  }

  // uint32 rlc_mode = 61;
  if (this->rlc_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rlc_mode());
  }

  // .structure.InterfaceType interface_type = 20;
  if (this->interface_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interface_type());
  }

  // uint32 rem_teid = 40;
  if (this->rem_teid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rem_teid());
  }

  // .structure.HandoverType ho_type = 51;
  if (this->ho_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ho_type());
  }

  // bool ho_src_enodeb = 50;
  if (this->ho_src_enodeb() != 0) {
    total_size += 2 + 1;
  }

  // bool id_fullCfg = 60;
  if (this->id_fullcfg() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtpTunInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.GtpTunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GtpTunInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtpTunInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.GtpTunInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.GtpTunInfo)
    MergeFrom(*source);
  }
}

void GtpTunInfo::MergeFrom(const GtpTunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.GtpTunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tnl_id()) {
    _internal_mutable_tnl_id()->::structure::GtpTunnelId::MergeFrom(from._internal_tnl_id());
  }
  if (from.has_dst_addr()) {
    _internal_mutable_dst_addr()->::common::IpAddress::MergeFrom(from._internal_dst_addr());
  }
  if (from.has_src_addr()) {
    _internal_mutable_src_addr()->::common::IpAddress::MergeFrom(from._internal_src_addr());
  }
  if (from.rlc_mode() != 0) {
    _internal_set_rlc_mode(from._internal_rlc_mode());
  }
  if (from.interface_type() != 0) {
    _internal_set_interface_type(from._internal_interface_type());
  }
  if (from.rem_teid() != 0) {
    _internal_set_rem_teid(from._internal_rem_teid());
  }
  if (from.ho_type() != 0) {
    _internal_set_ho_type(from._internal_ho_type());
  }
  if (from.ho_src_enodeb() != 0) {
    _internal_set_ho_src_enodeb(from._internal_ho_src_enodeb());
  }
  if (from.id_fullcfg() != 0) {
    _internal_set_id_fullcfg(from._internal_id_fullcfg());
  }
}

void GtpTunInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.GtpTunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtpTunInfo::CopyFrom(const GtpTunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.GtpTunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtpTunInfo::IsInitialized() const {
  return true;
}

void GtpTunInfo::InternalSwap(GtpTunInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GtpTunInfo, id_fullcfg_)
      + sizeof(GtpTunInfo::id_fullcfg_)
      - PROTOBUF_FIELD_OFFSET(GtpTunInfo, tnl_id_)>(
          reinterpret_cast<char*>(&tnl_id_),
          reinterpret_cast<char*>(&other->tnl_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GtpTunInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RlcInfo::InitAsDefaultInstance() {
}
class RlcInfo::_Internal {
 public:
};

RlcInfo::RlcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.RlcInfo)
}
RlcInfo::RlcInfo(const RlcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdcp_sn_size_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(pdcp_sn_size_));
  // @@protoc_insertion_point(copy_constructor:structure.RlcInfo)
}

void RlcInfo::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdcp_sn_size_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(pdcp_sn_size_));
}

RlcInfo::~RlcInfo() {
  // @@protoc_insertion_point(destructor:structure.RlcInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RlcInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RlcInfo::ArenaDtor(void* object) {
  RlcInfo* _this = reinterpret_cast< RlcInfo* >(object);
  (void)_this;
}
void RlcInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RlcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RlcInfo& RlcInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RlcInfo_structure_2eproto.base);
  return *internal_default_instance();
}


void RlcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.RlcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdcp_sn_size_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(pdcp_sn_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RlcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 direction = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mode = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool status_rep_require = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          status_rep_require_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pdcp_sn_size = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pdcp_sn_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RlcInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.RlcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 direction = 10;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_direction(), target);
  }

  // uint32 mode = 20;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_mode(), target);
  }

  // bool status_rep_require = 30;
  if (this->status_rep_require() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_status_rep_require(), target);
  }

  // uint32 pdcp_sn_size = 40;
  if (this->pdcp_sn_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_pdcp_sn_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.RlcInfo)
  return target;
}

size_t RlcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.RlcInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 direction = 10;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_direction());
  }

  // uint32 mode = 20;
  if (this->mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mode());
  }

  // bool status_rep_require = 30;
  if (this->status_rep_require() != 0) {
    total_size += 2 + 1;
  }

  // uint32 pdcp_sn_size = 40;
  if (this->pdcp_sn_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdcp_sn_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RlcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.RlcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RlcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RlcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.RlcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.RlcInfo)
    MergeFrom(*source);
  }
}

void RlcInfo::MergeFrom(const RlcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.RlcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.status_rep_require() != 0) {
    _internal_set_status_rep_require(from._internal_status_rep_require());
  }
  if (from.pdcp_sn_size() != 0) {
    _internal_set_pdcp_sn_size(from._internal_pdcp_sn_size());
  }
}

void RlcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.RlcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RlcInfo::CopyFrom(const RlcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.RlcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RlcInfo::IsInitialized() const {
  return true;
}

void RlcInfo::InternalSwap(RlcInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RlcInfo, pdcp_sn_size_)
      + sizeof(RlcInfo::pdcp_sn_size_)
      - PROTOBUF_FIELD_OFFSET(RlcInfo, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RlcInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeaderCompressConfigure::InitAsDefaultInstance() {
}
class HeaderCompressConfigure::_Internal {
 public:
};

HeaderCompressConfigure::HeaderCompressConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  profile_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.HeaderCompressConfigure)
}
HeaderCompressConfigure::HeaderCompressConfigure(const HeaderCompressConfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      profile_list_(from.profile_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hdr_comp_used_, &from.hdr_comp_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_cid_) -
    reinterpret_cast<char*>(&hdr_comp_used_)) + sizeof(max_cid_));
  // @@protoc_insertion_point(copy_constructor:structure.HeaderCompressConfigure)
}

void HeaderCompressConfigure::SharedCtor() {
  ::memset(&hdr_comp_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cid_) -
      reinterpret_cast<char*>(&hdr_comp_used_)) + sizeof(max_cid_));
}

HeaderCompressConfigure::~HeaderCompressConfigure() {
  // @@protoc_insertion_point(destructor:structure.HeaderCompressConfigure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeaderCompressConfigure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeaderCompressConfigure::ArenaDtor(void* object) {
  HeaderCompressConfigure* _this = reinterpret_cast< HeaderCompressConfigure* >(object);
  (void)_this;
}
void HeaderCompressConfigure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderCompressConfigure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeaderCompressConfigure& HeaderCompressConfigure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeaderCompressConfigure_structure_2eproto.base);
  return *internal_default_instance();
}


void HeaderCompressConfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.HeaderCompressConfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_list_.Clear();
  ::memset(&hdr_comp_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_cid_) -
      reinterpret_cast<char*>(&hdr_comp_used_)) + sizeof(max_cid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderCompressConfigure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool hdr_comp_used = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hdr_comp_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_cid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          max_cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 profile_list = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_profile_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240) {
          _internal_add_profile_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderCompressConfigure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.HeaderCompressConfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool hdr_comp_used = 10;
  if (this->hdr_comp_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_hdr_comp_used(), target);
  }

  // uint32 max_cid = 20;
  if (this->max_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_max_cid(), target);
  }

  // repeated uint32 profile_list = 30;
  {
    int byte_size = _profile_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          30, _internal_profile_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.HeaderCompressConfigure)
  return target;
}

size_t HeaderCompressConfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.HeaderCompressConfigure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 profile_list = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->profile_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _profile_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool hdr_comp_used = 10;
  if (this->hdr_comp_used() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_cid = 20;
  if (this->max_cid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_cid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderCompressConfigure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.HeaderCompressConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  const HeaderCompressConfigure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeaderCompressConfigure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.HeaderCompressConfigure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.HeaderCompressConfigure)
    MergeFrom(*source);
  }
}

void HeaderCompressConfigure::MergeFrom(const HeaderCompressConfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.HeaderCompressConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  profile_list_.MergeFrom(from.profile_list_);
  if (from.hdr_comp_used() != 0) {
    _internal_set_hdr_comp_used(from._internal_hdr_comp_used());
  }
  if (from.max_cid() != 0) {
    _internal_set_max_cid(from._internal_max_cid());
  }
}

void HeaderCompressConfigure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.HeaderCompressConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeaderCompressConfigure::CopyFrom(const HeaderCompressConfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.HeaderCompressConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderCompressConfigure::IsInitialized() const {
  return true;
}

void HeaderCompressConfigure::InternalSwap(HeaderCompressConfigure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  profile_list_.InternalSwap(&other->profile_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderCompressConfigure, max_cid_)
      + sizeof(HeaderCompressConfigure::max_cid_)
      - PROTOBUF_FIELD_OFFSET(HeaderCompressConfigure, hdr_comp_used_)>(
          reinterpret_cast<char*>(&hdr_comp_used_),
          reinterpret_cast<char*>(&other->hdr_comp_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderCompressConfigure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PDCPConfigure::InitAsDefaultInstance() {
  ::structure::_PDCPConfigure_default_instance_._instance.get_mutable()->rlc_info_ = const_cast< ::structure::RlcInfo*>(
      ::structure::RlcInfo::internal_default_instance());
  ::structure::_PDCPConfigure_default_instance_._instance.get_mutable()->hdr_cmp_cfg_ = const_cast< ::structure::HeaderCompressConfigure*>(
      ::structure::HeaderCompressConfigure::internal_default_instance());
}
class PDCPConfigure::_Internal {
 public:
  static const ::structure::RlcInfo& rlc_info(const PDCPConfigure* msg);
  static const ::structure::HeaderCompressConfigure& hdr_cmp_cfg(const PDCPConfigure* msg);
};

const ::structure::RlcInfo&
PDCPConfigure::_Internal::rlc_info(const PDCPConfigure* msg) {
  return *msg->rlc_info_;
}
const ::structure::HeaderCompressConfigure&
PDCPConfigure::_Internal::hdr_cmp_cfg(const PDCPConfigure* msg) {
  return *msg->hdr_cmp_cfg_;
}
PDCPConfigure::PDCPConfigure(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:structure.PDCPConfigure)
}
PDCPConfigure::PDCPConfigure(const PDCPConfigure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rlc_info()) {
    rlc_info_ = new ::structure::RlcInfo(*from.rlc_info_);
  } else {
    rlc_info_ = nullptr;
  }
  if (from._internal_has_hdr_cmp_cfg()) {
    hdr_cmp_cfg_ = new ::structure::HeaderCompressConfigure(*from.hdr_cmp_cfg_);
  } else {
    hdr_cmp_cfg_ = nullptr;
  }
  ::memcpy(&discard_timer_, &from.discard_timer_,
    static_cast<size_t>(reinterpret_cast<char*>(&qci_) -
    reinterpret_cast<char*>(&discard_timer_)) + sizeof(qci_));
  // @@protoc_insertion_point(copy_constructor:structure.PDCPConfigure)
}

void PDCPConfigure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PDCPConfigure_structure_2eproto.base);
  ::memset(&rlc_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qci_) -
      reinterpret_cast<char*>(&rlc_info_)) + sizeof(qci_));
}

PDCPConfigure::~PDCPConfigure() {
  // @@protoc_insertion_point(destructor:structure.PDCPConfigure)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PDCPConfigure::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rlc_info_;
  if (this != internal_default_instance()) delete hdr_cmp_cfg_;
}

void PDCPConfigure::ArenaDtor(void* object) {
  PDCPConfigure* _this = reinterpret_cast< PDCPConfigure* >(object);
  (void)_this;
}
void PDCPConfigure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PDCPConfigure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PDCPConfigure& PDCPConfigure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PDCPConfigure_structure_2eproto.base);
  return *internal_default_instance();
}


void PDCPConfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:structure.PDCPConfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && rlc_info_ != nullptr) {
    delete rlc_info_;
  }
  rlc_info_ = nullptr;
  if (GetArena() == nullptr && hdr_cmp_cfg_ != nullptr) {
    delete hdr_cmp_cfg_;
  }
  hdr_cmp_cfg_ = nullptr;
  ::memset(&discard_timer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qci_) -
      reinterpret_cast<char*>(&discard_timer_)) + sizeof(qci_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PDCPConfigure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sn_len = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          sn_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 qci = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          qci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 discard_timer = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          discard_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.RlcInfo rlc_info = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_rlc_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .structure.HeaderCompressConfigure hdr_cmp_cfg = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_hdr_cmp_cfg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PDCPConfigure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:structure.PDCPConfigure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sn_len = 10;
  if (this->sn_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_sn_len(), target);
  }

  // uint32 qci = 20;
  if (this->qci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_qci(), target);
  }

  // uint32 discard_timer = 30;
  if (this->discard_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_discard_timer(), target);
  }

  // .structure.RlcInfo rlc_info = 40;
  if (this->has_rlc_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::rlc_info(this), target, stream);
  }

  // .structure.HeaderCompressConfigure hdr_cmp_cfg = 50;
  if (this->has_hdr_cmp_cfg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::hdr_cmp_cfg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:structure.PDCPConfigure)
  return target;
}

size_t PDCPConfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:structure.PDCPConfigure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .structure.RlcInfo rlc_info = 40;
  if (this->has_rlc_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rlc_info_);
  }

  // .structure.HeaderCompressConfigure hdr_cmp_cfg = 50;
  if (this->has_hdr_cmp_cfg()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hdr_cmp_cfg_);
  }

  // uint32 discard_timer = 30;
  if (this->discard_timer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_discard_timer());
  }

  // uint32 sn_len = 10;
  if (this->sn_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sn_len());
  }

  // uint32 qci = 20;
  if (this->qci() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qci());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PDCPConfigure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:structure.PDCPConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  const PDCPConfigure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PDCPConfigure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:structure.PDCPConfigure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:structure.PDCPConfigure)
    MergeFrom(*source);
  }
}

void PDCPConfigure::MergeFrom(const PDCPConfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:structure.PDCPConfigure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rlc_info()) {
    _internal_mutable_rlc_info()->::structure::RlcInfo::MergeFrom(from._internal_rlc_info());
  }
  if (from.has_hdr_cmp_cfg()) {
    _internal_mutable_hdr_cmp_cfg()->::structure::HeaderCompressConfigure::MergeFrom(from._internal_hdr_cmp_cfg());
  }
  if (from.discard_timer() != 0) {
    _internal_set_discard_timer(from._internal_discard_timer());
  }
  if (from.sn_len() != 0) {
    _internal_set_sn_len(from._internal_sn_len());
  }
  if (from.qci() != 0) {
    _internal_set_qci(from._internal_qci());
  }
}

void PDCPConfigure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:structure.PDCPConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDCPConfigure::CopyFrom(const PDCPConfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:structure.PDCPConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDCPConfigure::IsInitialized() const {
  return true;
}

void PDCPConfigure::InternalSwap(PDCPConfigure* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PDCPConfigure, qci_)
      + sizeof(PDCPConfigure::qci_)
      - PROTOBUF_FIELD_OFFSET(PDCPConfigure, rlc_info_)>(
          reinterpret_cast<char*>(&rlc_info_),
          reinterpret_cast<char*>(&other->rlc_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PDCPConfigure::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace structure
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::structure::Pst* Arena::CreateMaybeMessage< ::structure::Pst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::Pst >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CuCpID* Arena::CreateMaybeMessage< ::structure::CuCpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CuCpID >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CuUpID* Arena::CreateMaybeMessage< ::structure::CuUpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CuUpID >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::SuSpID* Arena::CreateMaybeMessage< ::structure::SuSpID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::SuSpID >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::CpUpHdr* Arena::CreateMaybeMessage< ::structure::CpUpHdr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::CpUpHdr >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::SecurityConfigure* Arena::CreateMaybeMessage< ::structure::SecurityConfigure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::SecurityConfigure >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::GtpTunnelId* Arena::CreateMaybeMessage< ::structure::GtpTunnelId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::GtpTunnelId >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::GtpTunInfo* Arena::CreateMaybeMessage< ::structure::GtpTunInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::GtpTunInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::RlcInfo* Arena::CreateMaybeMessage< ::structure::RlcInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::RlcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::HeaderCompressConfigure* Arena::CreateMaybeMessage< ::structure::HeaderCompressConfigure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::HeaderCompressConfigure >(arena);
}
template<> PROTOBUF_NOINLINE ::structure::PDCPConfigure* Arena::CreateMaybeMessage< ::structure::PDCPConfigure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::structure::PDCPConfigure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
