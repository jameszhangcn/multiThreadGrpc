// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: srvEbm.proto

#include "srvEbm.pb.h"
#include "srvEbm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace srvEbm {

static const char* Ebm_method_names[] = {
  "/srvEbm.Ebm/SecurityConfigure",
  "/srvEbm.Ebm/CreateTunnel",
  "/srvEbm.Ebm/ModifyTunnel",
  "/srvEbm.Ebm/DeleteTunnel",
  "/srvEbm.Ebm/AddRbConfigure",
};

std::unique_ptr< Ebm::Stub> Ebm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Ebm::Stub> stub(new Ebm::Stub(channel));
  return stub;
}

Ebm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SecurityConfigure_(Ebm_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateTunnel_(Ebm_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyTunnel_(Ebm_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTunnel_(Ebm_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddRbConfigure_(Ebm_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Ebm::Stub::SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::srvEbm::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SecurityConfigure_, context, request, response);
}

void Ebm::Stub::experimental_async::SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SecurityConfigure_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::SecurityConfigure(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SecurityConfigure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::PrepareAsyncSecurityConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvEbm::ReqReply>::Create(channel_.get(), cq, rpcmethod_SecurityConfigure_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::AsyncSecurityConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::SecurityConfigureReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSecurityConfigureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::srvEbm::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateTunnel_, context, request, response);
}

void Ebm::Stub::experimental_async::CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTunnel_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::CreateTunnel(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateTunnel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::PrepareAsyncCreateTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvEbm::ReqReply>::Create(channel_.get(), cq, rpcmethod_CreateTunnel_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::AsyncCreateTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::CreateTunnelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateTunnelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::srvEbm::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModifyTunnel_, context, request, response);
}

void Ebm::Stub::experimental_async::ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyTunnel_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::ModifyTunnel(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModifyTunnel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::PrepareAsyncModifyTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvEbm::ReqReply>::Create(channel_.get(), cq, rpcmethod_ModifyTunnel_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::AsyncModifyTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::ModifyTunnelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModifyTunnelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::srvEbm::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteTunnel_, context, request, response);
}

void Ebm::Stub::experimental_async::DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTunnel_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::DeleteTunnel(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteTunnel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::PrepareAsyncDeleteTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvEbm::ReqReply>::Create(channel_.get(), cq, rpcmethod_DeleteTunnel_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::AsyncDeleteTunnelRaw(::grpc::ClientContext* context, const ::srvEbm::DeleteTunnelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteTunnelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Ebm::Stub::AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::srvEbm::ReqReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddRbConfigure_, context, request, response);
}

void Ebm::Stub::experimental_async::AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRbConfigure_, context, request, response, std::move(f));
}

void Ebm::Stub::experimental_async::AddRbConfigure(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddRbConfigure_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::PrepareAsyncAddRbConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::srvEbm::ReqReply>::Create(channel_.get(), cq, rpcmethod_AddRbConfigure_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::srvEbm::ReqReply>* Ebm::Stub::AsyncAddRbConfigureRaw(::grpc::ClientContext* context, const ::srvEbm::AddRbConfigureReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddRbConfigureRaw(context, request, cq);
  result->StartCall();
  return result;
}

Ebm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::SecurityConfigureReq, ::srvEbm::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::SecurityConfigureReq* req,
             ::srvEbm::ReqReply* resp) {
               return service->SecurityConfigure(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::CreateTunnelReq, ::srvEbm::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::CreateTunnelReq* req,
             ::srvEbm::ReqReply* resp) {
               return service->CreateTunnel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::ModifyTunnelReq, ::srvEbm::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::ModifyTunnelReq* req,
             ::srvEbm::ReqReply* resp) {
               return service->ModifyTunnel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::DeleteTunnelReq, ::srvEbm::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::DeleteTunnelReq* req,
             ::srvEbm::ReqReply* resp) {
               return service->DeleteTunnel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Ebm_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Ebm::Service, ::srvEbm::AddRbConfigureReq, ::srvEbm::ReqReply>(
          [](Ebm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::srvEbm::AddRbConfigureReq* req,
             ::srvEbm::ReqReply* resp) {
               return service->AddRbConfigure(ctx, req, resp);
             }, this)));
}

Ebm::Service::~Service() {
}

::grpc::Status Ebm::Service::SecurityConfigure(::grpc::ServerContext* context, const ::srvEbm::SecurityConfigureReq* request, ::srvEbm::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::CreateTunnel(::grpc::ServerContext* context, const ::srvEbm::CreateTunnelReq* request, ::srvEbm::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::ModifyTunnel(::grpc::ServerContext* context, const ::srvEbm::ModifyTunnelReq* request, ::srvEbm::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::DeleteTunnel(::grpc::ServerContext* context, const ::srvEbm::DeleteTunnelReq* request, ::srvEbm::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Ebm::Service::AddRbConfigure(::grpc::ServerContext* context, const ::srvEbm::AddRbConfigureReq* request, ::srvEbm::ReqReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace srvEbm

