// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddress_common_2eproto;
namespace common {
class SctpCntrlInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SctpCntrlInfo> _instance;
} _SctpCntrlInfo_default_instance_;
class IpAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpAddress> _instance;
} _IpAddress_default_instance_;
class SctpEndpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SctpEndpoint> _instance;
} _SctpEndpoint_default_instance_;
}  // namespace common
static void InitDefaultsscc_info_IpAddress_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_IpAddress_default_instance_;
    new (ptr) ::common::IpAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::IpAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpAddress_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpAddress_common_2eproto}, {}};

static void InitDefaultsscc_info_SctpCntrlInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_SctpCntrlInfo_default_instance_;
    new (ptr) ::common::SctpCntrlInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::SctpCntrlInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SctpCntrlInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SctpCntrlInfo_common_2eproto}, {}};

static void InitDefaultsscc_info_SctpEndpoint_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::common::_SctpEndpoint_default_instance_;
    new (ptr) ::common::SctpEndpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::common::SctpEndpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SctpEndpoint_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SctpEndpoint_common_2eproto}, {
      &scc_info_IpAddress_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SctpCntrlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::SctpCntrlInfo, sctp_user_),
  PROTOBUF_FIELD_OFFSET(::common::SctpCntrlInfo, ref_id_),
  PROTOBUF_FIELD_OFFSET(::common::SctpCntrlInfo, assoc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::IpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::IpAddress, type_),
  PROTOBUF_FIELD_OFFSET(::common::IpAddress, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::common::SctpEndpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::common::SctpEndpoint, num_ip_addrs_),
  PROTOBUF_FIELD_OFFSET(::common::SctpEndpoint, ip_addr_list_),
  PROTOBUF_FIELD_OFFSET(::common::SctpEndpoint, port_num_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::common::SctpCntrlInfo)},
  { 8, -1, sizeof(::common::IpAddress)},
  { 15, -1, sizeof(::common::SctpEndpoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_SctpCntrlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_IpAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::common::_SctpEndpoint_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\022\006common\"V\n\rSctpCntrlInfo\022"
  "#\n\tsctp_user\030\n \001(\0162\020.common.SctpUser\022\016\n\006"
  "ref_id\030\024 \001(\r\022\020\n\010assoc_id\030\036 \001(\r\">\n\tIpAddr"
  "ess\022#\n\004type\030\n \001(\0162\025.common.IpAddressType"
  "\022\014\n\004addr\030\024 \001(\t\"_\n\014SctpEndpoint\022\024\n\014num_ip"
  "_addrs\030\n \001(\r\022\'\n\014ip_addr_list\030\024 \003(\0132\021.com"
  "mon.IpAddress\022\020\n\010port_num\030\036 \001(\r*K\n\010SctpU"
  "ser\022\010\n\004X2AP\020\000\022\010\n\004NGAP\020\001\022\010\n\004XNAP\020\002\022\010\n\004F1A"
  "P\020\003\022\010\n\004E1AP\020\004\022\r\n\tUNDEFINED\020\005*#\n\rIpAddres"
  "sType\022\010\n\004IPV4\020\000\022\010\n\004IPV6\020\001*\202\n\n\007MsgType\022\024\n"
  "\020INVALID_MSG_TYPE\020\000\022\022\n\016CU_CP_E1_RESET\020\001\022"
  "\026\n\022CU_CP_E1_RESET_ACK\020\002\022\022\n\016CU_UP_E1_RESE"
  "T\020\003\022\026\n\022CU_UP_E1_RESET_ACK\020\004\022\032\n\026CU_CP_ERR"
  "OR_INDICATION\020\005\022\032\n\026CU_UP_ERROR_INDICATIO"
  "N\020\006\022\032\n\026CU_CP_E1_SETUP_REQUEST\020\007\022\033\n\027CU_CP"
  "_E1_SETUP_RESPONSE\020\010\022\032\n\026CU_CP_E1_SETUP_F"
  "AILURE\020\t\022\032\n\026CU_UP_E1_SETUP_REQUEST\020\n\022\033\n\027"
  "CU_UP_E1_SETUP_RESPONSE\020\013\022\032\n\026CU_UP_E1_SE"
  "TUP_FAILURE\020\014\022\036\n\032CU_CP_CONFIGURATION_UPD"
  "ATE\020\r\022\"\n\036CU_CP_CONFIGURATION_UPDATE_ACK\020"
  "\016\022&\n\"CU_CP_CONFIGURATION_UPDATE_FAILURE\020"
  "\017\022\036\n\032CU_UP_CONFIGURATION_UPDATE\020\020\022\"\n\036CU_"
  "UP_CONFIGURATION_UPDATE_ACK\020\021\022&\n\"CU_UP_C"
  "ONFIGURATION_UPDATE_FAILURE\020\022\022\034\n\030CU_CP_E"
  "1_RELEASE_REQUEST\020\023\022\035\n\031CU_CP_E1_RELEASE_"
  "RESPONSE\020\024\022\034\n\030CU_UP_E1_RELEASE_REQUEST\020\025"
  "\022\035\n\031CU_UP_E1_RELEASE_RESPONSE\020\026\022\033\n\027CU_UP"
  "_STATUS_INDICATION\020\027\022 \n\034BEARER_CONTEXT_S"
  "ETUP_REQUEST\020\030\022!\n\035BEARER_CONTEXT_SETUP_R"
  "ESPONSE\020\031\022 \n\034BEARER_CONTEXT_SETUP_FAILUR"
  "E\020\032\022!\n\035BEARER_CONTEXT_MODIFY_REQUEST\020\033\022\""
  "\n\036BEARER_CONTEXT_MODIFY_RESPONSE\020\034\022!\n\035BE"
  "ARER_CONTEXT_MODIFY_FAILURE\020\035\022\"\n\036BEARER_"
  "CONTEXT_MODIFY_REQUIRED\020\036\022!\n\035BEARER_CONT"
  "EXT_MODIFY_CONFIRM\020\037\022\"\n\036BEARER_CONTEXT_R"
  "ELEASE_COMMAND\020 \022#\n\037BEARER_CONTEXT_RELEA"
  "SE_COMPLETE\020!\022\"\n\036BEARER_CONTEXT_RELEASE_"
  "REQUEST\020\"\022*\n&BEARER_CONTEXT_INACTIVITY_N"
  "OTIFICATION\020#\022\030\n\024DL_DATA_NOTIFICATION\020$\022"
  "\025\n\021DATA_USAGE_REPORT\020%\022\037\n\033CU_UP_COUNTER_"
  "CHECK_REQUEST\020&\022\030\n\024UL_DATA_NOTIFICATION\020"
  "\'\022\033\n\027MR_DC_DATA_USAGE_REPORT\020(b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[3] = {
  &scc_info_IpAddress_common_2eproto.base,
  &scc_info_SctpCntrlInfo_common_2eproto.base,
  &scc_info_SctpEndpoint_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, false, descriptor_table_protodef_common_2eproto, "common.proto", 1678,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 3, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto)), true);
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SctpUser_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool SctpUser_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IpAddressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool IpAddressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SctpCntrlInfo::InitAsDefaultInstance() {
}
class SctpCntrlInfo::_Internal {
 public:
};

SctpCntrlInfo::SctpCntrlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.SctpCntrlInfo)
}
SctpCntrlInfo::SctpCntrlInfo(const SctpCntrlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&assoc_id_, &from.assoc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_id_) -
    reinterpret_cast<char*>(&assoc_id_)) + sizeof(ref_id_));
  // @@protoc_insertion_point(copy_constructor:common.SctpCntrlInfo)
}

void SctpCntrlInfo::SharedCtor() {
  ::memset(&assoc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_id_) -
      reinterpret_cast<char*>(&assoc_id_)) + sizeof(ref_id_));
}

SctpCntrlInfo::~SctpCntrlInfo() {
  // @@protoc_insertion_point(destructor:common.SctpCntrlInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SctpCntrlInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SctpCntrlInfo::ArenaDtor(void* object) {
  SctpCntrlInfo* _this = reinterpret_cast< SctpCntrlInfo* >(object);
  (void)_this;
}
void SctpCntrlInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SctpCntrlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SctpCntrlInfo& SctpCntrlInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SctpCntrlInfo_common_2eproto.base);
  return *internal_default_instance();
}


void SctpCntrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SctpCntrlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&assoc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_id_) -
      reinterpret_cast<char*>(&assoc_id_)) + sizeof(ref_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SctpCntrlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.SctpUser sctp_user = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sctp_user(static_cast<::common::SctpUser>(val));
        } else goto handle_unusual;
        continue;
      // uint32 ref_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ref_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 assoc_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          assoc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SctpCntrlInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SctpCntrlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.SctpUser sctp_user = 10;
  if (this->sctp_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_sctp_user(), target);
  }

  // uint32 ref_id = 20;
  if (this->ref_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_ref_id(), target);
  }

  // uint32 assoc_id = 30;
  if (this->assoc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_assoc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SctpCntrlInfo)
  return target;
}

size_t SctpCntrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SctpCntrlInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 assoc_id = 30;
  if (this->assoc_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_assoc_id());
  }

  // .common.SctpUser sctp_user = 10;
  if (this->sctp_user() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sctp_user());
  }

  // uint32 ref_id = 20;
  if (this->ref_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ref_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SctpCntrlInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.SctpCntrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SctpCntrlInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SctpCntrlInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.SctpCntrlInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.SctpCntrlInfo)
    MergeFrom(*source);
  }
}

void SctpCntrlInfo::MergeFrom(const SctpCntrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SctpCntrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assoc_id() != 0) {
    _internal_set_assoc_id(from._internal_assoc_id());
  }
  if (from.sctp_user() != 0) {
    _internal_set_sctp_user(from._internal_sctp_user());
  }
  if (from.ref_id() != 0) {
    _internal_set_ref_id(from._internal_ref_id());
  }
}

void SctpCntrlInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.SctpCntrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SctpCntrlInfo::CopyFrom(const SctpCntrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SctpCntrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SctpCntrlInfo::IsInitialized() const {
  return true;
}

void SctpCntrlInfo::InternalSwap(SctpCntrlInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SctpCntrlInfo, ref_id_)
      + sizeof(SctpCntrlInfo::ref_id_)
      - PROTOBUF_FIELD_OFFSET(SctpCntrlInfo, assoc_id_)>(
          reinterpret_cast<char*>(&assoc_id_),
          reinterpret_cast<char*>(&other->assoc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SctpCntrlInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpAddress::InitAsDefaultInstance() {
}
class IpAddress::_Internal {
 public:
};

IpAddress::IpAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.IpAddress)
}
IpAddress::IpAddress(const IpAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:common.IpAddress)
}

void IpAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpAddress_common_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

IpAddress::~IpAddress() {
  // @@protoc_insertion_point(destructor:common.IpAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IpAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpAddress::ArenaDtor(void* object) {
  IpAddress* _this = reinterpret_cast< IpAddress* >(object);
  (void)_this;
}
void IpAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpAddress& IpAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpAddress_common_2eproto.base);
  return *internal_default_instance();
}


void IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:common.IpAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .common.IpAddressType type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::common::IpAddressType>(val));
        } else goto handle_unusual;
        continue;
      // string addr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "common.IpAddress.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.IpAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.IpAddressType type = 10;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // string addr = 20;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "common.IpAddress.addr");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.IpAddress)
  return target;
}

size_t IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.IpAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 20;
  if (this->addr().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // .common.IpAddressType type = 10;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IpAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.IpAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.IpAddress)
    MergeFrom(*source);
  }
}

void IpAddress::MergeFrom(const IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {
    _internal_set_addr(from._internal_addr());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void IpAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddress::CopyFrom(const IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddress::IsInitialized() const {
  return true;
}

void IpAddress::InternalSwap(IpAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SctpEndpoint::InitAsDefaultInstance() {
}
class SctpEndpoint::_Internal {
 public:
};

SctpEndpoint::SctpEndpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ip_addr_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:common.SctpEndpoint)
}
SctpEndpoint::SctpEndpoint(const SctpEndpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ip_addr_list_(from.ip_addr_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_ip_addrs_, &from.num_ip_addrs_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_num_) -
    reinterpret_cast<char*>(&num_ip_addrs_)) + sizeof(port_num_));
  // @@protoc_insertion_point(copy_constructor:common.SctpEndpoint)
}

void SctpEndpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SctpEndpoint_common_2eproto.base);
  ::memset(&num_ip_addrs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_num_) -
      reinterpret_cast<char*>(&num_ip_addrs_)) + sizeof(port_num_));
}

SctpEndpoint::~SctpEndpoint() {
  // @@protoc_insertion_point(destructor:common.SctpEndpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SctpEndpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SctpEndpoint::ArenaDtor(void* object) {
  SctpEndpoint* _this = reinterpret_cast< SctpEndpoint* >(object);
  (void)_this;
}
void SctpEndpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SctpEndpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SctpEndpoint& SctpEndpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SctpEndpoint_common_2eproto.base);
  return *internal_default_instance();
}


void SctpEndpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:common.SctpEndpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_list_.Clear();
  ::memset(&num_ip_addrs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_num_) -
      reinterpret_cast<char*>(&num_ip_addrs_)) + sizeof(port_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SctpEndpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_ip_addrs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          num_ip_addrs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.IpAddress ip_addr_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ip_addr_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 port_num = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          port_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SctpEndpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:common.SctpEndpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_ip_addrs = 10;
  if (this->num_ip_addrs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_num_ip_addrs(), target);
  }

  // repeated .common.IpAddress ip_addr_list = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ip_addr_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_ip_addr_list(i), target, stream);
  }

  // uint32 port_num = 30;
  if (this->port_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_port_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:common.SctpEndpoint)
  return target;
}

size_t SctpEndpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:common.SctpEndpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .common.IpAddress ip_addr_list = 20;
  total_size += 2UL * this->_internal_ip_addr_list_size();
  for (const auto& msg : this->ip_addr_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 num_ip_addrs = 10;
  if (this->num_ip_addrs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_ip_addrs());
  }

  // uint32 port_num = 30;
  if (this->port_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SctpEndpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:common.SctpEndpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SctpEndpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SctpEndpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:common.SctpEndpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:common.SctpEndpoint)
    MergeFrom(*source);
  }
}

void SctpEndpoint::MergeFrom(const SctpEndpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:common.SctpEndpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_addr_list_.MergeFrom(from.ip_addr_list_);
  if (from.num_ip_addrs() != 0) {
    _internal_set_num_ip_addrs(from._internal_num_ip_addrs());
  }
  if (from.port_num() != 0) {
    _internal_set_port_num(from._internal_port_num());
  }
}

void SctpEndpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:common.SctpEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SctpEndpoint::CopyFrom(const SctpEndpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:common.SctpEndpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SctpEndpoint::IsInitialized() const {
  return true;
}

void SctpEndpoint::InternalSwap(SctpEndpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_addr_list_.InternalSwap(&other->ip_addr_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SctpEndpoint, port_num_)
      + sizeof(SctpEndpoint::port_num_)
      - PROTOBUF_FIELD_OFFSET(SctpEndpoint, num_ip_addrs_)>(
          reinterpret_cast<char*>(&num_ip_addrs_),
          reinterpret_cast<char*>(&other->num_ip_addrs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SctpEndpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::common::SctpCntrlInfo* Arena::CreateMaybeMessage< ::common::SctpCntrlInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SctpCntrlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::common::IpAddress* Arena::CreateMaybeMessage< ::common::IpAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::IpAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::common::SctpEndpoint* Arena::CreateMaybeMessage< ::common::SctpEndpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::common::SctpEndpoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
